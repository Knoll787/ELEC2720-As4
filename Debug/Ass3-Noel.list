
Ass3-Noel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08009950  08009950  00019950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ac4  08009ac4  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08009ac4  08009ac4  00019ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009acc  08009acc  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009acc  08009acc  00019acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ad0  08009ad0  00019ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08009ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00000928  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009c0  200009c0  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015620  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003942  00000000  00000000  000356e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00039030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e68  00000000  00000000  0003a018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000547c  00000000  00000000  0003ae80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000167bc  00000000  00000000  000402fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4b66  00000000  00000000  00056ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012b61e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ce0  00000000  00000000  0012b670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009938 	.word	0x08009938

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08009938 	.word	0x08009938

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <DMACallback>:
#if DO_QUESTION == 4

static volatile uint16_t TransferComplete = 0;
// DMA call back function (interrupt service routine)
static void DMACallback(DMA_HandleTypeDef *hdma)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
    // Check it is the correct DMA Channel
    if (hdma == &hdma_memtomem_dma2_stream0)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <DMACallback+0x24>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d102      	bne.n	800059a <DMACallback+0x16>
    {
        TransferComplete = 1;
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <DMACallback+0x28>)
 8000596:	2201      	movs	r2, #1
 8000598:	801a      	strh	r2, [r3, #0]
    }
}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200001bc 	.word	0x200001bc
 80005ac:	200000b4 	.word	0x200000b4

080005b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
    
    //uint16_t data = GPIOD->ODR;
    uint16_t data = 0x0000;
 80005ba:	2300      	movs	r3, #0
 80005bc:	81fb      	strh	r3, [r7, #14]

    HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0,
 80005be:	4a3d      	ldr	r2, [pc, #244]	; (80006b4 <HAL_GPIO_EXTI_Callback+0x104>)
 80005c0:	2100      	movs	r1, #0
 80005c2:	483d      	ldr	r0, [pc, #244]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x108>)
 80005c4:	f001 fecc 	bl	8002360 <HAL_DMA_RegisterCallback>
                             HAL_DMA_XFER_CPLT_CB_ID, &DMACallback);

    if(GPIO_Pin == JOY_A_Pin) {
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	2b10      	cmp	r3, #16
 80005cc:	d114      	bne.n	80005f8 <HAL_GPIO_EXTI_Callback+0x48>
        data |= (1 << 12); // Green LED => Set
 80005ce:	89fb      	ldrh	r3, [r7, #14]
 80005d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	81fb      	strh	r3, [r7, #14]
        data &= ~(1 << 14); // Red LED => Clear 
 80005d8:	89fb      	ldrh	r3, [r7, #14]
 80005da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80005de:	b29b      	uxth	r3, r3
 80005e0:	81fb      	strh	r3, [r7, #14]
        data &= ~(1 << 15); // Blue LED => Clear 
 80005e2:	89fb      	ldrh	r3, [r7, #14]
 80005e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	81fb      	strh	r3, [r7, #14]
        printf("JOY_A: %x\n\0", data);
 80005ec:	89fb      	ldrh	r3, [r7, #14]
 80005ee:	4619      	mov	r1, r3
 80005f0:	4832      	ldr	r0, [pc, #200]	; (80006bc <HAL_GPIO_EXTI_Callback+0x10c>)
 80005f2:	f008 fb8d 	bl	8008d10 <iprintf>
 80005f6:	e049      	b.n	800068c <HAL_GPIO_EXTI_Callback+0xdc>
    }
    else if(GPIO_Pin == JOY_D_Pin) {
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	2b40      	cmp	r3, #64	; 0x40
 80005fc:	d114      	bne.n	8000628 <HAL_GPIO_EXTI_Callback+0x78>
        data &= ~(1 << 12); // Green LED => Clear 
 80005fe:	89fb      	ldrh	r3, [r7, #14]
 8000600:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000604:	b29b      	uxth	r3, r3
 8000606:	81fb      	strh	r3, [r7, #14]
        data |= (1 << 14); // Red LED => Set 
 8000608:	89fb      	ldrh	r3, [r7, #14]
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	b29b      	uxth	r3, r3
 8000610:	81fb      	strh	r3, [r7, #14]
        data &= ~(1 << 15); // Blue LED => Clear 
 8000612:	89fb      	ldrh	r3, [r7, #14]
 8000614:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000618:	b29b      	uxth	r3, r3
 800061a:	81fb      	strh	r3, [r7, #14]
        printf("JOY_D: %x\n\0", data);
 800061c:	89fb      	ldrh	r3, [r7, #14]
 800061e:	4619      	mov	r1, r3
 8000620:	4827      	ldr	r0, [pc, #156]	; (80006c0 <HAL_GPIO_EXTI_Callback+0x110>)
 8000622:	f008 fb75 	bl	8008d10 <iprintf>
 8000626:	e031      	b.n	800068c <HAL_GPIO_EXTI_Callback+0xdc>
    }
    else if(GPIO_Pin == JOY_C_Pin) {
 8000628:	88fb      	ldrh	r3, [r7, #6]
 800062a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800062e:	d116      	bne.n	800065e <HAL_GPIO_EXTI_Callback+0xae>
        data &= ~(1 << 12); // Green LED => Clear 
 8000630:	89fb      	ldrh	r3, [r7, #14]
 8000632:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000636:	b29b      	uxth	r3, r3
 8000638:	81fb      	strh	r3, [r7, #14]
        data &= ~(1 << 14); // Red LED => Clear 
 800063a:	89fb      	ldrh	r3, [r7, #14]
 800063c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000640:	b29b      	uxth	r3, r3
 8000642:	81fb      	strh	r3, [r7, #14]
        data |= (1 << 15); // Blue LED => Set 
 8000644:	89fb      	ldrh	r3, [r7, #14]
 8000646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800064a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800064e:	b29b      	uxth	r3, r3
 8000650:	81fb      	strh	r3, [r7, #14]
        printf("JOY_C: %x\n\0", data);
 8000652:	89fb      	ldrh	r3, [r7, #14]
 8000654:	4619      	mov	r1, r3
 8000656:	481b      	ldr	r0, [pc, #108]	; (80006c4 <HAL_GPIO_EXTI_Callback+0x114>)
 8000658:	f008 fb5a 	bl	8008d10 <iprintf>
 800065c:	e016      	b.n	800068c <HAL_GPIO_EXTI_Callback+0xdc>
    }
    else if(GPIO_Pin == JOY_CTR_Pin) {
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	2b80      	cmp	r3, #128	; 0x80
 8000662:	d113      	bne.n	800068c <HAL_GPIO_EXTI_Callback+0xdc>
        data &= ~(1 << 12); // Green LED => Clear 
 8000664:	89fb      	ldrh	r3, [r7, #14]
 8000666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800066a:	b29b      	uxth	r3, r3
 800066c:	81fb      	strh	r3, [r7, #14]
        data &= ~(1 << 14); // Red LED => Clear 
 800066e:	89fb      	ldrh	r3, [r7, #14]
 8000670:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000674:	b29b      	uxth	r3, r3
 8000676:	81fb      	strh	r3, [r7, #14]
        data &= ~(1 << 15); // Blue LED => Clear 
 8000678:	89fb      	ldrh	r3, [r7, #14]
 800067a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800067e:	b29b      	uxth	r3, r3
 8000680:	81fb      	strh	r3, [r7, #14]
        printf("JOY_CTR: %x\n\0", data);
 8000682:	89fb      	ldrh	r3, [r7, #14]
 8000684:	4619      	mov	r1, r3
 8000686:	4810      	ldr	r0, [pc, #64]	; (80006c8 <HAL_GPIO_EXTI_Callback+0x118>)
 8000688:	f008 fb42 	bl	8008d10 <iprintf>
    }

    // Begin DMA
     HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0,
 800068c:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <HAL_GPIO_EXTI_Callback+0x104>)
 800068e:	2100      	movs	r1, #0
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x108>)
 8000692:	f001 fe65 	bl	8002360 <HAL_DMA_RegisterCallback>
                             HAL_DMA_XFER_CPLT_CB_ID, &DMACallback);

    // Send DMA
    HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, 
 8000696:	f107 010e 	add.w	r1, r7, #14
 800069a:	2302      	movs	r3, #2
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <HAL_GPIO_EXTI_Callback+0x11c>)
 800069e:	4806      	ldr	r0, [pc, #24]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x108>)
 80006a0:	f001 fc7c 	bl	8001f9c <HAL_DMA_Start_IT>
                        &data, &(GPIOD->ODR), 2);

    // End DMA
    HAL_DMA_UnRegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_CPLT_CB_ID);
 80006a4:	2100      	movs	r1, #0
 80006a6:	4804      	ldr	r0, [pc, #16]	; (80006b8 <HAL_GPIO_EXTI_Callback+0x108>)
 80006a8:	f001 feae 	bl	8002408 <HAL_DMA_UnRegisterCallback>
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	08000585 	.word	0x08000585
 80006b8:	200001bc 	.word	0x200001bc
 80006bc:	08009950 	.word	0x08009950
 80006c0:	0800995c 	.word	0x0800995c
 80006c4:	08009968 	.word	0x08009968
 80006c8:	08009974 	.word	0x08009974
 80006cc:	40020c14 	.word	0x40020c14

080006d0 <Ass4_main>:

//Found Analouge Input
volatile uint16_t got_ai = 0;

void Ass4_main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;

    while (1)
    {
        if ((status = HAL_ADC_Start_DMA(&hadc1, &pots, 1)) != HAL_OK)
 80006d6:	2201      	movs	r2, #1
 80006d8:	490a      	ldr	r1, [pc, #40]	; (8000704 <Ass4_main+0x34>)
 80006da:	480b      	ldr	r0, [pc, #44]	; (8000708 <Ass4_main+0x38>)
 80006dc:	f000 fec6 	bl	800146c <HAL_ADC_Start_DMA>
 80006e0:	4603      	mov	r3, r0
 80006e2:	71fb      	strb	r3, [r7, #7]
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d004      	beq.n	80006f4 <Ass4_main+0x24>
        {
            printf("-> ERROR: HAL_ADC_Start() call failed (status = %d)\n",
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	4619      	mov	r1, r3
 80006ee:	4807      	ldr	r0, [pc, #28]	; (800070c <Ass4_main+0x3c>)
 80006f0:	f008 fb0e 	bl	8008d10 <iprintf>
                   status);
        }
        printf("\n\0");
 80006f4:	200a      	movs	r0, #10
 80006f6:	f008 fb23 	bl	8008d40 <putchar>

        HAL_Delay(1000);
 80006fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006fe:	f000 fd3d 	bl	800117c <HAL_Delay>
        if ((status = HAL_ADC_Start_DMA(&hadc1, &pots, 1)) != HAL_OK)
 8000702:	e7e8      	b.n	80006d6 <Ass4_main+0x6>
 8000704:	200000b8 	.word	0x200000b8
 8000708:	200000c0 	.word	0x200000c0
 800070c:	080099a8 	.word	0x080099a8

08000710 <HAL_ADC_ConvCpltCallback>:
    }
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
    if (hadc == &hadc1)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a0c      	ldr	r2, [pc, #48]	; (800074c <HAL_ADC_ConvCpltCallback+0x3c>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d102      	bne.n	8000726 <HAL_ADC_ConvCpltCallback+0x16>
    {
        got_ai = 1;
 8000720:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <HAL_ADC_ConvCpltCallback+0x40>)
 8000722:	2201      	movs	r2, #1
 8000724:	801a      	strh	r2, [r3, #0]
    }

    printf("Pot: %d\t", pots[0]);
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <HAL_ADC_ConvCpltCallback+0x44>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	b29b      	uxth	r3, r3
 800072c:	4619      	mov	r1, r3
 800072e:	480a      	ldr	r0, [pc, #40]	; (8000758 <HAL_ADC_ConvCpltCallback+0x48>)
 8000730:	f008 faee 	bl	8008d10 <iprintf>
    printf("Pot: %d\t", pots[1]);
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <HAL_ADC_ConvCpltCallback+0x44>)
 8000736:	885b      	ldrh	r3, [r3, #2]
 8000738:	b29b      	uxth	r3, r3
 800073a:	4619      	mov	r1, r3
 800073c:	4806      	ldr	r0, [pc, #24]	; (8000758 <HAL_ADC_ConvCpltCallback+0x48>)
 800073e:	f008 fae7 	bl	8008d10 <iprintf>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000c0 	.word	0x200000c0
 8000750:	200000bc 	.word	0x200000bc
 8000754:	200000b8 	.word	0x200000b8
 8000758:	080099e0 	.word	0x080099e0

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 8000760:	f008 f83e 	bl	80087e0 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000764:	f000 fc98 	bl	8001098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000768:	f000 f810 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076c:	f000 f964 	bl	8000a38 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000770:	f000 f8d8 	bl	8000924 <MX_I2C1_Init>
  MX_DMA_Init();
 8000774:	f000 f904 	bl	8000980 <MX_DMA_Init>
  MX_USB_HOST_Init();
 8000778:	f007 fb04 	bl	8007d84 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 800077c:	f000 f870 	bl	8000860 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  
  Ass4_main();
 8000780:	f7ff ffa6 	bl	80006d0 <Ass4_main>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000784:	f007 fb24 	bl	8007dd0 <MX_USB_HOST_Process>
 8000788:	e7fc      	b.n	8000784 <main+0x28>
	...

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	; 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f008 f9d0 	bl	8008b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	4b28      	ldr	r3, [pc, #160]	; (8000858 <SystemClock_Config+0xcc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a27      	ldr	r2, [pc, #156]	; (8000858 <SystemClock_Config+0xcc>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <SystemClock_Config+0xcc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <SystemClock_Config+0xd0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a21      	ldr	r2, [pc, #132]	; (800085c <SystemClock_Config+0xd0>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <SystemClock_Config+0xd0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007fc:	2308      	movs	r3, #8
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000800:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000804:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000806:	2302      	movs	r3, #2
 8000808:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800080a:	2307      	movs	r3, #7
 800080c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	4618      	mov	r0, r3
 8000814:	f003 fe5e 	bl	80044d4 <HAL_RCC_OscConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800081e:	f000 fa69 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000822:	230f      	movs	r3, #15
 8000824:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000826:	2302      	movs	r3, #2
 8000828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800082e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000832:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000838:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	2105      	movs	r1, #5
 8000840:	4618      	mov	r0, r3
 8000842:	f004 f8bf 	bl	80049c4 <HAL_RCC_ClockConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800084c:	f000 fa52 	bl	8000cf4 <Error_Handler>
  }
}
 8000850:	bf00      	nop
 8000852:	3750      	adds	r7, #80	; 0x50
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	40007000 	.word	0x40007000

08000860 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000866:	463b      	mov	r3, r7
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000872:	4b29      	ldr	r3, [pc, #164]	; (8000918 <MX_ADC1_Init+0xb8>)
 8000874:	4a29      	ldr	r2, [pc, #164]	; (800091c <MX_ADC1_Init+0xbc>)
 8000876:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000878:	4b27      	ldr	r3, [pc, #156]	; (8000918 <MX_ADC1_Init+0xb8>)
 800087a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800087e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000880:	4b25      	ldr	r3, [pc, #148]	; (8000918 <MX_ADC1_Init+0xb8>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000886:	4b24      	ldr	r3, [pc, #144]	; (8000918 <MX_ADC1_Init+0xb8>)
 8000888:	2201      	movs	r2, #1
 800088a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <MX_ADC1_Init+0xb8>)
 800088e:	2200      	movs	r2, #0
 8000890:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_ADC1_Init+0xb8>)
 8000894:	2200      	movs	r2, #0
 8000896:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089a:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_ADC1_Init+0xb8>)
 800089c:	2200      	movs	r2, #0
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_ADC1_Init+0xb8>)
 80008a2:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <MX_ADC1_Init+0xc0>)
 80008a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_ADC1_Init+0xb8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_ADC1_Init+0xb8>)
 80008ae:	2202      	movs	r2, #2
 80008b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_ADC1_Init+0xb8>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_ADC1_Init+0xb8>)
 80008bc:	2201      	movs	r2, #1
 80008be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c0:	4815      	ldr	r0, [pc, #84]	; (8000918 <MX_ADC1_Init+0xb8>)
 80008c2:	f000 fc7f 	bl	80011c4 <HAL_ADC_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008cc:	f000 fa12 	bl	8000cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80008d0:	2307      	movs	r3, #7
 80008d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008d4:	2301      	movs	r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008dc:	463b      	mov	r3, r7
 80008de:	4619      	mov	r1, r3
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_ADC1_Init+0xb8>)
 80008e2:	f000 fef1 	bl	80016c8 <HAL_ADC_ConfigChannel>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008ec:	f000 fa02 	bl	8000cf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80008f0:	2306      	movs	r3, #6
 80008f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008f8:	2301      	movs	r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fc:	463b      	mov	r3, r7
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_ADC1_Init+0xb8>)
 8000902:	f000 fee1 	bl	80016c8 <HAL_ADC_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800090c:	f000 f9f2 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200000c0 	.word	0x200000c0
 800091c:	40012000 	.word	0x40012000
 8000920:	0f000001 	.word	0x0f000001

08000924 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_I2C1_Init+0x50>)
 800092a:	4a13      	ldr	r2, [pc, #76]	; (8000978 <MX_I2C1_Init+0x54>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_I2C1_Init+0x50>)
 8000930:	4a12      	ldr	r2, [pc, #72]	; (800097c <MX_I2C1_Init+0x58>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_I2C1_Init+0x50>)
 8000942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000946:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_I2C1_Init+0x50>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_I2C1_Init+0x50>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_I2C1_Init+0x50>)
 8000962:	f003 fc73 	bl	800424c <HAL_I2C_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800096c:	f000 f9c2 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000168 	.word	0x20000168
 8000978:	40005400 	.word	0x40005400
 800097c:	000186a0 	.word	0x000186a0

08000980 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <MX_DMA_Init+0xac>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <MX_DMA_Init+0xac>)
 8000990:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <MX_DMA_Init+0xac>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80009a2:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <MX_DMA_Init+0xb0>)
 80009a4:	4a23      	ldr	r2, [pc, #140]	; (8000a34 <MX_DMA_Init+0xb4>)
 80009a6:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80009a8:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <MX_DMA_Init+0xb0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <MX_DMA_Init+0xb0>)
 80009b0:	2280      	movs	r2, #128	; 0x80
 80009b2:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80009b4:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <MX_DMA_Init+0xb0>)
 80009b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ba:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80009bc:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_DMA_Init+0xb0>)
 80009be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009c2:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_DMA_Init+0xb0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_DMA_Init+0xb0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_DMA_Init+0xb0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_DMA_Init+0xb0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_DMA_Init+0xb0>)
 80009de:	2204      	movs	r2, #4
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_DMA_Init+0xb0>)
 80009e4:	2203      	movs	r2, #3
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_DMA_Init+0xb0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_DMA_Init+0xb0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80009f4:	480e      	ldr	r0, [pc, #56]	; (8000a30 <MX_DMA_Init+0xb0>)
 80009f6:	f001 fa23 	bl	8001e40 <HAL_DMA_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_DMA_Init+0x84>
  {
    Error_Handler( );
 8000a00:	f000 f978 	bl	8000cf4 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	2038      	movs	r0, #56	; 0x38
 8000a0a:	f001 f9e2 	bl	8001dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a0e:	2038      	movs	r0, #56	; 0x38
 8000a10:	f001 f9fb 	bl	8001e0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	203c      	movs	r0, #60	; 0x3c
 8000a1a:	f001 f9da 	bl	8001dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000a1e:	203c      	movs	r0, #60	; 0x3c
 8000a20:	f001 f9f3 	bl	8001e0a <HAL_NVIC_EnableIRQ>

}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	200001bc 	.word	0x200001bc
 8000a34:	40026410 	.word	0x40026410

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	; 0x30
 8000a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	4ba2      	ldr	r3, [pc, #648]	; (8000cdc <MX_GPIO_Init+0x2a4>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4aa1      	ldr	r2, [pc, #644]	; (8000cdc <MX_GPIO_Init+0x2a4>)
 8000a58:	f043 0310 	orr.w	r3, r3, #16
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b9f      	ldr	r3, [pc, #636]	; (8000cdc <MX_GPIO_Init+0x2a4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	4b9b      	ldr	r3, [pc, #620]	; (8000cdc <MX_GPIO_Init+0x2a4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a9a      	ldr	r2, [pc, #616]	; (8000cdc <MX_GPIO_Init+0x2a4>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b98      	ldr	r3, [pc, #608]	; (8000cdc <MX_GPIO_Init+0x2a4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b94      	ldr	r3, [pc, #592]	; (8000cdc <MX_GPIO_Init+0x2a4>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a93      	ldr	r2, [pc, #588]	; (8000cdc <MX_GPIO_Init+0x2a4>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b91      	ldr	r3, [pc, #580]	; (8000cdc <MX_GPIO_Init+0x2a4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b8d      	ldr	r3, [pc, #564]	; (8000cdc <MX_GPIO_Init+0x2a4>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a8c      	ldr	r2, [pc, #560]	; (8000cdc <MX_GPIO_Init+0x2a4>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b8a      	ldr	r3, [pc, #552]	; (8000cdc <MX_GPIO_Init+0x2a4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b86      	ldr	r3, [pc, #536]	; (8000cdc <MX_GPIO_Init+0x2a4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a85      	ldr	r2, [pc, #532]	; (8000cdc <MX_GPIO_Init+0x2a4>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b83      	ldr	r3, [pc, #524]	; (8000cdc <MX_GPIO_Init+0x2a4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b7f      	ldr	r3, [pc, #508]	; (8000cdc <MX_GPIO_Init+0x2a4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a7e      	ldr	r2, [pc, #504]	; (8000cdc <MX_GPIO_Init+0x2a4>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b7c      	ldr	r3, [pc, #496]	; (8000cdc <MX_GPIO_Init+0x2a4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2108      	movs	r1, #8
 8000afa:	4879      	ldr	r0, [pc, #484]	; (8000ce0 <MX_GPIO_Init+0x2a8>)
 8000afc:	f001 ff6a 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2101      	movs	r1, #1
 8000b04:	4877      	ldr	r0, [pc, #476]	; (8000ce4 <MX_GPIO_Init+0x2ac>)
 8000b06:	f001 ff65 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b10:	4875      	ldr	r0, [pc, #468]	; (8000ce8 <MX_GPIO_Init+0x2b0>)
 8000b12:	f001 ff5f 	bl	80029d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b16:	2308      	movs	r3, #8
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	486c      	ldr	r0, [pc, #432]	; (8000ce0 <MX_GPIO_Init+0x2a8>)
 8000b2e:	f001 fdb5 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	4866      	ldr	r0, [pc, #408]	; (8000ce4 <MX_GPIO_Init+0x2ac>)
 8000b4a:	f001 fda7 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b4e:	2308      	movs	r3, #8
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b5e:	2305      	movs	r3, #5
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4619      	mov	r1, r3
 8000b68:	485e      	ldr	r0, [pc, #376]	; (8000ce4 <MX_GPIO_Init+0x2ac>)
 8000b6a:	f001 fd97 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b72:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	485a      	ldr	r0, [pc, #360]	; (8000cec <MX_GPIO_Init+0x2b4>)
 8000b84:	f001 fd8a 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_A_Pin */
  GPIO_InitStruct.Pin = JOY_A_Pin;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b8c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_A_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4853      	ldr	r0, [pc, #332]	; (8000cec <MX_GPIO_Init+0x2b4>)
 8000b9e:	f001 fd7d 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SCK_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8000ba2:	2320      	movs	r3, #32
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bb2:	2305      	movs	r3, #5
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	484b      	ldr	r0, [pc, #300]	; (8000cec <MX_GPIO_Init+0x2b4>)
 8000bbe:	f001 fd6d 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4846      	ldr	r0, [pc, #280]	; (8000cf0 <MX_GPIO_Init+0x2b8>)
 8000bd6:	f001 fd61 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bec:	2305      	movs	r3, #5
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	483e      	ldr	r0, [pc, #248]	; (8000cf0 <MX_GPIO_Init+0x2b8>)
 8000bf8:	f001 fd50 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_C_Pin */
  GPIO_InitStruct.Pin = JOY_C_Pin;
 8000bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_C_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	4837      	ldr	r0, [pc, #220]	; (8000cf0 <MX_GPIO_Init+0x2b8>)
 8000c14:	f001 fd42 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c18:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c1c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	482d      	ldr	r0, [pc, #180]	; (8000ce8 <MX_GPIO_Init+0x2b0>)
 8000c32:	f001 fd33 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_D_Pin JOY_CTR_Pin */
  GPIO_InitStruct.Pin = JOY_D_Pin|JOY_CTR_Pin;
 8000c36:	23c0      	movs	r3, #192	; 0xc0
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c3a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4826      	ldr	r0, [pc, #152]	; (8000ce4 <MX_GPIO_Init+0x2ac>)
 8000c4c:	f001 fd26 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c62:	2306      	movs	r3, #6
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	481d      	ldr	r0, [pc, #116]	; (8000ce4 <MX_GPIO_Init+0x2ac>)
 8000c6e:	f001 fd15 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c72:	2320      	movs	r3, #32
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4818      	ldr	r0, [pc, #96]	; (8000ce8 <MX_GPIO_Init+0x2b0>)
 8000c86:	f001 fd09 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c8e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <MX_GPIO_Init+0x2a8>)
 8000ca0:	f001 fcfc 	bl	800269c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	200a      	movs	r0, #10
 8000caa:	f001 f892 	bl	8001dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000cae:	200a      	movs	r0, #10
 8000cb0:	f001 f8ab 	bl	8001e0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2017      	movs	r0, #23
 8000cba:	f001 f88a 	bl	8001dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000cbe:	2017      	movs	r0, #23
 8000cc0:	f001 f8a3 	bl	8001e0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2028      	movs	r0, #40	; 0x28
 8000cca:	f001 f882 	bl	8001dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cce:	2028      	movs	r0, #40	; 0x28
 8000cd0:	f001 f89b 	bl	8001e0a <HAL_NVIC_EnableIRQ>

}
 8000cd4:	bf00      	nop
 8000cd6:	3730      	adds	r7, #48	; 0x30
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40020800 	.word	0x40020800
 8000ce8:	40020c00 	.word	0x40020c00
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d14:	6453      	str	r3, [r2, #68]	; 0x44
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d3e:	2007      	movs	r0, #7
 8000d40:	f001 f83c 	bl	8001dbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800

08000d50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a32      	ldr	r2, [pc, #200]	; (8000e38 <HAL_ADC_MspInit+0xe8>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d15e      	bne.n	8000e30 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b31      	ldr	r3, [pc, #196]	; (8000e3c <HAL_ADC_MspInit+0xec>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	4a30      	ldr	r2, [pc, #192]	; (8000e3c <HAL_ADC_MspInit+0xec>)
 8000d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d80:	6453      	str	r3, [r2, #68]	; 0x44
 8000d82:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <HAL_ADC_MspInit+0xec>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <HAL_ADC_MspInit+0xec>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a29      	ldr	r2, [pc, #164]	; (8000e3c <HAL_ADC_MspInit+0xec>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <HAL_ADC_MspInit+0xec>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000daa:	23c0      	movs	r3, #192	; 0xc0
 8000dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dae:	2303      	movs	r3, #3
 8000db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4820      	ldr	r0, [pc, #128]	; (8000e40 <HAL_ADC_MspInit+0xf0>)
 8000dbe:	f001 fc6d 	bl	800269c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <HAL_ADC_MspInit+0xf4>)
 8000dc4:	4a20      	ldr	r2, [pc, #128]	; (8000e48 <HAL_ADC_MspInit+0xf8>)
 8000dc6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000dc8:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <HAL_ADC_MspInit+0xf4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <HAL_ADC_MspInit+0xf4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <HAL_ADC_MspInit+0xf4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <HAL_ADC_MspInit+0xf4>)
 8000ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000de2:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_ADC_MspInit+0xf4>)
 8000de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000de8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <HAL_ADC_MspInit+0xf4>)
 8000dec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000df0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_ADC_MspInit+0xf4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_ADC_MspInit+0xf4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_ADC_MspInit+0xf4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e04:	480f      	ldr	r0, [pc, #60]	; (8000e44 <HAL_ADC_MspInit+0xf4>)
 8000e06:	f001 f81b 	bl	8001e40 <HAL_DMA_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000e10:	f7ff ff70 	bl	8000cf4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <HAL_ADC_MspInit+0xf4>)
 8000e18:	639a      	str	r2, [r3, #56]	; 0x38
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_ADC_MspInit+0xf4>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2012      	movs	r0, #18
 8000e26:	f000 ffd4 	bl	8001dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e2a:	2012      	movs	r0, #18
 8000e2c:	f000 ffed 	bl	8001e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e30:	bf00      	nop
 8000e32:	3728      	adds	r7, #40	; 0x28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40012000 	.word	0x40012000
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000
 8000e44:	20000108 	.word	0x20000108
 8000e48:	40026470 	.word	0x40026470

08000e4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a19      	ldr	r2, [pc, #100]	; (8000ed0 <HAL_I2C_MspInit+0x84>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d12c      	bne.n	8000ec8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_I2C_MspInit+0x88>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <HAL_I2C_MspInit+0x88>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_I2C_MspInit+0x88>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e8a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e90:	2312      	movs	r3, #18
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <HAL_I2C_MspInit+0x8c>)
 8000ea8:	f001 fbf8 	bl	800269c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_I2C_MspInit+0x88>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_I2C_MspInit+0x88>)
 8000eb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eba:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <HAL_I2C_MspInit+0x88>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ec8:	bf00      	nop
 8000eca:	3728      	adds	r7, #40	; 0x28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40005400 	.word	0x40005400
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020400 	.word	0x40020400

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f000 f908 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_A_Pin);
 8000f34:	2010      	movs	r0, #16
 8000f36:	f001 fd67 	bl	8002a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <ADC_IRQHandler+0x10>)
 8000f46:	f000 f980 	bl	800124a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200000c0 	.word	0x200000c0

08000f54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_D_Pin);
 8000f58:	2040      	movs	r0, #64	; 0x40
 8000f5a:	f001 fd55 	bl	8002a08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_CTR_Pin);
 8000f5e:	2080      	movs	r0, #128	; 0x80
 8000f60:	f001 fd52 	bl	8002a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_C_Pin);
 8000f6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f70:	f001 fd4a 	bl	8002a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <DMA2_Stream0_IRQHandler+0x10>)
 8000f7e:	f001 f865 	bl	800204c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001bc 	.word	0x200001bc

08000f8c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <DMA2_Stream4_IRQHandler+0x10>)
 8000f92:	f001 f85b 	bl	800204c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000108 	.word	0x20000108

08000fa0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <OTG_FS_IRQHandler+0x10>)
 8000fa6:	f001 ffb1 	bl	8002f0c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000600 	.word	0x20000600

08000fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fbc:	4a14      	ldr	r2, [pc, #80]	; (8001010 <_sbrk+0x5c>)
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <_sbrk+0x60>)
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <_sbrk+0x64>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d102      	bne.n	8000fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <_sbrk+0x64>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <_sbrk+0x68>)
 8000fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d207      	bcs.n	8000ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe4:	f007 fc78 	bl	80088d8 <__errno>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	220c      	movs	r2, #12
 8000fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	e009      	b.n	8001008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <_sbrk+0x64>)
 8001004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20020000 	.word	0x20020000
 8001014:	00000400 	.word	0x00000400
 8001018:	2000021c 	.word	0x2000021c
 800101c:	200009c0 	.word	0x200009c0

08001020 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <SystemInit+0x20>)
 8001026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102a:	4a05      	ldr	r2, [pc, #20]	; (8001040 <SystemInit+0x20>)
 800102c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800107c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800104a:	490e      	ldr	r1, [pc, #56]	; (8001084 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800104c:	4a0e      	ldr	r2, [pc, #56]	; (8001088 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001050:	e002      	b.n	8001058 <LoopCopyDataInit>

08001052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001056:	3304      	adds	r3, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800105c:	d3f9      	bcc.n	8001052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105e:	4a0b      	ldr	r2, [pc, #44]	; (800108c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001060:	4c0b      	ldr	r4, [pc, #44]	; (8001090 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001064:	e001      	b.n	800106a <LoopFillZerobss>

08001066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001068:	3204      	adds	r2, #4

0800106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800106c:	d3fb      	bcc.n	8001066 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800106e:	f7ff ffd7 	bl	8001020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001072:	f007 fd2d 	bl	8008ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001076:	f7ff fb71 	bl	800075c <main>
  bx  lr    
 800107a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800107c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001088:	08009ad4 	.word	0x08009ad4
  ldr r2, =_sbss
 800108c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001090:	200009c0 	.word	0x200009c0

08001094 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <CAN1_RX0_IRQHandler>
	...

08001098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_Init+0x40>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <HAL_Init+0x40>)
 80010a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_Init+0x40>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_Init+0x40>)
 80010ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_Init+0x40>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_Init+0x40>)
 80010ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c0:	2003      	movs	r0, #3
 80010c2:	f000 fe7b 	bl	8001dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 f808 	bl	80010dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010cc:	f7ff fe18 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023c00 	.word	0x40023c00

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_InitTick+0x54>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_InitTick+0x58>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fe93 	bl	8001e26 <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00e      	b.n	8001128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d80a      	bhi.n	8001126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f000 fe5b 	bl	8001dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4a06      	ldr	r2, [pc, #24]	; (8001138 <HAL_InitTick+0x5c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000000 	.word	0x20000000
 8001134:	20000008 	.word	0x20000008
 8001138:	20000004 	.word	0x20000004

0800113c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x20>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x24>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_IncTick+0x24>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000008 	.word	0x20000008
 8001160:	20000220 	.word	0x20000220

08001164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <HAL_GetTick+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000220 	.word	0x20000220

0800117c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001184:	f7ff ffee 	bl	8001164 <HAL_GetTick>
 8001188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001194:	d005      	beq.n	80011a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_Delay+0x44>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011a2:	bf00      	nop
 80011a4:	f7ff ffde 	bl	8001164 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8f7      	bhi.n	80011a4 <HAL_Delay+0x28>
  {
  }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008

080011c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e033      	b.n	8001242 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d109      	bne.n	80011f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff fdb4 	bl	8000d50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d118      	bne.n	8001234 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800120a:	f023 0302 	bic.w	r3, r3, #2
 800120e:	f043 0202 	orr.w	r2, r3, #2
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 fb78 	bl	800190c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f023 0303 	bic.w	r3, r3, #3
 800122a:	f043 0201 	orr.w	r2, r3, #1
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	641a      	str	r2, [r3, #64]	; 0x40
 8001232:	e001      	b.n	8001238 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	f003 0320 	and.w	r3, r3, #32
 8001278:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d049      	beq.n	8001314 <HAL_ADC_IRQHandler+0xca>
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d046      	beq.n	8001314 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 0310 	and.w	r3, r3, #16
 800128e:	2b00      	cmp	r3, #0
 8001290:	d105      	bne.n	800129e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d12b      	bne.n	8001304 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d127      	bne.n	8001304 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d006      	beq.n	80012d0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d119      	bne.n	8001304 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0220 	bic.w	r2, r2, #32
 80012de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d105      	bne.n	8001304 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f043 0201 	orr.w	r2, r3, #1
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fa03 	bl	8000710 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f06f 0212 	mvn.w	r2, #18
 8001312:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001322:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d057      	beq.n	80013da <HAL_ADC_IRQHandler+0x190>
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d054      	beq.n	80013da <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f003 0310 	and.w	r3, r3, #16
 8001338:	2b00      	cmp	r3, #0
 800133a:	d105      	bne.n	8001348 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d139      	bne.n	80013ca <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800136e:	2b00      	cmp	r3, #0
 8001370:	d12b      	bne.n	80013ca <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800137c:	2b00      	cmp	r3, #0
 800137e:	d124      	bne.n	80013ca <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11d      	bne.n	80013ca <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001392:	2b00      	cmp	r3, #0
 8001394:	d119      	bne.n	80013ca <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013a4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d105      	bne.n	80013ca <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f043 0201 	orr.w	r2, r3, #1
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 fc1c 	bl	8001c08 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f06f 020c 	mvn.w	r2, #12
 80013d8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d017      	beq.n	8001420 <HAL_ADC_IRQHandler+0x1d6>
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d014      	beq.n	8001420 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b01      	cmp	r3, #1
 8001402:	d10d      	bne.n	8001420 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f945 	bl	80016a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f06f 0201 	mvn.w	r2, #1
 800141e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0320 	and.w	r3, r3, #32
 8001426:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800142e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d015      	beq.n	8001462 <HAL_ADC_IRQHandler+0x218>
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d012      	beq.n	8001462 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	f043 0202 	orr.w	r2, r3, #2
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f06f 0220 	mvn.w	r2, #32
 8001450:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f92e 	bl	80016b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f06f 0220 	mvn.w	r2, #32
 8001460:	601a      	str	r2, [r3, #0]
  }
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001482:	2b01      	cmp	r3, #1
 8001484:	d101      	bne.n	800148a <HAL_ADC_Start_DMA+0x1e>
 8001486:	2302      	movs	r3, #2
 8001488:	e0e9      	b.n	800165e <HAL_ADC_Start_DMA+0x1f2>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b01      	cmp	r3, #1
 800149e:	d018      	beq.n	80014d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0201 	orr.w	r2, r2, #1
 80014ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014b0:	4b6d      	ldr	r3, [pc, #436]	; (8001668 <HAL_ADC_Start_DMA+0x1fc>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a6d      	ldr	r2, [pc, #436]	; (800166c <HAL_ADC_Start_DMA+0x200>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0c9a      	lsrs	r2, r3, #18
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80014c4:	e002      	b.n	80014cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f9      	bne.n	80014c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014e0:	d107      	bne.n	80014f2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	f040 80a1 	bne.w	8001644 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800150a:	f023 0301 	bic.w	r3, r3, #1
 800150e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800152c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800153c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001540:	d106      	bne.n	8001550 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f023 0206 	bic.w	r2, r3, #6
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
 800154e:	e002      	b.n	8001556 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800155e:	4b44      	ldr	r3, [pc, #272]	; (8001670 <HAL_ADC_Start_DMA+0x204>)
 8001560:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001566:	4a43      	ldr	r2, [pc, #268]	; (8001674 <HAL_ADC_Start_DMA+0x208>)
 8001568:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156e:	4a42      	ldr	r2, [pc, #264]	; (8001678 <HAL_ADC_Start_DMA+0x20c>)
 8001570:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001576:	4a41      	ldr	r2, [pc, #260]	; (800167c <HAL_ADC_Start_DMA+0x210>)
 8001578:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001582:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001592:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	334c      	adds	r3, #76	; 0x4c
 80015ae:	4619      	mov	r1, r3
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f000 fcf2 	bl	8001f9c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 031f 	and.w	r3, r3, #31
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d12a      	bne.n	800161a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a2d      	ldr	r2, [pc, #180]	; (8001680 <HAL_ADC_Start_DMA+0x214>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d015      	beq.n	80015fa <HAL_ADC_Start_DMA+0x18e>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a2c      	ldr	r2, [pc, #176]	; (8001684 <HAL_ADC_Start_DMA+0x218>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d105      	bne.n	80015e4 <HAL_ADC_Start_DMA+0x178>
 80015d8:	4b25      	ldr	r3, [pc, #148]	; (8001670 <HAL_ADC_Start_DMA+0x204>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 031f 	and.w	r3, r3, #31
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00a      	beq.n	80015fa <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a27      	ldr	r2, [pc, #156]	; (8001688 <HAL_ADC_Start_DMA+0x21c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d136      	bne.n	800165c <HAL_ADC_Start_DMA+0x1f0>
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <HAL_ADC_Start_DMA+0x204>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d130      	bne.n	800165c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d129      	bne.n	800165c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	e020      	b.n	800165c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a18      	ldr	r2, [pc, #96]	; (8001680 <HAL_ADC_Start_DMA+0x214>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d11b      	bne.n	800165c <HAL_ADC_Start_DMA+0x1f0>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d114      	bne.n	800165c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	e00b      	b.n	800165c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	f043 0210 	orr.w	r2, r3, #16
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001654:	f043 0201 	orr.w	r2, r3, #1
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000000 	.word	0x20000000
 800166c:	431bde83 	.word	0x431bde83
 8001670:	40012300 	.word	0x40012300
 8001674:	08001b05 	.word	0x08001b05
 8001678:	08001bbf 	.word	0x08001bbf
 800167c:	08001bdb 	.word	0x08001bdb
 8001680:	40012000 	.word	0x40012000
 8001684:	40012100 	.word	0x40012100
 8001688:	40012200 	.word	0x40012200

0800168c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d101      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x1c>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e105      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x228>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b09      	cmp	r3, #9
 80016f2:	d925      	bls.n	8001740 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68d9      	ldr	r1, [r3, #12]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	3b1e      	subs	r3, #30
 800170a:	2207      	movs	r2, #7
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43da      	mvns	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	400a      	ands	r2, r1
 8001718:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68d9      	ldr	r1, [r3, #12]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	b29b      	uxth	r3, r3
 800172a:	4618      	mov	r0, r3
 800172c:	4603      	mov	r3, r0
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4403      	add	r3, r0
 8001732:	3b1e      	subs	r3, #30
 8001734:	409a      	lsls	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	e022      	b.n	8001786 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6919      	ldr	r1, [r3, #16]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	2207      	movs	r2, #7
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	400a      	ands	r2, r1
 8001762:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6919      	ldr	r1, [r3, #16]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	b29b      	uxth	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	4603      	mov	r3, r0
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4403      	add	r3, r0
 800177c:	409a      	lsls	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b06      	cmp	r3, #6
 800178c:	d824      	bhi.n	80017d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	3b05      	subs	r3, #5
 80017a0:	221f      	movs	r2, #31
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	400a      	ands	r2, r1
 80017ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	3b05      	subs	r3, #5
 80017ca:	fa00 f203 	lsl.w	r2, r0, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	635a      	str	r2, [r3, #52]	; 0x34
 80017d6:	e04c      	b.n	8001872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b0c      	cmp	r3, #12
 80017de:	d824      	bhi.n	800182a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	3b23      	subs	r3, #35	; 0x23
 80017f2:	221f      	movs	r2, #31
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43da      	mvns	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	400a      	ands	r2, r1
 8001800:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	3b23      	subs	r3, #35	; 0x23
 800181c:	fa00 f203 	lsl.w	r2, r0, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
 8001828:	e023      	b.n	8001872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	3b41      	subs	r3, #65	; 0x41
 800183c:	221f      	movs	r2, #31
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	400a      	ands	r2, r1
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b29b      	uxth	r3, r3
 8001858:	4618      	mov	r0, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	3b41      	subs	r3, #65	; 0x41
 8001866:	fa00 f203 	lsl.w	r2, r0, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_ADC_ConfigChannel+0x234>)
 8001874:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a21      	ldr	r2, [pc, #132]	; (8001900 <HAL_ADC_ConfigChannel+0x238>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d109      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1cc>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b12      	cmp	r3, #18
 8001886:	d105      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a19      	ldr	r2, [pc, #100]	; (8001900 <HAL_ADC_ConfigChannel+0x238>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d123      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x21e>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b10      	cmp	r3, #16
 80018a4:	d003      	beq.n	80018ae <HAL_ADC_ConfigChannel+0x1e6>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b11      	cmp	r3, #17
 80018ac:	d11b      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b10      	cmp	r3, #16
 80018c0:	d111      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_ADC_ConfigChannel+0x23c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_ADC_ConfigChannel+0x240>)
 80018c8:	fba2 2303 	umull	r2, r3, r2, r3
 80018cc:	0c9a      	lsrs	r2, r3, #18
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018d8:	e002      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	3b01      	subs	r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f9      	bne.n	80018da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40012300 	.word	0x40012300
 8001900:	40012000 	.word	0x40012000
 8001904:	20000000 	.word	0x20000000
 8001908:	431bde83 	.word	0x431bde83

0800190c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001914:	4b79      	ldr	r3, [pc, #484]	; (8001afc <ADC_Init+0x1f0>)
 8001916:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	431a      	orrs	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001940:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6859      	ldr	r1, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	021a      	lsls	r2, r3, #8
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001964:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6859      	ldr	r1, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6899      	ldr	r1, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <ADC_Init+0x1f4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d022      	beq.n	80019ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6899      	ldr	r1, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6899      	ldr	r1, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	e00f      	b.n	8001a0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0202 	bic.w	r2, r2, #2
 8001a18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6899      	ldr	r1, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7e1b      	ldrb	r3, [r3, #24]
 8001a24:	005a      	lsls	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01b      	beq.n	8001a70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6859      	ldr	r1, [r3, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	3b01      	subs	r3, #1
 8001a64:	035a      	lsls	r2, r3, #13
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	e007      	b.n	8001a80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	051a      	lsls	r2, r3, #20
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ab4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6899      	ldr	r1, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ac2:	025a      	lsls	r2, r3, #9
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ada:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6899      	ldr	r1, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	029a      	lsls	r2, r3, #10
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	609a      	str	r2, [r3, #8]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	40012300 	.word	0x40012300
 8001b00:	0f000001 	.word	0x0f000001

08001b04 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b10:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d13c      	bne.n	8001b98 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d12b      	bne.n	8001b90 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d127      	bne.n	8001b90 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d119      	bne.n	8001b90 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0220 	bic.w	r2, r2, #32
 8001b6a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	f043 0201 	orr.w	r2, r3, #1
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f7fe fdbd 	bl	8000710 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b96:	e00e      	b.n	8001bb6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f7ff fd85 	bl	80016b4 <HAL_ADC_ErrorCallback>
}
 8001baa:	e004      	b.n	8001bb6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	4798      	blx	r3
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f7ff fd5d 	bl	800168c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2240      	movs	r2, #64	; 0x40
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	f043 0204 	orr.w	r2, r3, #4
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f7ff fd5a 	bl	80016b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <__NVIC_GetPriorityGrouping+0x18>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	f003 0307 	and.w	r3, r3, #7
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db0b      	blt.n	8001caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	f003 021f 	and.w	r2, r3, #31
 8001c98:	4907      	ldr	r1, [pc, #28]	; (8001cb8 <__NVIC_EnableIRQ+0x38>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000e100 	.word	0xe000e100

08001cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6039      	str	r1, [r7, #0]
 8001cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	db0a      	blt.n	8001ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	490c      	ldr	r1, [pc, #48]	; (8001d08 <__NVIC_SetPriority+0x4c>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	0112      	lsls	r2, r2, #4
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce4:	e00a      	b.n	8001cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4908      	ldr	r1, [pc, #32]	; (8001d0c <__NVIC_SetPriority+0x50>)
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	3b04      	subs	r3, #4
 8001cf4:	0112      	lsls	r2, r2, #4
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	761a      	strb	r2, [r3, #24]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000e100 	.word	0xe000e100
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f1c3 0307 	rsb	r3, r3, #7
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	bf28      	it	cs
 8001d2e:	2304      	movcs	r3, #4
 8001d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3304      	adds	r3, #4
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d902      	bls.n	8001d40 <NVIC_EncodePriority+0x30>
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3b03      	subs	r3, #3
 8001d3e:	e000      	b.n	8001d42 <NVIC_EncodePriority+0x32>
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	401a      	ands	r2, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d62:	43d9      	mvns	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	4313      	orrs	r3, r2
         );
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	; 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d88:	d301      	bcc.n	8001d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00f      	b.n	8001dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <SysTick_Config+0x40>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d96:	210f      	movs	r1, #15
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f7ff ff8e 	bl	8001cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <SysTick_Config+0x40>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da6:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <SysTick_Config+0x40>)
 8001da8:	2207      	movs	r2, #7
 8001daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	e000e010 	.word	0xe000e010

08001dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff ff29 	bl	8001c1c <__NVIC_SetPriorityGrouping>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
 8001dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de4:	f7ff ff3e 	bl	8001c64 <__NVIC_GetPriorityGrouping>
 8001de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	6978      	ldr	r0, [r7, #20]
 8001df0:	f7ff ff8e 	bl	8001d10 <NVIC_EncodePriority>
 8001df4:	4602      	mov	r2, r0
 8001df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff5d 	bl	8001cbc <__NVIC_SetPriority>
}
 8001e02:	bf00      	nop
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff31 	bl	8001c80 <__NVIC_EnableIRQ>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ffa2 	bl	8001d78 <SysTick_Config>
 8001e34:	4603      	mov	r3, r0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e4c:	f7ff f98a 	bl	8001164 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e099      	b.n	8001f90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0201 	bic.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e7c:	e00f      	b.n	8001e9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e7e:	f7ff f971 	bl	8001164 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b05      	cmp	r3, #5
 8001e8a:	d908      	bls.n	8001e9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2203      	movs	r2, #3
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e078      	b.n	8001f90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1e8      	bne.n	8001e7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	4b38      	ldr	r3, [pc, #224]	; (8001f98 <HAL_DMA_Init+0x158>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d107      	bne.n	8001f08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	4313      	orrs	r3, r2
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f023 0307 	bic.w	r3, r3, #7
 8001f1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d117      	bne.n	8001f62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00e      	beq.n	8001f62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 fb2d 	bl	80025a4 <DMA_CheckFifoParam>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2240      	movs	r2, #64	; 0x40
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e016      	b.n	8001f90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fae4 	bl	8002538 <DMA_CalcBaseAndBitshift>
 8001f70:	4603      	mov	r3, r0
 8001f72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f78:	223f      	movs	r2, #63	; 0x3f
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	f010803f 	.word	0xf010803f

08001f9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_DMA_Start_IT+0x26>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e040      	b.n	8002044 <HAL_DMA_Start_IT+0xa8>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d12f      	bne.n	8002036 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 fa76 	bl	80024dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff4:	223f      	movs	r2, #63	; 0x3f
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0216 	orr.w	r2, r2, #22
 800200a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	2b00      	cmp	r3, #0
 8002012:	d007      	beq.n	8002024 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0208 	orr.w	r2, r2, #8
 8002022:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0201 	orr.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	e005      	b.n	8002042 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800203e:	2302      	movs	r3, #2
 8002040:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002042:	7dfb      	ldrb	r3, [r7, #23]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002058:	4b8e      	ldr	r3, [pc, #568]	; (8002294 <HAL_DMA_IRQHandler+0x248>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a8e      	ldr	r2, [pc, #568]	; (8002298 <HAL_DMA_IRQHandler+0x24c>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	0a9b      	lsrs	r3, r3, #10
 8002064:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002076:	2208      	movs	r2, #8
 8002078:	409a      	lsls	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4013      	ands	r3, r2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d01a      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d013      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0204 	bic.w	r2, r2, #4
 800209e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a4:	2208      	movs	r2, #8
 80020a6:	409a      	lsls	r2, r3
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b0:	f043 0201 	orr.w	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	2201      	movs	r2, #1
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d012      	beq.n	80020ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00b      	beq.n	80020ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020da:	2201      	movs	r2, #1
 80020dc:	409a      	lsls	r2, r3
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e6:	f043 0202 	orr.w	r2, r3, #2
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f2:	2204      	movs	r2, #4
 80020f4:	409a      	lsls	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d012      	beq.n	8002124 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00b      	beq.n	8002124 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002110:	2204      	movs	r2, #4
 8002112:	409a      	lsls	r2, r3
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211c:	f043 0204 	orr.w	r2, r3, #4
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	2210      	movs	r2, #16
 800212a:	409a      	lsls	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d043      	beq.n	80021bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d03c      	beq.n	80021bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	2210      	movs	r2, #16
 8002148:	409a      	lsls	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d018      	beq.n	800218e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d108      	bne.n	800217c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d024      	beq.n	80021bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	4798      	blx	r3
 800217a:	e01f      	b.n	80021bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01b      	beq.n	80021bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	4798      	blx	r3
 800218c:	e016      	b.n	80021bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d107      	bne.n	80021ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0208 	bic.w	r2, r2, #8
 80021aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c0:	2220      	movs	r2, #32
 80021c2:	409a      	lsls	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 808f 	beq.w	80022ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 8087 	beq.w	80022ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e2:	2220      	movs	r2, #32
 80021e4:	409a      	lsls	r2, r3
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b05      	cmp	r3, #5
 80021f4:	d136      	bne.n	8002264 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0216 	bic.w	r2, r2, #22
 8002204:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002214:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	2b00      	cmp	r3, #0
 800221c:	d103      	bne.n	8002226 <HAL_DMA_IRQHandler+0x1da>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002222:	2b00      	cmp	r3, #0
 8002224:	d007      	beq.n	8002236 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0208 	bic.w	r2, r2, #8
 8002234:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223a:	223f      	movs	r2, #63	; 0x3f
 800223c:	409a      	lsls	r2, r3
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002256:	2b00      	cmp	r3, #0
 8002258:	d07e      	beq.n	8002358 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
        }
        return;
 8002262:	e079      	b.n	8002358 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d01d      	beq.n	80022ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10d      	bne.n	800229c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002284:	2b00      	cmp	r3, #0
 8002286:	d031      	beq.n	80022ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	4798      	blx	r3
 8002290:	e02c      	b.n	80022ec <HAL_DMA_IRQHandler+0x2a0>
 8002292:	bf00      	nop
 8002294:	20000000 	.word	0x20000000
 8002298:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d023      	beq.n	80022ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
 80022ac:	e01e      	b.n	80022ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10f      	bne.n	80022dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0210 	bic.w	r2, r2, #16
 80022ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d032      	beq.n	800235a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d022      	beq.n	8002346 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2205      	movs	r2, #5
 8002304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0201 	bic.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	3301      	adds	r3, #1
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	429a      	cmp	r2, r3
 8002322:	d307      	bcc.n	8002334 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f2      	bne.n	8002318 <HAL_DMA_IRQHandler+0x2cc>
 8002332:	e000      	b.n	8002336 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002334:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	4798      	blx	r3
 8002356:	e000      	b.n	800235a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002358:	bf00      	nop
    }
  }
}
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	460b      	mov	r3, r1
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_DMA_RegisterCallback+0x20>
 800237c:	2302      	movs	r3, #2
 800237e:	e03d      	b.n	80023fc <HAL_DMA_RegisterCallback+0x9c>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d12c      	bne.n	80023ee <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8002394:	7afb      	ldrb	r3, [r7, #11]
 8002396:	2b05      	cmp	r3, #5
 8002398:	d826      	bhi.n	80023e8 <HAL_DMA_RegisterCallback+0x88>
 800239a:	a201      	add	r2, pc, #4	; (adr r2, 80023a0 <HAL_DMA_RegisterCallback+0x40>)
 800239c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a0:	080023b9 	.word	0x080023b9
 80023a4:	080023c1 	.word	0x080023c1
 80023a8:	080023c9 	.word	0x080023c9
 80023ac:	080023d1 	.word	0x080023d1
 80023b0:	080023d9 	.word	0x080023d9
 80023b4:	080023e1 	.word	0x080023e1
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80023be:	e018      	b.n	80023f2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80023c6:	e014      	b.n	80023f2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80023ce:	e010      	b.n	80023f2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80023d6:	e00c      	b.n	80023f2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80023de:	e008      	b.n	80023f2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80023e6:	e004      	b.n	80023f2 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	75fb      	strb	r3, [r7, #23]
      break;
 80023ec:	e001      	b.n	80023f2 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_DMA_UnRegisterCallback+0x1e>
 8002422:	2302      	movs	r3, #2
 8002424:	e053      	b.n	80024ce <HAL_DMA_UnRegisterCallback+0xc6>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d142      	bne.n	80024c0 <HAL_DMA_UnRegisterCallback+0xb8>
  {
    switch (CallbackID)
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	2b06      	cmp	r3, #6
 800243e:	d83c      	bhi.n	80024ba <HAL_DMA_UnRegisterCallback+0xb2>
 8002440:	a201      	add	r2, pc, #4	; (adr r2, 8002448 <HAL_DMA_UnRegisterCallback+0x40>)
 8002442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002446:	bf00      	nop
 8002448:	08002465 	.word	0x08002465
 800244c:	0800246d 	.word	0x0800246d
 8002450:	08002475 	.word	0x08002475
 8002454:	0800247d 	.word	0x0800247d
 8002458:	08002485 	.word	0x08002485
 800245c:	0800248d 	.word	0x0800248d
 8002460:	08002495 	.word	0x08002495
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800246a:	e02b      	b.n	80024c4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002472:	e027      	b.n	80024c4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 800247a:	e023      	b.n	80024c4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8002482:	e01f      	b.n	80024c4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 800248a:	e01b      	b.n	80024c4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8002492:	e017      	b.n	80024c4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 80024b8:	e004      	b.n	80024c4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    default:
      status = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	73fb      	strb	r3, [r7, #15]
      break;
 80024be:	e001      	b.n	80024c4 <HAL_DMA_UnRegisterCallback+0xbc>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop

080024dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b40      	cmp	r3, #64	; 0x40
 8002508:	d108      	bne.n	800251c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800251a:	e007      	b.n	800252c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	60da      	str	r2, [r3, #12]
}
 800252c:	bf00      	nop
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	3b10      	subs	r3, #16
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <DMA_CalcBaseAndBitshift+0x64>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002552:	4a13      	ldr	r2, [pc, #76]	; (80025a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4413      	add	r3, r2
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b03      	cmp	r3, #3
 8002564:	d909      	bls.n	800257a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800256e:	f023 0303 	bic.w	r3, r3, #3
 8002572:	1d1a      	adds	r2, r3, #4
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	659a      	str	r2, [r3, #88]	; 0x58
 8002578:	e007      	b.n	800258a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002582:	f023 0303 	bic.w	r3, r3, #3
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	aaaaaaab 	.word	0xaaaaaaab
 80025a0:	08009a08 	.word	0x08009a08

080025a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d11f      	bne.n	80025fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d856      	bhi.n	8002672 <DMA_CheckFifoParam+0xce>
 80025c4:	a201      	add	r2, pc, #4	; (adr r2, 80025cc <DMA_CheckFifoParam+0x28>)
 80025c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ca:	bf00      	nop
 80025cc:	080025dd 	.word	0x080025dd
 80025d0:	080025ef 	.word	0x080025ef
 80025d4:	080025dd 	.word	0x080025dd
 80025d8:	08002673 	.word	0x08002673
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d046      	beq.n	8002676 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ec:	e043      	b.n	8002676 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025f6:	d140      	bne.n	800267a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025fc:	e03d      	b.n	800267a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002606:	d121      	bne.n	800264c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b03      	cmp	r3, #3
 800260c:	d837      	bhi.n	800267e <DMA_CheckFifoParam+0xda>
 800260e:	a201      	add	r2, pc, #4	; (adr r2, 8002614 <DMA_CheckFifoParam+0x70>)
 8002610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002614:	08002625 	.word	0x08002625
 8002618:	0800262b 	.word	0x0800262b
 800261c:	08002625 	.word	0x08002625
 8002620:	0800263d 	.word	0x0800263d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      break;
 8002628:	e030      	b.n	800268c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d025      	beq.n	8002682 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800263a:	e022      	b.n	8002682 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002644:	d11f      	bne.n	8002686 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800264a:	e01c      	b.n	8002686 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d903      	bls.n	800265a <DMA_CheckFifoParam+0xb6>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d003      	beq.n	8002660 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002658:	e018      	b.n	800268c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
      break;
 800265e:	e015      	b.n	800268c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00e      	beq.n	800268a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
      break;
 8002670:	e00b      	b.n	800268a <DMA_CheckFifoParam+0xe6>
      break;
 8002672:	bf00      	nop
 8002674:	e00a      	b.n	800268c <DMA_CheckFifoParam+0xe8>
      break;
 8002676:	bf00      	nop
 8002678:	e008      	b.n	800268c <DMA_CheckFifoParam+0xe8>
      break;
 800267a:	bf00      	nop
 800267c:	e006      	b.n	800268c <DMA_CheckFifoParam+0xe8>
      break;
 800267e:	bf00      	nop
 8002680:	e004      	b.n	800268c <DMA_CheckFifoParam+0xe8>
      break;
 8002682:	bf00      	nop
 8002684:	e002      	b.n	800268c <DMA_CheckFifoParam+0xe8>
      break;   
 8002686:	bf00      	nop
 8002688:	e000      	b.n	800268c <DMA_CheckFifoParam+0xe8>
      break;
 800268a:	bf00      	nop
    }
  } 
  
  return status; 
 800268c:	7bfb      	ldrb	r3, [r7, #15]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop

0800269c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	; 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	e16b      	b.n	8002990 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026b8:	2201      	movs	r2, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	f040 815a 	bne.w	800298a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d005      	beq.n	80026ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d130      	bne.n	8002750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	2203      	movs	r2, #3
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002724:	2201      	movs	r2, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 0201 	and.w	r2, r3, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b03      	cmp	r3, #3
 800275a:	d017      	beq.n	800278c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d123      	bne.n	80027e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	08da      	lsrs	r2, r3, #3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3208      	adds	r2, #8
 80027a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	220f      	movs	r2, #15
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	08da      	lsrs	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3208      	adds	r2, #8
 80027da:	69b9      	ldr	r1, [r7, #24]
 80027dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0203 	and.w	r2, r3, #3
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80b4 	beq.w	800298a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	4b60      	ldr	r3, [pc, #384]	; (80029a8 <HAL_GPIO_Init+0x30c>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	4a5f      	ldr	r2, [pc, #380]	; (80029a8 <HAL_GPIO_Init+0x30c>)
 800282c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002830:	6453      	str	r3, [r2, #68]	; 0x44
 8002832:	4b5d      	ldr	r3, [pc, #372]	; (80029a8 <HAL_GPIO_Init+0x30c>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800283e:	4a5b      	ldr	r2, [pc, #364]	; (80029ac <HAL_GPIO_Init+0x310>)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	3302      	adds	r3, #2
 8002846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	220f      	movs	r2, #15
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a52      	ldr	r2, [pc, #328]	; (80029b0 <HAL_GPIO_Init+0x314>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d02b      	beq.n	80028c2 <HAL_GPIO_Init+0x226>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a51      	ldr	r2, [pc, #324]	; (80029b4 <HAL_GPIO_Init+0x318>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d025      	beq.n	80028be <HAL_GPIO_Init+0x222>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a50      	ldr	r2, [pc, #320]	; (80029b8 <HAL_GPIO_Init+0x31c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d01f      	beq.n	80028ba <HAL_GPIO_Init+0x21e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4f      	ldr	r2, [pc, #316]	; (80029bc <HAL_GPIO_Init+0x320>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d019      	beq.n	80028b6 <HAL_GPIO_Init+0x21a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4e      	ldr	r2, [pc, #312]	; (80029c0 <HAL_GPIO_Init+0x324>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_GPIO_Init+0x216>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4d      	ldr	r2, [pc, #308]	; (80029c4 <HAL_GPIO_Init+0x328>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00d      	beq.n	80028ae <HAL_GPIO_Init+0x212>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4c      	ldr	r2, [pc, #304]	; (80029c8 <HAL_GPIO_Init+0x32c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <HAL_GPIO_Init+0x20e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4b      	ldr	r2, [pc, #300]	; (80029cc <HAL_GPIO_Init+0x330>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_GPIO_Init+0x20a>
 80028a2:	2307      	movs	r3, #7
 80028a4:	e00e      	b.n	80028c4 <HAL_GPIO_Init+0x228>
 80028a6:	2308      	movs	r3, #8
 80028a8:	e00c      	b.n	80028c4 <HAL_GPIO_Init+0x228>
 80028aa:	2306      	movs	r3, #6
 80028ac:	e00a      	b.n	80028c4 <HAL_GPIO_Init+0x228>
 80028ae:	2305      	movs	r3, #5
 80028b0:	e008      	b.n	80028c4 <HAL_GPIO_Init+0x228>
 80028b2:	2304      	movs	r3, #4
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x228>
 80028b6:	2303      	movs	r3, #3
 80028b8:	e004      	b.n	80028c4 <HAL_GPIO_Init+0x228>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e002      	b.n	80028c4 <HAL_GPIO_Init+0x228>
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <HAL_GPIO_Init+0x228>
 80028c2:	2300      	movs	r3, #0
 80028c4:	69fa      	ldr	r2, [r7, #28]
 80028c6:	f002 0203 	and.w	r2, r2, #3
 80028ca:	0092      	lsls	r2, r2, #2
 80028cc:	4093      	lsls	r3, r2
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028d4:	4935      	ldr	r1, [pc, #212]	; (80029ac <HAL_GPIO_Init+0x310>)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	3302      	adds	r3, #2
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028e2:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <HAL_GPIO_Init+0x334>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002906:	4a32      	ldr	r2, [pc, #200]	; (80029d0 <HAL_GPIO_Init+0x334>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800290c:	4b30      	ldr	r3, [pc, #192]	; (80029d0 <HAL_GPIO_Init+0x334>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002930:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <HAL_GPIO_Init+0x334>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002936:	4b26      	ldr	r3, [pc, #152]	; (80029d0 <HAL_GPIO_Init+0x334>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800295a:	4a1d      	ldr	r2, [pc, #116]	; (80029d0 <HAL_GPIO_Init+0x334>)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002960:	4b1b      	ldr	r3, [pc, #108]	; (80029d0 <HAL_GPIO_Init+0x334>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002984:	4a12      	ldr	r2, [pc, #72]	; (80029d0 <HAL_GPIO_Init+0x334>)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3301      	adds	r3, #1
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2b0f      	cmp	r3, #15
 8002994:	f67f ae90 	bls.w	80026b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40013800 	.word	0x40013800
 80029b0:	40020000 	.word	0x40020000
 80029b4:	40020400 	.word	0x40020400
 80029b8:	40020800 	.word	0x40020800
 80029bc:	40020c00 	.word	0x40020c00
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40021400 	.word	0x40021400
 80029c8:	40021800 	.word	0x40021800
 80029cc:	40021c00 	.word	0x40021c00
 80029d0:	40013c00 	.word	0x40013c00

080029d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	807b      	strh	r3, [r7, #2]
 80029e0:	4613      	mov	r3, r2
 80029e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029e4:	787b      	ldrb	r3, [r7, #1]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ea:	887a      	ldrh	r2, [r7, #2]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029f0:	e003      	b.n	80029fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029f2:	887b      	ldrh	r3, [r7, #2]
 80029f4:	041a      	lsls	r2, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	619a      	str	r2, [r3, #24]
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d006      	beq.n	8002a2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a1e:	4a05      	ldr	r2, [pc, #20]	; (8002a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd fdc2 	bl	80005b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40013c00 	.word	0x40013c00

08002a38 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a3a:	b08f      	sub	sp, #60	; 0x3c
 8002a3c:	af0a      	add	r7, sp, #40	; 0x28
 8002a3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e054      	b.n	8002af4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d106      	bne.n	8002a6a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f005 f9eb 	bl	8007e40 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d102      	bne.n	8002a84 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f002 fa19 	bl	8004ec0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	687e      	ldr	r6, [r7, #4]
 8002a96:	466d      	mov	r5, sp
 8002a98:	f106 0410 	add.w	r4, r6, #16
 8002a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aa4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aa8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002aac:	1d33      	adds	r3, r6, #4
 8002aae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ab0:	6838      	ldr	r0, [r7, #0]
 8002ab2:	f002 f993 	bl	8004ddc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2101      	movs	r1, #1
 8002abc:	4618      	mov	r0, r3
 8002abe:	f002 fa10 	bl	8004ee2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	687e      	ldr	r6, [r7, #4]
 8002aca:	466d      	mov	r5, sp
 8002acc:	f106 0410 	add.w	r4, r6, #16
 8002ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002adc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ae0:	1d33      	adds	r3, r6, #4
 8002ae2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ae4:	6838      	ldr	r0, [r7, #0]
 8002ae6:	f002 fb99 	bl	800521c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002afc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002afc:	b590      	push	{r4, r7, lr}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af04      	add	r7, sp, #16
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	4608      	mov	r0, r1
 8002b06:	4611      	mov	r1, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	70fb      	strb	r3, [r7, #3]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	70bb      	strb	r3, [r7, #2]
 8002b12:	4613      	mov	r3, r2
 8002b14:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_HCD_HC_Init+0x28>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e076      	b.n	8002c12 <HAL_HCD_HC_Init+0x116>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	212c      	movs	r1, #44	; 0x2c
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	333d      	adds	r3, #61	; 0x3d
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	3338      	adds	r3, #56	; 0x38
 8002b4c:	787a      	ldrb	r2, [r7, #1]
 8002b4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3340      	adds	r3, #64	; 0x40
 8002b5e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b60:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3339      	adds	r3, #57	; 0x39
 8002b70:	78fa      	ldrb	r2, [r7, #3]
 8002b72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	212c      	movs	r1, #44	; 0x2c
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	333f      	adds	r3, #63	; 0x3f
 8002b82:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002b86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	78ba      	ldrb	r2, [r7, #2]
 8002b8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b90:	b2d0      	uxtb	r0, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	333a      	adds	r3, #58	; 0x3a
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002ba2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	da09      	bge.n	8002bbe <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	333b      	adds	r3, #59	; 0x3b
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	e008      	b.n	8002bd0 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	333b      	adds	r3, #59	; 0x3b
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	333c      	adds	r3, #60	; 0x3c
 8002bde:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002be2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	787c      	ldrb	r4, [r7, #1]
 8002bea:	78ba      	ldrb	r2, [r7, #2]
 8002bec:	78f9      	ldrb	r1, [r7, #3]
 8002bee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002bf0:	9302      	str	r3, [sp, #8]
 8002bf2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002bf6:	9301      	str	r3, [sp, #4]
 8002bf8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	4623      	mov	r3, r4
 8002c00:	f002 fc92 	bl	8005528 <USB_HC_Init>
 8002c04:	4603      	mov	r3, r0
 8002c06:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd90      	pop	{r4, r7, pc}

08002c1a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	460b      	mov	r3, r1
 8002c24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_HCD_HC_Halt+0x1e>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e00f      	b.n	8002c58 <HAL_HCD_HC_Halt+0x3e>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	78fa      	ldrb	r2, [r7, #3]
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f002 fee2 	bl	8005a12 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	4608      	mov	r0, r1
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	70fb      	strb	r3, [r7, #3]
 8002c72:	460b      	mov	r3, r1
 8002c74:	70bb      	strb	r3, [r7, #2]
 8002c76:	4613      	mov	r3, r2
 8002c78:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	212c      	movs	r1, #44	; 0x2c
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	333b      	adds	r3, #59	; 0x3b
 8002c88:	78ba      	ldrb	r2, [r7, #2]
 8002c8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	333f      	adds	r3, #63	; 0x3f
 8002c9a:	787a      	ldrb	r2, [r7, #1]
 8002c9c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002c9e:	7c3b      	ldrb	r3, [r7, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d112      	bne.n	8002cca <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3342      	adds	r3, #66	; 0x42
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	212c      	movs	r1, #44	; 0x2c
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	333d      	adds	r3, #61	; 0x3d
 8002cc4:	7f3a      	ldrb	r2, [r7, #28]
 8002cc6:	701a      	strb	r2, [r3, #0]
 8002cc8:	e008      	b.n	8002cdc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3342      	adds	r3, #66	; 0x42
 8002cd8:	2202      	movs	r2, #2
 8002cda:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002cdc:	787b      	ldrb	r3, [r7, #1]
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	f200 80c6 	bhi.w	8002e70 <HAL_HCD_HC_SubmitRequest+0x210>
 8002ce4:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cea:	bf00      	nop
 8002cec:	08002cfd 	.word	0x08002cfd
 8002cf0:	08002e5d 	.word	0x08002e5d
 8002cf4:	08002d61 	.word	0x08002d61
 8002cf8:	08002ddf 	.word	0x08002ddf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002cfc:	7c3b      	ldrb	r3, [r7, #16]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	f040 80b8 	bne.w	8002e74 <HAL_HCD_HC_SubmitRequest+0x214>
 8002d04:	78bb      	ldrb	r3, [r7, #2]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 80b4 	bne.w	8002e74 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002d0c:	8b3b      	ldrh	r3, [r7, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d108      	bne.n	8002d24 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002d12:	78fb      	ldrb	r3, [r7, #3]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	212c      	movs	r1, #44	; 0x2c
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3355      	adds	r3, #85	; 0x55
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3355      	adds	r3, #85	; 0x55
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d109      	bne.n	8002d4c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3342      	adds	r3, #66	; 0x42
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d4a:	e093      	b.n	8002e74 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3342      	adds	r3, #66	; 0x42
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	701a      	strb	r2, [r3, #0]
      break;
 8002d5e:	e089      	b.n	8002e74 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002d60:	78bb      	ldrb	r3, [r7, #2]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d11d      	bne.n	8002da2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	212c      	movs	r1, #44	; 0x2c
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	3355      	adds	r3, #85	; 0x55
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	212c      	movs	r1, #44	; 0x2c
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	3342      	adds	r3, #66	; 0x42
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002d8c:	e073      	b.n	8002e76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	212c      	movs	r1, #44	; 0x2c
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	3342      	adds	r3, #66	; 0x42
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	701a      	strb	r2, [r3, #0]
      break;
 8002da0:	e069      	b.n	8002e76 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	3354      	adds	r3, #84	; 0x54
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	212c      	movs	r1, #44	; 0x2c
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3342      	adds	r3, #66	; 0x42
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
      break;
 8002dc8:	e055      	b.n	8002e76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dca:	78fb      	ldrb	r3, [r7, #3]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3342      	adds	r3, #66	; 0x42
 8002dd8:	2202      	movs	r2, #2
 8002dda:	701a      	strb	r2, [r3, #0]
      break;
 8002ddc:	e04b      	b.n	8002e76 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002dde:	78bb      	ldrb	r3, [r7, #2]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d11d      	bne.n	8002e20 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	3355      	adds	r3, #85	; 0x55
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d109      	bne.n	8002e0c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3342      	adds	r3, #66	; 0x42
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002e0a:	e034      	b.n	8002e76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3342      	adds	r3, #66	; 0x42
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	701a      	strb	r2, [r3, #0]
      break;
 8002e1e:	e02a      	b.n	8002e76 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	212c      	movs	r1, #44	; 0x2c
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3354      	adds	r3, #84	; 0x54
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d109      	bne.n	8002e48 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	212c      	movs	r1, #44	; 0x2c
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3342      	adds	r3, #66	; 0x42
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]
      break;
 8002e46:	e016      	b.n	8002e76 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	212c      	movs	r1, #44	; 0x2c
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	4413      	add	r3, r2
 8002e54:	3342      	adds	r3, #66	; 0x42
 8002e56:	2202      	movs	r2, #2
 8002e58:	701a      	strb	r2, [r3, #0]
      break;
 8002e5a:	e00c      	b.n	8002e76 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	3342      	adds	r3, #66	; 0x42
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
      break;
 8002e6e:	e002      	b.n	8002e76 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002e70:	bf00      	nop
 8002e72:	e000      	b.n	8002e76 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002e74:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	212c      	movs	r1, #44	; 0x2c
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	4413      	add	r3, r2
 8002e82:	3344      	adds	r3, #68	; 0x44
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	8b3a      	ldrh	r2, [r7, #24]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	202c      	movs	r0, #44	; 0x2c
 8002e90:	fb00 f303 	mul.w	r3, r0, r3
 8002e94:	440b      	add	r3, r1
 8002e96:	334c      	adds	r3, #76	; 0x4c
 8002e98:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3360      	adds	r3, #96	; 0x60
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3350      	adds	r3, #80	; 0x50
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	3339      	adds	r3, #57	; 0x39
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3361      	adds	r3, #97	; 0x61
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	78fb      	ldrb	r3, [r7, #3]
 8002ee8:	222c      	movs	r2, #44	; 0x2c
 8002eea:	fb02 f303 	mul.w	r3, r2, r3
 8002eee:	3338      	adds	r3, #56	; 0x38
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	18d1      	adds	r1, r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	f002 fc36 	bl	800576c <USB_HC_StartXfer>
 8002f00:	4603      	mov	r3, r0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop

08002f0c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f002 f937 	bl	8005196 <USB_GetMode>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	f040 80f6 	bne.w	800311c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f002 f91b 	bl	8005170 <USB_ReadInterrupts>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80ec 	beq.w	800311a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f002 f912 	bl	8005170 <USB_ReadInterrupts>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f56:	d104      	bne.n	8002f62 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f002 f902 	bl	8005170 <USB_ReadInterrupts>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f76:	d104      	bne.n	8002f82 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f002 f8f2 	bl	8005170 <USB_ReadInterrupts>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f96:	d104      	bne.n	8002fa2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f002 f8e2 	bl	8005170 <USB_ReadInterrupts>
 8002fac:	4603      	mov	r3, r0
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d103      	bne.n	8002fbe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f002 f8d4 	bl	8005170 <USB_ReadInterrupts>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fd2:	d11c      	bne.n	800300e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002fdc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10f      	bne.n	800300e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002fee:	2110      	movs	r1, #16
 8002ff0:	6938      	ldr	r0, [r7, #16]
 8002ff2:	f001 ffc3 	bl	8004f7c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002ff6:	6938      	ldr	r0, [r7, #16]
 8002ff8:	f001 fff4 	bl	8004fe4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2101      	movs	r1, #1
 8003002:	4618      	mov	r0, r3
 8003004:	f002 f9ca 	bl	800539c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f004 ff97 	bl	8007f3c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f002 f8ac 	bl	8005170 <USB_ReadInterrupts>
 8003018:	4603      	mov	r3, r0
 800301a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800301e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003022:	d102      	bne.n	800302a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f001 f89e 	bl	8004166 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f002 f89e 	bl	8005170 <USB_ReadInterrupts>
 8003034:	4603      	mov	r3, r0
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b08      	cmp	r3, #8
 800303c:	d106      	bne.n	800304c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f004 ff60 	bl	8007f04 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2208      	movs	r2, #8
 800304a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f002 f88d 	bl	8005170 <USB_ReadInterrupts>
 8003056:	4603      	mov	r3, r0
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b10      	cmp	r3, #16
 800305e:	d101      	bne.n	8003064 <HAL_HCD_IRQHandler+0x158>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <HAL_HCD_IRQHandler+0x15a>
 8003064:	2300      	movs	r3, #0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d012      	beq.n	8003090 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699a      	ldr	r2, [r3, #24]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0210 	bic.w	r2, r2, #16
 8003078:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 ffa1 	bl	8003fc2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0210 	orr.w	r2, r2, #16
 800308e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f002 f86b 	bl	8005170 <USB_ReadInterrupts>
 800309a:	4603      	mov	r3, r0
 800309c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030a4:	d13a      	bne.n	800311c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f002 fca0 	bl	80059f0 <USB_HC_ReadInterrupt>
 80030b0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	e025      	b.n	8003104 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d018      	beq.n	80030fe <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e2:	d106      	bne.n	80030f2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	4619      	mov	r1, r3
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f8ab 	bl	8003246 <HCD_HC_IN_IRQHandler>
 80030f0:	e005      	b.n	80030fe <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	4619      	mov	r1, r3
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fbf9 	bl	80038f0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	3301      	adds	r3, #1
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	429a      	cmp	r2, r3
 800310c:	d3d4      	bcc.n	80030b8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003116:	615a      	str	r2, [r3, #20]
 8003118:	e000      	b.n	800311c <HAL_HCD_IRQHandler+0x210>
      return;
 800311a:	bf00      	nop
    }
  }
}
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_HCD_Start+0x16>
 8003134:	2302      	movs	r3, #2
 8003136:	e013      	b.n	8003160 <HAL_HCD_Start+0x3e>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2101      	movs	r1, #1
 8003146:	4618      	mov	r0, r3
 8003148:	f002 f98c 	bl	8005464 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f001 fea4 	bl	8004e9e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_HCD_Stop+0x16>
 800317a:	2302      	movs	r3, #2
 800317c:	e00d      	b.n	800319a <HAL_HCD_Stop+0x32>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f002 fd7a 	bl	8005c84 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f002 f92e 	bl	8005410 <USB_ResetPort>
 80031b4:	4603      	mov	r3, r0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	460b      	mov	r3, r1
 80031c8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	212c      	movs	r1, #44	; 0x2c
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	3360      	adds	r3, #96	; 0x60
 80031d8:	781b      	ldrb	r3, [r3, #0]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	460b      	mov	r3, r1
 80031f0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	3350      	adds	r3, #80	; 0x50
 8003200:	681b      	ldr	r3, [r3, #0]
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f002 f972 	bl	8005504 <USB_GetCurrentFrame>
 8003220:	4603      	mov	r3, r0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f002 f94d 	bl	80054d6 <USB_GetHostSpeed>
 800323c:	4603      	mov	r3, r0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b086      	sub	sp, #24
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	460b      	mov	r3, r1
 8003250:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4413      	add	r3, r2
 8003268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b04      	cmp	r3, #4
 8003274:	d11a      	bne.n	80032ac <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4413      	add	r3, r2
 800327e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003282:	461a      	mov	r2, r3
 8003284:	2304      	movs	r3, #4
 8003286:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	212c      	movs	r1, #44	; 0x2c
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	4413      	add	r3, r2
 8003294:	3361      	adds	r3, #97	; 0x61
 8003296:	2206      	movs	r2, #6
 8003298:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f002 fbb4 	bl	8005a12 <USB_HC_Halt>
 80032aa:	e0af      	b.n	800340c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c2:	d11b      	bne.n	80032fc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d0:	461a      	mov	r2, r3
 80032d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3361      	adds	r3, #97	; 0x61
 80032e6:	2207      	movs	r2, #7
 80032e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f002 fb8c 	bl	8005a12 <USB_HC_Halt>
 80032fa:	e087      	b.n	800340c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4413      	add	r3, r2
 8003304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b20      	cmp	r3, #32
 8003310:	d109      	bne.n	8003326 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331e:	461a      	mov	r2, r3
 8003320:	2320      	movs	r3, #32
 8003322:	6093      	str	r3, [r2, #8]
 8003324:	e072      	b.n	800340c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4413      	add	r3, r2
 800332e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b08      	cmp	r3, #8
 800333a:	d11a      	bne.n	8003372 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4413      	add	r3, r2
 8003344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003348:	461a      	mov	r2, r3
 800334a:	2308      	movs	r3, #8
 800334c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	3361      	adds	r3, #97	; 0x61
 800335c:	2205      	movs	r2, #5
 800335e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	4611      	mov	r1, r2
 800336a:	4618      	mov	r0, r3
 800336c:	f002 fb51 	bl	8005a12 <USB_HC_Halt>
 8003370:	e04c      	b.n	800340c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4413      	add	r3, r2
 800337a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003388:	d11b      	bne.n	80033c2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003396:	461a      	mov	r2, r3
 8003398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800339c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	212c      	movs	r1, #44	; 0x2c
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	3361      	adds	r3, #97	; 0x61
 80033ac:	2208      	movs	r2, #8
 80033ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	4611      	mov	r1, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f002 fb29 	bl	8005a12 <USB_HC_Halt>
 80033c0:	e024      	b.n	800340c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d4:	2b80      	cmp	r3, #128	; 0x80
 80033d6:	d119      	bne.n	800340c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e4:	461a      	mov	r2, r3
 80033e6:	2380      	movs	r3, #128	; 0x80
 80033e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	212c      	movs	r1, #44	; 0x2c
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	4413      	add	r3, r2
 80033f6:	3361      	adds	r3, #97	; 0x61
 80033f8:	2206      	movs	r2, #6
 80033fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	4611      	mov	r1, r2
 8003406:	4618      	mov	r0, r3
 8003408:	f002 fb03 	bl	8005a12 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4413      	add	r3, r2
 8003414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800341e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003422:	d112      	bne.n	800344a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	4611      	mov	r1, r2
 800342e:	4618      	mov	r0, r3
 8003430:	f002 faef 	bl	8005a12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4413      	add	r3, r2
 800343c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003440:	461a      	mov	r2, r3
 8003442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003446:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003448:	e24e      	b.n	80038e8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4413      	add	r3, r2
 8003452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b01      	cmp	r3, #1
 800345e:	f040 80df 	bne.w	8003620 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d019      	beq.n	800349e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	212c      	movs	r1, #44	; 0x2c
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	4413      	add	r3, r2
 8003476:	3348      	adds	r3, #72	; 0x48
 8003478:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	0159      	lsls	r1, r3, #5
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	440b      	add	r3, r1
 8003482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800348c:	1ad2      	subs	r2, r2, r3
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	202c      	movs	r0, #44	; 0x2c
 8003494:	fb00 f303 	mul.w	r3, r0, r3
 8003498:	440b      	add	r3, r1
 800349a:	3350      	adds	r3, #80	; 0x50
 800349c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	3361      	adds	r3, #97	; 0x61
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	212c      	movs	r1, #44	; 0x2c
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	4413      	add	r3, r2
 80034bc:	335c      	adds	r3, #92	; 0x5c
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ce:	461a      	mov	r2, r3
 80034d0:	2301      	movs	r3, #1
 80034d2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	212c      	movs	r1, #44	; 0x2c
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	4413      	add	r3, r2
 80034e0:	333f      	adds	r3, #63	; 0x3f
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	333f      	adds	r3, #63	; 0x3f
 80034f6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d111      	bne.n	8003520 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	4611      	mov	r1, r2
 8003506:	4618      	mov	r0, r3
 8003508:	f002 fa83 	bl	8005a12 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4413      	add	r3, r2
 8003514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003518:	461a      	mov	r2, r3
 800351a:	2310      	movs	r3, #16
 800351c:	6093      	str	r3, [r2, #8]
 800351e:	e03a      	b.n	8003596 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	212c      	movs	r1, #44	; 0x2c
 8003526:	fb01 f303 	mul.w	r3, r1, r3
 800352a:	4413      	add	r3, r2
 800352c:	333f      	adds	r3, #63	; 0x3f
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b03      	cmp	r3, #3
 8003532:	d009      	beq.n	8003548 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	212c      	movs	r1, #44	; 0x2c
 800353a:	fb01 f303 	mul.w	r3, r1, r3
 800353e:	4413      	add	r3, r2
 8003540:	333f      	adds	r3, #63	; 0x3f
 8003542:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003544:	2b01      	cmp	r3, #1
 8003546:	d126      	bne.n	8003596 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4413      	add	r3, r2
 8003550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	0151      	lsls	r1, r2, #5
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	440a      	add	r2, r1
 800355e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003562:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003566:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	212c      	movs	r1, #44	; 0x2c
 800356e:	fb01 f303 	mul.w	r3, r1, r3
 8003572:	4413      	add	r3, r2
 8003574:	3360      	adds	r3, #96	; 0x60
 8003576:	2201      	movs	r2, #1
 8003578:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	b2d9      	uxtb	r1, r3
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	202c      	movs	r0, #44	; 0x2c
 8003584:	fb00 f303 	mul.w	r3, r0, r3
 8003588:	4413      	add	r3, r2
 800358a:	3360      	adds	r3, #96	; 0x60
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f004 fce1 	bl	8007f58 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d12b      	bne.n	80035f6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	212c      	movs	r1, #44	; 0x2c
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	4413      	add	r3, r2
 80035aa:	3348      	adds	r3, #72	; 0x48
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	202c      	movs	r0, #44	; 0x2c
 80035b4:	fb00 f202 	mul.w	r2, r0, r2
 80035b8:	440a      	add	r2, r1
 80035ba:	3240      	adds	r2, #64	; 0x40
 80035bc:	8812      	ldrh	r2, [r2, #0]
 80035be:	fbb3 f3f2 	udiv	r3, r3, r2
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 818e 	beq.w	80038e8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	212c      	movs	r1, #44	; 0x2c
 80035d2:	fb01 f303 	mul.w	r3, r1, r3
 80035d6:	4413      	add	r3, r2
 80035d8:	3354      	adds	r3, #84	; 0x54
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	f083 0301 	eor.w	r3, r3, #1
 80035e0:	b2d8      	uxtb	r0, r3
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	212c      	movs	r1, #44	; 0x2c
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	4413      	add	r3, r2
 80035ee:	3354      	adds	r3, #84	; 0x54
 80035f0:	4602      	mov	r2, r0
 80035f2:	701a      	strb	r2, [r3, #0]
}
 80035f4:	e178      	b.n	80038e8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	212c      	movs	r1, #44	; 0x2c
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	4413      	add	r3, r2
 8003602:	3354      	adds	r3, #84	; 0x54
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	f083 0301 	eor.w	r3, r3, #1
 800360a:	b2d8      	uxtb	r0, r3
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	212c      	movs	r1, #44	; 0x2c
 8003612:	fb01 f303 	mul.w	r3, r1, r3
 8003616:	4413      	add	r3, r2
 8003618:	3354      	adds	r3, #84	; 0x54
 800361a:	4602      	mov	r2, r0
 800361c:	701a      	strb	r2, [r3, #0]
}
 800361e:	e163      	b.n	80038e8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4413      	add	r3, r2
 8003628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b02      	cmp	r3, #2
 8003634:	f040 80f6 	bne.w	8003824 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	212c      	movs	r1, #44	; 0x2c
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	4413      	add	r3, r2
 8003644:	3361      	adds	r3, #97	; 0x61
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d109      	bne.n	8003660 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	212c      	movs	r1, #44	; 0x2c
 8003652:	fb01 f303 	mul.w	r3, r1, r3
 8003656:	4413      	add	r3, r2
 8003658:	3360      	adds	r3, #96	; 0x60
 800365a:	2201      	movs	r2, #1
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	e0c9      	b.n	80037f4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	212c      	movs	r1, #44	; 0x2c
 8003666:	fb01 f303 	mul.w	r3, r1, r3
 800366a:	4413      	add	r3, r2
 800366c:	3361      	adds	r3, #97	; 0x61
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b05      	cmp	r3, #5
 8003672:	d109      	bne.n	8003688 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	212c      	movs	r1, #44	; 0x2c
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	4413      	add	r3, r2
 8003680:	3360      	adds	r3, #96	; 0x60
 8003682:	2205      	movs	r2, #5
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	e0b5      	b.n	80037f4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	212c      	movs	r1, #44	; 0x2c
 800368e:	fb01 f303 	mul.w	r3, r1, r3
 8003692:	4413      	add	r3, r2
 8003694:	3361      	adds	r3, #97	; 0x61
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b06      	cmp	r3, #6
 800369a:	d009      	beq.n	80036b0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	212c      	movs	r1, #44	; 0x2c
 80036a2:	fb01 f303 	mul.w	r3, r1, r3
 80036a6:	4413      	add	r3, r2
 80036a8:	3361      	adds	r3, #97	; 0x61
 80036aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d150      	bne.n	8003752 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	212c      	movs	r1, #44	; 0x2c
 80036b6:	fb01 f303 	mul.w	r3, r1, r3
 80036ba:	4413      	add	r3, r2
 80036bc:	335c      	adds	r3, #92	; 0x5c
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	202c      	movs	r0, #44	; 0x2c
 80036c8:	fb00 f303 	mul.w	r3, r0, r3
 80036cc:	440b      	add	r3, r1
 80036ce:	335c      	adds	r3, #92	; 0x5c
 80036d0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	212c      	movs	r1, #44	; 0x2c
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	4413      	add	r3, r2
 80036de:	335c      	adds	r3, #92	; 0x5c
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d912      	bls.n	800370c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	212c      	movs	r1, #44	; 0x2c
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	335c      	adds	r3, #92	; 0x5c
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	212c      	movs	r1, #44	; 0x2c
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	4413      	add	r3, r2
 8003704:	3360      	adds	r3, #96	; 0x60
 8003706:	2204      	movs	r2, #4
 8003708:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800370a:	e073      	b.n	80037f4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	3360      	adds	r3, #96	; 0x60
 800371a:	2202      	movs	r2, #2
 800371c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4413      	add	r3, r2
 8003726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003734:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800373c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4413      	add	r3, r2
 8003746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374a:	461a      	mov	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003750:	e050      	b.n	80037f4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	212c      	movs	r1, #44	; 0x2c
 8003758:	fb01 f303 	mul.w	r3, r1, r3
 800375c:	4413      	add	r3, r2
 800375e:	3361      	adds	r3, #97	; 0x61
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b03      	cmp	r3, #3
 8003764:	d122      	bne.n	80037ac <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	212c      	movs	r1, #44	; 0x2c
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	3360      	adds	r3, #96	; 0x60
 8003774:	2202      	movs	r2, #2
 8003776:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4413      	add	r3, r2
 8003780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800378e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003796:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a4:	461a      	mov	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e023      	b.n	80037f4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	212c      	movs	r1, #44	; 0x2c
 80037b2:	fb01 f303 	mul.w	r3, r1, r3
 80037b6:	4413      	add	r3, r2
 80037b8:	3361      	adds	r3, #97	; 0x61
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b07      	cmp	r3, #7
 80037be:	d119      	bne.n	80037f4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	212c      	movs	r1, #44	; 0x2c
 80037c6:	fb01 f303 	mul.w	r3, r1, r3
 80037ca:	4413      	add	r3, r2
 80037cc:	335c      	adds	r3, #92	; 0x5c
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	202c      	movs	r0, #44	; 0x2c
 80037d8:	fb00 f303 	mul.w	r3, r0, r3
 80037dc:	440b      	add	r3, r1
 80037de:	335c      	adds	r3, #92	; 0x5c
 80037e0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	212c      	movs	r1, #44	; 0x2c
 80037e8:	fb01 f303 	mul.w	r3, r1, r3
 80037ec:	4413      	add	r3, r2
 80037ee:	3360      	adds	r3, #96	; 0x60
 80037f0:	2204      	movs	r2, #4
 80037f2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003800:	461a      	mov	r2, r3
 8003802:	2302      	movs	r3, #2
 8003804:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	b2d9      	uxtb	r1, r3
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	202c      	movs	r0, #44	; 0x2c
 8003810:	fb00 f303 	mul.w	r3, r0, r3
 8003814:	4413      	add	r3, r2
 8003816:	3360      	adds	r3, #96	; 0x60
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f004 fb9b 	bl	8007f58 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003822:	e061      	b.n	80038e8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4413      	add	r3, r2
 800382c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b10      	cmp	r3, #16
 8003838:	d156      	bne.n	80038e8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	212c      	movs	r1, #44	; 0x2c
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	4413      	add	r3, r2
 8003846:	333f      	adds	r3, #63	; 0x3f
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b03      	cmp	r3, #3
 800384c:	d111      	bne.n	8003872 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	212c      	movs	r1, #44	; 0x2c
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	4413      	add	r3, r2
 800385a:	335c      	adds	r3, #92	; 0x5c
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	4611      	mov	r1, r2
 800386a:	4618      	mov	r0, r3
 800386c:	f002 f8d1 	bl	8005a12 <USB_HC_Halt>
 8003870:	e031      	b.n	80038d6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	212c      	movs	r1, #44	; 0x2c
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	4413      	add	r3, r2
 800387e:	333f      	adds	r3, #63	; 0x3f
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	212c      	movs	r1, #44	; 0x2c
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	4413      	add	r3, r2
 8003892:	333f      	adds	r3, #63	; 0x3f
 8003894:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003896:	2b02      	cmp	r3, #2
 8003898:	d11d      	bne.n	80038d6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	212c      	movs	r1, #44	; 0x2c
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	335c      	adds	r3, #92	; 0x5c
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d110      	bne.n	80038d6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	212c      	movs	r1, #44	; 0x2c
 80038ba:	fb01 f303 	mul.w	r3, r1, r3
 80038be:	4413      	add	r3, r2
 80038c0:	3361      	adds	r3, #97	; 0x61
 80038c2:	2203      	movs	r2, #3
 80038c4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f002 f89e 	bl	8005a12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e2:	461a      	mov	r2, r3
 80038e4:	2310      	movs	r3, #16
 80038e6:	6093      	str	r3, [r2, #8]
}
 80038e8:	bf00      	nop
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003906:	78fb      	ldrb	r3, [r7, #3]
 8003908:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	4413      	add	r3, r2
 8003912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b04      	cmp	r3, #4
 800391e:	d11a      	bne.n	8003956 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	4413      	add	r3, r2
 8003928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392c:	461a      	mov	r2, r3
 800392e:	2304      	movs	r3, #4
 8003930:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	212c      	movs	r1, #44	; 0x2c
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	3361      	adds	r3, #97	; 0x61
 8003940:	2206      	movs	r2, #6
 8003942:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f002 f85f 	bl	8005a12 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003954:	e331      	b.n	8003fba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	4413      	add	r3, r2
 800395e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b20      	cmp	r3, #32
 800396a:	d12e      	bne.n	80039ca <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	4413      	add	r3, r2
 8003974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003978:	461a      	mov	r2, r3
 800397a:	2320      	movs	r3, #32
 800397c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	212c      	movs	r1, #44	; 0x2c
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	4413      	add	r3, r2
 800398a:	333d      	adds	r3, #61	; 0x3d
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b01      	cmp	r3, #1
 8003990:	f040 8313 	bne.w	8003fba <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	212c      	movs	r1, #44	; 0x2c
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	333d      	adds	r3, #61	; 0x3d
 80039a2:	2200      	movs	r2, #0
 80039a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	212c      	movs	r1, #44	; 0x2c
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	3360      	adds	r3, #96	; 0x60
 80039b4:	2202      	movs	r2, #2
 80039b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	4611      	mov	r1, r2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f002 f825 	bl	8005a12 <USB_HC_Halt>
}
 80039c8:	e2f7      	b.n	8003fba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e0:	d112      	bne.n	8003a08 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ee:	461a      	mov	r2, r3
 80039f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039f4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	4611      	mov	r1, r2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f002 f806 	bl	8005a12 <USB_HC_Halt>
}
 8003a06:	e2d8      	b.n	8003fba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d140      	bne.n	8003aa0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	212c      	movs	r1, #44	; 0x2c
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	4413      	add	r3, r2
 8003a2a:	335c      	adds	r3, #92	; 0x5c
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a42:	2b40      	cmp	r3, #64	; 0x40
 8003a44:	d111      	bne.n	8003a6a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	212c      	movs	r1, #44	; 0x2c
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	4413      	add	r3, r2
 8003a52:	333d      	adds	r3, #61	; 0x3d
 8003a54:	2201      	movs	r2, #1
 8003a56:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a64:	461a      	mov	r2, r3
 8003a66:	2340      	movs	r3, #64	; 0x40
 8003a68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a76:	461a      	mov	r2, r3
 8003a78:	2301      	movs	r3, #1
 8003a7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	212c      	movs	r1, #44	; 0x2c
 8003a82:	fb01 f303 	mul.w	r3, r1, r3
 8003a86:	4413      	add	r3, r2
 8003a88:	3361      	adds	r3, #97	; 0x61
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	4611      	mov	r1, r2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f001 ffba 	bl	8005a12 <USB_HC_Halt>
}
 8003a9e:	e28c      	b.n	8003fba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b40      	cmp	r3, #64	; 0x40
 8003ab4:	d12c      	bne.n	8003b10 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	212c      	movs	r1, #44	; 0x2c
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3361      	adds	r3, #97	; 0x61
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	212c      	movs	r1, #44	; 0x2c
 8003ace:	fb01 f303 	mul.w	r3, r1, r3
 8003ad2:	4413      	add	r3, r2
 8003ad4:	333d      	adds	r3, #61	; 0x3d
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	212c      	movs	r1, #44	; 0x2c
 8003ae0:	fb01 f303 	mul.w	r3, r1, r3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	335c      	adds	r3, #92	; 0x5c
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	4611      	mov	r1, r2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 ff8b 	bl	8005a12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b08:	461a      	mov	r2, r3
 8003b0a:	2340      	movs	r3, #64	; 0x40
 8003b0c:	6093      	str	r3, [r2, #8]
}
 8003b0e:	e254      	b.n	8003fba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d11a      	bne.n	8003b5c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b32:	461a      	mov	r2, r3
 8003b34:	2308      	movs	r3, #8
 8003b36:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	212c      	movs	r1, #44	; 0x2c
 8003b3e:	fb01 f303 	mul.w	r3, r1, r3
 8003b42:	4413      	add	r3, r2
 8003b44:	3361      	adds	r3, #97	; 0x61
 8003b46:	2205      	movs	r2, #5
 8003b48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f001 ff5c 	bl	8005a12 <USB_HC_Halt>
}
 8003b5a:	e22e      	b.n	8003fba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0310 	and.w	r3, r3, #16
 8003b6e:	2b10      	cmp	r3, #16
 8003b70:	d140      	bne.n	8003bf4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	212c      	movs	r1, #44	; 0x2c
 8003b78:	fb01 f303 	mul.w	r3, r1, r3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	335c      	adds	r3, #92	; 0x5c
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	212c      	movs	r1, #44	; 0x2c
 8003b8a:	fb01 f303 	mul.w	r3, r1, r3
 8003b8e:	4413      	add	r3, r2
 8003b90:	3361      	adds	r3, #97	; 0x61
 8003b92:	2203      	movs	r2, #3
 8003b94:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	212c      	movs	r1, #44	; 0x2c
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	333d      	adds	r3, #61	; 0x3d
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d112      	bne.n	8003bd0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	212c      	movs	r1, #44	; 0x2c
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	333c      	adds	r3, #60	; 0x3c
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d108      	bne.n	8003bd0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	212c      	movs	r1, #44	; 0x2c
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	4413      	add	r3, r2
 8003bca:	333d      	adds	r3, #61	; 0x3d
 8003bcc:	2201      	movs	r2, #1
 8003bce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	4611      	mov	r1, r2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 ff19 	bl	8005a12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bec:	461a      	mov	r2, r3
 8003bee:	2310      	movs	r3, #16
 8003bf0:	6093      	str	r3, [r2, #8]
}
 8003bf2:	e1e2      	b.n	8003fba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c06:	2b80      	cmp	r3, #128	; 0x80
 8003c08:	d164      	bne.n	8003cd4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d111      	bne.n	8003c36 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	212c      	movs	r1, #44	; 0x2c
 8003c18:	fb01 f303 	mul.w	r3, r1, r3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3361      	adds	r3, #97	; 0x61
 8003c20:	2206      	movs	r2, #6
 8003c22:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 feef 	bl	8005a12 <USB_HC_Halt>
 8003c34:	e044      	b.n	8003cc0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	212c      	movs	r1, #44	; 0x2c
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	4413      	add	r3, r2
 8003c42:	335c      	adds	r3, #92	; 0x5c
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	202c      	movs	r0, #44	; 0x2c
 8003c4e:	fb00 f303 	mul.w	r3, r0, r3
 8003c52:	440b      	add	r3, r1
 8003c54:	335c      	adds	r3, #92	; 0x5c
 8003c56:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	212c      	movs	r1, #44	; 0x2c
 8003c5e:	fb01 f303 	mul.w	r3, r1, r3
 8003c62:	4413      	add	r3, r2
 8003c64:	335c      	adds	r3, #92	; 0x5c
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d920      	bls.n	8003cae <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	212c      	movs	r1, #44	; 0x2c
 8003c72:	fb01 f303 	mul.w	r3, r1, r3
 8003c76:	4413      	add	r3, r2
 8003c78:	335c      	adds	r3, #92	; 0x5c
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	212c      	movs	r1, #44	; 0x2c
 8003c84:	fb01 f303 	mul.w	r3, r1, r3
 8003c88:	4413      	add	r3, r2
 8003c8a:	3360      	adds	r3, #96	; 0x60
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	b2d9      	uxtb	r1, r3
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	202c      	movs	r0, #44	; 0x2c
 8003c9a:	fb00 f303 	mul.w	r3, r0, r3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3360      	adds	r3, #96	; 0x60
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f004 f956 	bl	8007f58 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003cac:	e008      	b.n	8003cc0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	212c      	movs	r1, #44	; 0x2c
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	4413      	add	r3, r2
 8003cba:	3360      	adds	r3, #96	; 0x60
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2380      	movs	r3, #128	; 0x80
 8003cd0:	6093      	str	r3, [r2, #8]
}
 8003cd2:	e172      	b.n	8003fba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cea:	d11b      	bne.n	8003d24 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	212c      	movs	r1, #44	; 0x2c
 8003cf2:	fb01 f303 	mul.w	r3, r1, r3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3361      	adds	r3, #97	; 0x61
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f001 fe82 	bl	8005a12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d20:	6093      	str	r3, [r2, #8]
}
 8003d22:	e14a      	b.n	8003fba <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	f040 813f 	bne.w	8003fba <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	212c      	movs	r1, #44	; 0x2c
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	3361      	adds	r3, #97	; 0x61
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d17d      	bne.n	8003e4c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	212c      	movs	r1, #44	; 0x2c
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3360      	adds	r3, #96	; 0x60
 8003d5e:	2201      	movs	r2, #1
 8003d60:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	333f      	adds	r3, #63	; 0x3f
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d00a      	beq.n	8003d8c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	212c      	movs	r1, #44	; 0x2c
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	333f      	adds	r3, #63	; 0x3f
 8003d84:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	f040 8100 	bne.w	8003f8c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d113      	bne.n	8003dbc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	212c      	movs	r1, #44	; 0x2c
 8003d9a:	fb01 f303 	mul.w	r3, r1, r3
 8003d9e:	4413      	add	r3, r2
 8003da0:	3355      	adds	r3, #85	; 0x55
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	f083 0301 	eor.w	r3, r3, #1
 8003da8:	b2d8      	uxtb	r0, r3
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	212c      	movs	r1, #44	; 0x2c
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	4413      	add	r3, r2
 8003db6:	3355      	adds	r3, #85	; 0x55
 8003db8:	4602      	mov	r2, r0
 8003dba:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	f040 80e3 	bne.w	8003f8c <HCD_HC_OUT_IRQHandler+0x69c>
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	212c      	movs	r1, #44	; 0x2c
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	334c      	adds	r3, #76	; 0x4c
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 80d8 	beq.w	8003f8c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	212c      	movs	r1, #44	; 0x2c
 8003de2:	fb01 f303 	mul.w	r3, r1, r3
 8003de6:	4413      	add	r3, r2
 8003de8:	334c      	adds	r3, #76	; 0x4c
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	202c      	movs	r0, #44	; 0x2c
 8003df2:	fb00 f202 	mul.w	r2, r0, r2
 8003df6:	440a      	add	r2, r1
 8003df8:	3240      	adds	r2, #64	; 0x40
 8003dfa:	8812      	ldrh	r2, [r2, #0]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	202c      	movs	r0, #44	; 0x2c
 8003e06:	fb00 f202 	mul.w	r2, r0, r2
 8003e0a:	440a      	add	r2, r1
 8003e0c:	3240      	adds	r2, #64	; 0x40
 8003e0e:	8812      	ldrh	r2, [r2, #0]
 8003e10:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80b5 	beq.w	8003f8c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	212c      	movs	r1, #44	; 0x2c
 8003e28:	fb01 f303 	mul.w	r3, r1, r3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3355      	adds	r3, #85	; 0x55
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	f083 0301 	eor.w	r3, r3, #1
 8003e36:	b2d8      	uxtb	r0, r3
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	212c      	movs	r1, #44	; 0x2c
 8003e3e:	fb01 f303 	mul.w	r3, r1, r3
 8003e42:	4413      	add	r3, r2
 8003e44:	3355      	adds	r3, #85	; 0x55
 8003e46:	4602      	mov	r2, r0
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	e09f      	b.n	8003f8c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	212c      	movs	r1, #44	; 0x2c
 8003e52:	fb01 f303 	mul.w	r3, r1, r3
 8003e56:	4413      	add	r3, r2
 8003e58:	3361      	adds	r3, #97	; 0x61
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d109      	bne.n	8003e74 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	212c      	movs	r1, #44	; 0x2c
 8003e66:	fb01 f303 	mul.w	r3, r1, r3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3360      	adds	r3, #96	; 0x60
 8003e6e:	2202      	movs	r2, #2
 8003e70:	701a      	strb	r2, [r3, #0]
 8003e72:	e08b      	b.n	8003f8c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	212c      	movs	r1, #44	; 0x2c
 8003e7a:	fb01 f303 	mul.w	r3, r1, r3
 8003e7e:	4413      	add	r3, r2
 8003e80:	3361      	adds	r3, #97	; 0x61
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b04      	cmp	r3, #4
 8003e86:	d109      	bne.n	8003e9c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	212c      	movs	r1, #44	; 0x2c
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	3360      	adds	r3, #96	; 0x60
 8003e96:	2202      	movs	r2, #2
 8003e98:	701a      	strb	r2, [r3, #0]
 8003e9a:	e077      	b.n	8003f8c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	212c      	movs	r1, #44	; 0x2c
 8003ea2:	fb01 f303 	mul.w	r3, r1, r3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3361      	adds	r3, #97	; 0x61
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b05      	cmp	r3, #5
 8003eae:	d109      	bne.n	8003ec4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	212c      	movs	r1, #44	; 0x2c
 8003eb6:	fb01 f303 	mul.w	r3, r1, r3
 8003eba:	4413      	add	r3, r2
 8003ebc:	3360      	adds	r3, #96	; 0x60
 8003ebe:	2205      	movs	r2, #5
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	e063      	b.n	8003f8c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	212c      	movs	r1, #44	; 0x2c
 8003eca:	fb01 f303 	mul.w	r3, r1, r3
 8003ece:	4413      	add	r3, r2
 8003ed0:	3361      	adds	r3, #97	; 0x61
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b06      	cmp	r3, #6
 8003ed6:	d009      	beq.n	8003eec <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	212c      	movs	r1, #44	; 0x2c
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3361      	adds	r3, #97	; 0x61
 8003ee6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d14f      	bne.n	8003f8c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	212c      	movs	r1, #44	; 0x2c
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	335c      	adds	r3, #92	; 0x5c
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	202c      	movs	r0, #44	; 0x2c
 8003f04:	fb00 f303 	mul.w	r3, r0, r3
 8003f08:	440b      	add	r3, r1
 8003f0a:	335c      	adds	r3, #92	; 0x5c
 8003f0c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	212c      	movs	r1, #44	; 0x2c
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	4413      	add	r3, r2
 8003f1a:	335c      	adds	r3, #92	; 0x5c
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d912      	bls.n	8003f48 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	212c      	movs	r1, #44	; 0x2c
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	335c      	adds	r3, #92	; 0x5c
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	212c      	movs	r1, #44	; 0x2c
 8003f3a:	fb01 f303 	mul.w	r3, r1, r3
 8003f3e:	4413      	add	r3, r2
 8003f40:	3360      	adds	r3, #96	; 0x60
 8003f42:	2204      	movs	r2, #4
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	e021      	b.n	8003f8c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	212c      	movs	r1, #44	; 0x2c
 8003f4e:	fb01 f303 	mul.w	r3, r1, r3
 8003f52:	4413      	add	r3, r2
 8003f54:	3360      	adds	r3, #96	; 0x60
 8003f56:	2202      	movs	r2, #2
 8003f58:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f70:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f78:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f86:	461a      	mov	r2, r3
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f98:	461a      	mov	r2, r3
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	b2d9      	uxtb	r1, r3
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	202c      	movs	r0, #44	; 0x2c
 8003fa8:	fb00 f303 	mul.w	r3, r0, r3
 8003fac:	4413      	add	r3, r2
 8003fae:	3360      	adds	r3, #96	; 0x60
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f003 ffcf 	bl	8007f58 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003fba:	bf00      	nop
 8003fbc:	3720      	adds	r7, #32
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b08a      	sub	sp, #40	; 0x28
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	0c5b      	lsrs	r3, r3, #17
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ff6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d004      	beq.n	8004008 <HCD_RXQLVL_IRQHandler+0x46>
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b05      	cmp	r3, #5
 8004002:	f000 80a9 	beq.w	8004158 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004006:	e0aa      	b.n	800415e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 80a6 	beq.w	800415c <HCD_RXQLVL_IRQHandler+0x19a>
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	212c      	movs	r1, #44	; 0x2c
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	4413      	add	r3, r2
 800401c:	3344      	adds	r3, #68	; 0x44
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 809b 	beq.w	800415c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	212c      	movs	r1, #44	; 0x2c
 800402c:	fb01 f303 	mul.w	r3, r1, r3
 8004030:	4413      	add	r3, r2
 8004032:	3350      	adds	r3, #80	; 0x50
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	441a      	add	r2, r3
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	202c      	movs	r0, #44	; 0x2c
 8004040:	fb00 f303 	mul.w	r3, r0, r3
 8004044:	440b      	add	r3, r1
 8004046:	334c      	adds	r3, #76	; 0x4c
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d87a      	bhi.n	8004144 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	212c      	movs	r1, #44	; 0x2c
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	4413      	add	r3, r2
 800405e:	3344      	adds	r3, #68	; 0x44
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	b292      	uxth	r2, r2
 8004066:	4619      	mov	r1, r3
 8004068:	f001 f82a 	bl	80050c0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	212c      	movs	r1, #44	; 0x2c
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	4413      	add	r3, r2
 8004078:	3344      	adds	r3, #68	; 0x44
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	441a      	add	r2, r3
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	202c      	movs	r0, #44	; 0x2c
 8004086:	fb00 f303 	mul.w	r3, r0, r3
 800408a:	440b      	add	r3, r1
 800408c:	3344      	adds	r3, #68	; 0x44
 800408e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	212c      	movs	r1, #44	; 0x2c
 8004096:	fb01 f303 	mul.w	r3, r1, r3
 800409a:	4413      	add	r3, r2
 800409c:	3350      	adds	r3, #80	; 0x50
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	441a      	add	r2, r3
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	202c      	movs	r0, #44	; 0x2c
 80040aa:	fb00 f303 	mul.w	r3, r0, r3
 80040ae:	440b      	add	r3, r1
 80040b0:	3350      	adds	r3, #80	; 0x50
 80040b2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	0cdb      	lsrs	r3, r3, #19
 80040c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040c8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	212c      	movs	r1, #44	; 0x2c
 80040d0:	fb01 f303 	mul.w	r3, r1, r3
 80040d4:	4413      	add	r3, r2
 80040d6:	3340      	adds	r3, #64	; 0x40
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4293      	cmp	r3, r2
 80040e0:	d13c      	bne.n	800415c <HCD_RXQLVL_IRQHandler+0x19a>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d039      	beq.n	800415c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040fe:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004106:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	4413      	add	r3, r2
 8004110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004114:	461a      	mov	r2, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	212c      	movs	r1, #44	; 0x2c
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	4413      	add	r3, r2
 8004126:	3354      	adds	r3, #84	; 0x54
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	f083 0301 	eor.w	r3, r3, #1
 800412e:	b2d8      	uxtb	r0, r3
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	212c      	movs	r1, #44	; 0x2c
 8004136:	fb01 f303 	mul.w	r3, r1, r3
 800413a:	4413      	add	r3, r2
 800413c:	3354      	adds	r3, #84	; 0x54
 800413e:	4602      	mov	r2, r0
 8004140:	701a      	strb	r2, [r3, #0]
      break;
 8004142:	e00b      	b.n	800415c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	212c      	movs	r1, #44	; 0x2c
 800414a:	fb01 f303 	mul.w	r3, r1, r3
 800414e:	4413      	add	r3, r2
 8004150:	3360      	adds	r3, #96	; 0x60
 8004152:	2204      	movs	r2, #4
 8004154:	701a      	strb	r2, [r3, #0]
      break;
 8004156:	e001      	b.n	800415c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004158:	bf00      	nop
 800415a:	e000      	b.n	800415e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800415c:	bf00      	nop
  }
}
 800415e:	bf00      	nop
 8004160:	3728      	adds	r7, #40	; 0x28
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b086      	sub	sp, #24
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004192:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b02      	cmp	r3, #2
 800419c:	d10b      	bne.n	80041b6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d102      	bne.n	80041ae <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f003 feb9 	bl	8007f20 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f043 0302 	orr.w	r3, r3, #2
 80041b4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d132      	bne.n	8004226 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f043 0308 	orr.w	r3, r3, #8
 80041c6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d126      	bne.n	8004220 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d113      	bne.n	8004202 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80041e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041e4:	d106      	bne.n	80041f4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2102      	movs	r1, #2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f001 f8d5 	bl	800539c <USB_InitFSLSPClkSel>
 80041f2:	e011      	b.n	8004218 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2101      	movs	r1, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 f8ce 	bl	800539c <USB_InitFSLSPClkSel>
 8004200:	e00a      	b.n	8004218 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d106      	bne.n	8004218 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004210:	461a      	mov	r2, r3
 8004212:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004216:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f003 feab 	bl	8007f74 <HAL_HCD_PortEnabled_Callback>
 800421e:	e002      	b.n	8004226 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f003 feb5 	bl	8007f90 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f003 0320 	and.w	r3, r3, #32
 800422c:	2b20      	cmp	r3, #32
 800422e:	d103      	bne.n	8004238 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f043 0320 	orr.w	r3, r3, #32
 8004236:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800423e:	461a      	mov	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	6013      	str	r3, [r2, #0]
}
 8004244:	bf00      	nop
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e12b      	b.n	80044b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fc fdea 	bl	8000e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2224      	movs	r2, #36	; 0x24
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0201 	bic.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800429e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042b0:	f000 fd80 	bl	8004db4 <HAL_RCC_GetPCLK1Freq>
 80042b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	4a81      	ldr	r2, [pc, #516]	; (80044c0 <HAL_I2C_Init+0x274>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d807      	bhi.n	80042d0 <HAL_I2C_Init+0x84>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4a80      	ldr	r2, [pc, #512]	; (80044c4 <HAL_I2C_Init+0x278>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	bf94      	ite	ls
 80042c8:	2301      	movls	r3, #1
 80042ca:	2300      	movhi	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	e006      	b.n	80042de <HAL_I2C_Init+0x92>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4a7d      	ldr	r2, [pc, #500]	; (80044c8 <HAL_I2C_Init+0x27c>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	bf94      	ite	ls
 80042d8:	2301      	movls	r3, #1
 80042da:	2300      	movhi	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e0e7      	b.n	80044b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4a78      	ldr	r2, [pc, #480]	; (80044cc <HAL_I2C_Init+0x280>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	0c9b      	lsrs	r3, r3, #18
 80042f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	4a6a      	ldr	r2, [pc, #424]	; (80044c0 <HAL_I2C_Init+0x274>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d802      	bhi.n	8004320 <HAL_I2C_Init+0xd4>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	3301      	adds	r3, #1
 800431e:	e009      	b.n	8004334 <HAL_I2C_Init+0xe8>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	4a69      	ldr	r2, [pc, #420]	; (80044d0 <HAL_I2C_Init+0x284>)
 800432c:	fba2 2303 	umull	r2, r3, r2, r3
 8004330:	099b      	lsrs	r3, r3, #6
 8004332:	3301      	adds	r3, #1
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	430b      	orrs	r3, r1
 800433a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004346:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	495c      	ldr	r1, [pc, #368]	; (80044c0 <HAL_I2C_Init+0x274>)
 8004350:	428b      	cmp	r3, r1
 8004352:	d819      	bhi.n	8004388 <HAL_I2C_Init+0x13c>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	1e59      	subs	r1, r3, #1
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004362:	1c59      	adds	r1, r3, #1
 8004364:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004368:	400b      	ands	r3, r1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_I2C_Init+0x138>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	1e59      	subs	r1, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	fbb1 f3f3 	udiv	r3, r1, r3
 800437c:	3301      	adds	r3, #1
 800437e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004382:	e051      	b.n	8004428 <HAL_I2C_Init+0x1dc>
 8004384:	2304      	movs	r3, #4
 8004386:	e04f      	b.n	8004428 <HAL_I2C_Init+0x1dc>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d111      	bne.n	80043b4 <HAL_I2C_Init+0x168>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	1e58      	subs	r0, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	440b      	add	r3, r1
 800439e:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a2:	3301      	adds	r3, #1
 80043a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	e012      	b.n	80043da <HAL_I2C_Init+0x18e>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	1e58      	subs	r0, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6859      	ldr	r1, [r3, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	0099      	lsls	r1, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ca:	3301      	adds	r3, #1
 80043cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bf0c      	ite	eq
 80043d4:	2301      	moveq	r3, #1
 80043d6:	2300      	movne	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_I2C_Init+0x196>
 80043de:	2301      	movs	r3, #1
 80043e0:	e022      	b.n	8004428 <HAL_I2C_Init+0x1dc>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10e      	bne.n	8004408 <HAL_I2C_Init+0x1bc>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1e58      	subs	r0, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6859      	ldr	r1, [r3, #4]
 80043f2:	460b      	mov	r3, r1
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	440b      	add	r3, r1
 80043f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80043fc:	3301      	adds	r3, #1
 80043fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004406:	e00f      	b.n	8004428 <HAL_I2C_Init+0x1dc>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	1e58      	subs	r0, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6859      	ldr	r1, [r3, #4]
 8004410:	460b      	mov	r3, r1
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	0099      	lsls	r1, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	fbb0 f3f3 	udiv	r3, r0, r3
 800441e:	3301      	adds	r3, #1
 8004420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004424:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	6809      	ldr	r1, [r1, #0]
 800442c:	4313      	orrs	r3, r2
 800442e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69da      	ldr	r2, [r3, #28]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004456:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6911      	ldr	r1, [r2, #16]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	68d2      	ldr	r2, [r2, #12]
 8004462:	4311      	orrs	r1, r2
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	430b      	orrs	r3, r1
 800446a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695a      	ldr	r2, [r3, #20]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	000186a0 	.word	0x000186a0
 80044c4:	001e847f 	.word	0x001e847f
 80044c8:	003d08ff 	.word	0x003d08ff
 80044cc:	431bde83 	.word	0x431bde83
 80044d0:	10624dd3 	.word	0x10624dd3

080044d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e267      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d075      	beq.n	80045de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044f2:	4b88      	ldr	r3, [pc, #544]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d00c      	beq.n	8004518 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044fe:	4b85      	ldr	r3, [pc, #532]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004506:	2b08      	cmp	r3, #8
 8004508:	d112      	bne.n	8004530 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800450a:	4b82      	ldr	r3, [pc, #520]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004516:	d10b      	bne.n	8004530 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004518:	4b7e      	ldr	r3, [pc, #504]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d05b      	beq.n	80045dc <HAL_RCC_OscConfig+0x108>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d157      	bne.n	80045dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e242      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004538:	d106      	bne.n	8004548 <HAL_RCC_OscConfig+0x74>
 800453a:	4b76      	ldr	r3, [pc, #472]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a75      	ldr	r2, [pc, #468]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e01d      	b.n	8004584 <HAL_RCC_OscConfig+0xb0>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004550:	d10c      	bne.n	800456c <HAL_RCC_OscConfig+0x98>
 8004552:	4b70      	ldr	r3, [pc, #448]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a6f      	ldr	r2, [pc, #444]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4b6d      	ldr	r3, [pc, #436]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a6c      	ldr	r2, [pc, #432]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	e00b      	b.n	8004584 <HAL_RCC_OscConfig+0xb0>
 800456c:	4b69      	ldr	r3, [pc, #420]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a68      	ldr	r2, [pc, #416]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	4b66      	ldr	r3, [pc, #408]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a65      	ldr	r2, [pc, #404]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 800457e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d013      	beq.n	80045b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7fc fdea 	bl	8001164 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004594:	f7fc fde6 	bl	8001164 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	; 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e207      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	4b5b      	ldr	r3, [pc, #364]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0xc0>
 80045b2:	e014      	b.n	80045de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b4:	f7fc fdd6 	bl	8001164 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045bc:	f7fc fdd2 	bl	8001164 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b64      	cmp	r3, #100	; 0x64
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e1f3      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ce:	4b51      	ldr	r3, [pc, #324]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0xe8>
 80045da:	e000      	b.n	80045de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d063      	beq.n	80046b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ea:	4b4a      	ldr	r3, [pc, #296]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00b      	beq.n	800460e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045f6:	4b47      	ldr	r3, [pc, #284]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d11c      	bne.n	800463c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004602:	4b44      	ldr	r3, [pc, #272]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d116      	bne.n	800463c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460e:	4b41      	ldr	r3, [pc, #260]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_RCC_OscConfig+0x152>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d001      	beq.n	8004626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e1c7      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004626:	4b3b      	ldr	r3, [pc, #236]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4937      	ldr	r1, [pc, #220]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004636:	4313      	orrs	r3, r2
 8004638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463a:	e03a      	b.n	80046b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d020      	beq.n	8004686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004644:	4b34      	ldr	r3, [pc, #208]	; (8004718 <HAL_RCC_OscConfig+0x244>)
 8004646:	2201      	movs	r2, #1
 8004648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464a:	f7fc fd8b 	bl	8001164 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004652:	f7fc fd87 	bl	8001164 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e1a8      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004664:	4b2b      	ldr	r3, [pc, #172]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004670:	4b28      	ldr	r3, [pc, #160]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4925      	ldr	r1, [pc, #148]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 8004680:	4313      	orrs	r3, r2
 8004682:	600b      	str	r3, [r1, #0]
 8004684:	e015      	b.n	80046b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004686:	4b24      	ldr	r3, [pc, #144]	; (8004718 <HAL_RCC_OscConfig+0x244>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fc fd6a 	bl	8001164 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004694:	f7fc fd66 	bl	8001164 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e187      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a6:	4b1b      	ldr	r3, [pc, #108]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d036      	beq.n	800472c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d016      	beq.n	80046f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c6:	4b15      	ldr	r3, [pc, #84]	; (800471c <HAL_RCC_OscConfig+0x248>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046cc:	f7fc fd4a 	bl	8001164 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046d4:	f7fc fd46 	bl	8001164 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e167      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <HAL_RCC_OscConfig+0x240>)
 80046e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0x200>
 80046f2:	e01b      	b.n	800472c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046f4:	4b09      	ldr	r3, [pc, #36]	; (800471c <HAL_RCC_OscConfig+0x248>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046fa:	f7fc fd33 	bl	8001164 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004700:	e00e      	b.n	8004720 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004702:	f7fc fd2f 	bl	8001164 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d907      	bls.n	8004720 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e150      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
 8004714:	40023800 	.word	0x40023800
 8004718:	42470000 	.word	0x42470000
 800471c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004720:	4b88      	ldr	r3, [pc, #544]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1ea      	bne.n	8004702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8097 	beq.w	8004868 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800473a:	2300      	movs	r3, #0
 800473c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800473e:	4b81      	ldr	r3, [pc, #516]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10f      	bne.n	800476a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800474a:	2300      	movs	r3, #0
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	4b7d      	ldr	r3, [pc, #500]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	4a7c      	ldr	r2, [pc, #496]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004758:	6413      	str	r3, [r2, #64]	; 0x40
 800475a:	4b7a      	ldr	r3, [pc, #488]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004766:	2301      	movs	r3, #1
 8004768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476a:	4b77      	ldr	r3, [pc, #476]	; (8004948 <HAL_RCC_OscConfig+0x474>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004772:	2b00      	cmp	r3, #0
 8004774:	d118      	bne.n	80047a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004776:	4b74      	ldr	r3, [pc, #464]	; (8004948 <HAL_RCC_OscConfig+0x474>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a73      	ldr	r2, [pc, #460]	; (8004948 <HAL_RCC_OscConfig+0x474>)
 800477c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004782:	f7fc fcef 	bl	8001164 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478a:	f7fc fceb 	bl	8001164 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e10c      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479c:	4b6a      	ldr	r3, [pc, #424]	; (8004948 <HAL_RCC_OscConfig+0x474>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d106      	bne.n	80047be <HAL_RCC_OscConfig+0x2ea>
 80047b0:	4b64      	ldr	r3, [pc, #400]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4a63      	ldr	r2, [pc, #396]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6713      	str	r3, [r2, #112]	; 0x70
 80047bc:	e01c      	b.n	80047f8 <HAL_RCC_OscConfig+0x324>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x30c>
 80047c6:	4b5f      	ldr	r3, [pc, #380]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	4a5e      	ldr	r2, [pc, #376]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047cc:	f043 0304 	orr.w	r3, r3, #4
 80047d0:	6713      	str	r3, [r2, #112]	; 0x70
 80047d2:	4b5c      	ldr	r3, [pc, #368]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	4a5b      	ldr	r2, [pc, #364]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	6713      	str	r3, [r2, #112]	; 0x70
 80047de:	e00b      	b.n	80047f8 <HAL_RCC_OscConfig+0x324>
 80047e0:	4b58      	ldr	r3, [pc, #352]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	4a57      	ldr	r2, [pc, #348]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047e6:	f023 0301 	bic.w	r3, r3, #1
 80047ea:	6713      	str	r3, [r2, #112]	; 0x70
 80047ec:	4b55      	ldr	r3, [pc, #340]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f0:	4a54      	ldr	r2, [pc, #336]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80047f2:	f023 0304 	bic.w	r3, r3, #4
 80047f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d015      	beq.n	800482c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004800:	f7fc fcb0 	bl	8001164 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004806:	e00a      	b.n	800481e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004808:	f7fc fcac 	bl	8001164 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f241 3288 	movw	r2, #5000	; 0x1388
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e0cb      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481e:	4b49      	ldr	r3, [pc, #292]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0ee      	beq.n	8004808 <HAL_RCC_OscConfig+0x334>
 800482a:	e014      	b.n	8004856 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482c:	f7fc fc9a 	bl	8001164 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004832:	e00a      	b.n	800484a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004834:	f7fc fc96 	bl	8001164 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e0b5      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484a:	4b3e      	ldr	r3, [pc, #248]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1ee      	bne.n	8004834 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004856:	7dfb      	ldrb	r3, [r7, #23]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d105      	bne.n	8004868 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485c:	4b39      	ldr	r3, [pc, #228]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	4a38      	ldr	r2, [pc, #224]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004866:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 80a1 	beq.w	80049b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004872:	4b34      	ldr	r3, [pc, #208]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	2b08      	cmp	r3, #8
 800487c:	d05c      	beq.n	8004938 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d141      	bne.n	800490a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004886:	4b31      	ldr	r3, [pc, #196]	; (800494c <HAL_RCC_OscConfig+0x478>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488c:	f7fc fc6a 	bl	8001164 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004894:	f7fc fc66 	bl	8001164 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e087      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a6:	4b27      	ldr	r3, [pc, #156]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f0      	bne.n	8004894 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69da      	ldr	r2, [r3, #28]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	019b      	lsls	r3, r3, #6
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c8:	085b      	lsrs	r3, r3, #1
 80048ca:	3b01      	subs	r3, #1
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	061b      	lsls	r3, r3, #24
 80048d6:	491b      	ldr	r1, [pc, #108]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048dc:	4b1b      	ldr	r3, [pc, #108]	; (800494c <HAL_RCC_OscConfig+0x478>)
 80048de:	2201      	movs	r2, #1
 80048e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e2:	f7fc fc3f 	bl	8001164 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ea:	f7fc fc3b 	bl	8001164 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e05c      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048fc:	4b11      	ldr	r3, [pc, #68]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0x416>
 8004908:	e054      	b.n	80049b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490a:	4b10      	ldr	r3, [pc, #64]	; (800494c <HAL_RCC_OscConfig+0x478>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004910:	f7fc fc28 	bl	8001164 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004918:	f7fc fc24 	bl	8001164 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e045      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492a:	4b06      	ldr	r3, [pc, #24]	; (8004944 <HAL_RCC_OscConfig+0x470>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x444>
 8004936:	e03d      	b.n	80049b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d107      	bne.n	8004950 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e038      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
 8004944:	40023800 	.word	0x40023800
 8004948:	40007000 	.word	0x40007000
 800494c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004950:	4b1b      	ldr	r3, [pc, #108]	; (80049c0 <HAL_RCC_OscConfig+0x4ec>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d028      	beq.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004968:	429a      	cmp	r2, r3
 800496a:	d121      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004976:	429a      	cmp	r2, r3
 8004978:	d11a      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004980:	4013      	ands	r3, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004988:	4293      	cmp	r3, r2
 800498a:	d111      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	085b      	lsrs	r3, r3, #1
 8004998:	3b01      	subs	r3, #1
 800499a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800499c:	429a      	cmp	r2, r3
 800499e:	d107      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40023800 	.word	0x40023800

080049c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0cc      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049d8:	4b68      	ldr	r3, [pc, #416]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d90c      	bls.n	8004a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e6:	4b65      	ldr	r3, [pc, #404]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ee:	4b63      	ldr	r3, [pc, #396]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d001      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0b8      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d020      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a18:	4b59      	ldr	r3, [pc, #356]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	4a58      	ldr	r2, [pc, #352]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a30:	4b53      	ldr	r3, [pc, #332]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	4a52      	ldr	r2, [pc, #328]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a3c:	4b50      	ldr	r3, [pc, #320]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	494d      	ldr	r1, [pc, #308]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d044      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d107      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a62:	4b47      	ldr	r3, [pc, #284]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d119      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e07f      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d003      	beq.n	8004a82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d107      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a82:	4b3f      	ldr	r3, [pc, #252]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e06f      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a92:	4b3b      	ldr	r3, [pc, #236]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e067      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa2:	4b37      	ldr	r3, [pc, #220]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f023 0203 	bic.w	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	4934      	ldr	r1, [pc, #208]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab4:	f7fc fb56 	bl	8001164 <HAL_GetTick>
 8004ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aba:	e00a      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004abc:	f7fc fb52 	bl	8001164 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e04f      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad2:	4b2b      	ldr	r3, [pc, #172]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 020c 	and.w	r2, r3, #12
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d1eb      	bne.n	8004abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae4:	4b25      	ldr	r3, [pc, #148]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d20c      	bcs.n	8004b0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af2:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afa:	4b20      	ldr	r3, [pc, #128]	; (8004b7c <HAL_RCC_ClockConfig+0x1b8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d001      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e032      	b.n	8004b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b18:	4b19      	ldr	r3, [pc, #100]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4916      	ldr	r1, [pc, #88]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b36:	4b12      	ldr	r3, [pc, #72]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	490e      	ldr	r1, [pc, #56]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b4a:	f000 f821 	bl	8004b90 <HAL_RCC_GetSysClockFreq>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	091b      	lsrs	r3, r3, #4
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	490a      	ldr	r1, [pc, #40]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 8004b5c:	5ccb      	ldrb	r3, [r1, r3]
 8004b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b62:	4a09      	ldr	r2, [pc, #36]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b66:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fc fab6 	bl	80010dc <HAL_InitTick>

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023c00 	.word	0x40023c00
 8004b80:	40023800 	.word	0x40023800
 8004b84:	080099f0 	.word	0x080099f0
 8004b88:	20000000 	.word	0x20000000
 8004b8c:	20000004 	.word	0x20000004

08004b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b94:	b094      	sub	sp, #80	; 0x50
 8004b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ba8:	4b79      	ldr	r3, [pc, #484]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 030c 	and.w	r3, r3, #12
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d00d      	beq.n	8004bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	f200 80e1 	bhi.w	8004d7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d003      	beq.n	8004bca <HAL_RCC_GetSysClockFreq+0x3a>
 8004bc2:	e0db      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bc4:	4b73      	ldr	r3, [pc, #460]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bc6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004bc8:	e0db      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bca:	4b73      	ldr	r3, [pc, #460]	; (8004d98 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bce:	e0d8      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bd0:	4b6f      	ldr	r3, [pc, #444]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bd8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bda:	4b6d      	ldr	r3, [pc, #436]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d063      	beq.n	8004cae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be6:	4b6a      	ldr	r3, [pc, #424]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	099b      	lsrs	r3, r3, #6
 8004bec:	2200      	movs	r2, #0
 8004bee:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bf0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8004bfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c02:	4622      	mov	r2, r4
 8004c04:	462b      	mov	r3, r5
 8004c06:	f04f 0000 	mov.w	r0, #0
 8004c0a:	f04f 0100 	mov.w	r1, #0
 8004c0e:	0159      	lsls	r1, r3, #5
 8004c10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c14:	0150      	lsls	r0, r2, #5
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	1a51      	subs	r1, r2, r1
 8004c1e:	6139      	str	r1, [r7, #16]
 8004c20:	4629      	mov	r1, r5
 8004c22:	eb63 0301 	sbc.w	r3, r3, r1
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c34:	4659      	mov	r1, fp
 8004c36:	018b      	lsls	r3, r1, #6
 8004c38:	4651      	mov	r1, sl
 8004c3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c3e:	4651      	mov	r1, sl
 8004c40:	018a      	lsls	r2, r1, #6
 8004c42:	4651      	mov	r1, sl
 8004c44:	ebb2 0801 	subs.w	r8, r2, r1
 8004c48:	4659      	mov	r1, fp
 8004c4a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c62:	4690      	mov	r8, r2
 8004c64:	4699      	mov	r9, r3
 8004c66:	4623      	mov	r3, r4
 8004c68:	eb18 0303 	adds.w	r3, r8, r3
 8004c6c:	60bb      	str	r3, [r7, #8]
 8004c6e:	462b      	mov	r3, r5
 8004c70:	eb49 0303 	adc.w	r3, r9, r3
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c82:	4629      	mov	r1, r5
 8004c84:	024b      	lsls	r3, r1, #9
 8004c86:	4621      	mov	r1, r4
 8004c88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c8c:	4621      	mov	r1, r4
 8004c8e:	024a      	lsls	r2, r1, #9
 8004c90:	4610      	mov	r0, r2
 8004c92:	4619      	mov	r1, r3
 8004c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c96:	2200      	movs	r2, #0
 8004c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ca0:	f7fb faee 	bl	8000280 <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4613      	mov	r3, r2
 8004caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cac:	e058      	b.n	8004d60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cae:	4b38      	ldr	r3, [pc, #224]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	099b      	lsrs	r3, r3, #6
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	4611      	mov	r1, r2
 8004cba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cbe:	623b      	str	r3, [r7, #32]
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cc8:	4642      	mov	r2, r8
 8004cca:	464b      	mov	r3, r9
 8004ccc:	f04f 0000 	mov.w	r0, #0
 8004cd0:	f04f 0100 	mov.w	r1, #0
 8004cd4:	0159      	lsls	r1, r3, #5
 8004cd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cda:	0150      	lsls	r0, r2, #5
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cf8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cfc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d00:	ebb2 040a 	subs.w	r4, r2, sl
 8004d04:	eb63 050b 	sbc.w	r5, r3, fp
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	00eb      	lsls	r3, r5, #3
 8004d12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d16:	00e2      	lsls	r2, r4, #3
 8004d18:	4614      	mov	r4, r2
 8004d1a:	461d      	mov	r5, r3
 8004d1c:	4643      	mov	r3, r8
 8004d1e:	18e3      	adds	r3, r4, r3
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	464b      	mov	r3, r9
 8004d24:	eb45 0303 	adc.w	r3, r5, r3
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d36:	4629      	mov	r1, r5
 8004d38:	028b      	lsls	r3, r1, #10
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d40:	4621      	mov	r1, r4
 8004d42:	028a      	lsls	r2, r1, #10
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	61fa      	str	r2, [r7, #28]
 8004d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d54:	f7fb fa94 	bl	8000280 <__aeabi_uldivmod>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	0c1b      	lsrs	r3, r3, #16
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d7a:	e002      	b.n	8004d82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d7c:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3750      	adds	r7, #80	; 0x50
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d8e:	bf00      	nop
 8004d90:	40023800 	.word	0x40023800
 8004d94:	00f42400 	.word	0x00f42400
 8004d98:	007a1200 	.word	0x007a1200

08004d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004da0:	4b03      	ldr	r3, [pc, #12]	; (8004db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004da2:	681b      	ldr	r3, [r3, #0]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	20000000 	.word	0x20000000

08004db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004db8:	f7ff fff0 	bl	8004d9c <HAL_RCC_GetHCLKFreq>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	0a9b      	lsrs	r3, r3, #10
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	4903      	ldr	r1, [pc, #12]	; (8004dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dca:	5ccb      	ldrb	r3, [r1, r3]
 8004dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	08009a00 	.word	0x08009a00

08004ddc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ddc:	b084      	sub	sp, #16
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	f107 001c 	add.w	r0, r7, #28
 8004dea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d122      	bne.n	8004e3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d105      	bne.n	8004e2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f9c0 	bl	80051b4 <USB_CoreReset>
 8004e34:	4603      	mov	r3, r0
 8004e36:	73fb      	strb	r3, [r7, #15]
 8004e38:	e01a      	b.n	8004e70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f9b4 	bl	80051b4 <USB_CoreReset>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38
 8004e62:	e005      	b.n	8004e70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d10b      	bne.n	8004e8e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f043 0206 	orr.w	r2, r3, #6
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f043 0220 	orr.w	r2, r3, #32
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e9a:	b004      	add	sp, #16
 8004e9c:	4770      	bx	lr

08004e9e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f043 0201 	orr.w	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f023 0201 	bic.w	r2, r3, #1
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d115      	bne.n	8004f30 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f10:	2001      	movs	r0, #1
 8004f12:	f7fc f933 	bl	800117c <HAL_Delay>
      ms++;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f93a 	bl	8005196 <USB_GetMode>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d01e      	beq.n	8004f66 <USB_SetCurrentMode+0x84>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b31      	cmp	r3, #49	; 0x31
 8004f2c:	d9f0      	bls.n	8004f10 <USB_SetCurrentMode+0x2e>
 8004f2e:	e01a      	b.n	8004f66 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d115      	bne.n	8004f62 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f42:	2001      	movs	r0, #1
 8004f44:	f7fc f91a 	bl	800117c <HAL_Delay>
      ms++;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f921 	bl	8005196 <USB_GetMode>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d005      	beq.n	8004f66 <USB_SetCurrentMode+0x84>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b31      	cmp	r3, #49	; 0x31
 8004f5e:	d9f0      	bls.n	8004f42 <USB_SetCurrentMode+0x60>
 8004f60:	e001      	b.n	8004f66 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e005      	b.n	8004f72 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b32      	cmp	r3, #50	; 0x32
 8004f6a:	d101      	bne.n	8004f70 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e000      	b.n	8004f72 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4a13      	ldr	r2, [pc, #76]	; (8004fe0 <USB_FlushTxFifo+0x64>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d901      	bls.n	8004f9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e01b      	b.n	8004fd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	daf2      	bge.n	8004f8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	019b      	lsls	r3, r3, #6
 8004fac:	f043 0220 	orr.w	r2, r3, #32
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4a08      	ldr	r2, [pc, #32]	; (8004fe0 <USB_FlushTxFifo+0x64>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d901      	bls.n	8004fc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e006      	b.n	8004fd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0320 	and.w	r3, r3, #32
 8004fce:	2b20      	cmp	r3, #32
 8004fd0:	d0f0      	beq.n	8004fb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	00030d40 	.word	0x00030d40

08004fe4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4a11      	ldr	r2, [pc, #68]	; (8005040 <USB_FlushRxFifo+0x5c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e018      	b.n	8005034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	2b00      	cmp	r3, #0
 8005008:	daf2      	bge.n	8004ff0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2210      	movs	r2, #16
 8005012:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3301      	adds	r3, #1
 8005018:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4a08      	ldr	r2, [pc, #32]	; (8005040 <USB_FlushRxFifo+0x5c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d901      	bls.n	8005026 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e006      	b.n	8005034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0310 	and.w	r3, r3, #16
 800502e:	2b10      	cmp	r3, #16
 8005030:	d0f0      	beq.n	8005014 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	00030d40 	.word	0x00030d40

08005044 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005044:	b480      	push	{r7}
 8005046:	b089      	sub	sp, #36	; 0x24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	4611      	mov	r1, r2
 8005050:	461a      	mov	r2, r3
 8005052:	460b      	mov	r3, r1
 8005054:	71fb      	strb	r3, [r7, #7]
 8005056:	4613      	mov	r3, r2
 8005058:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005062:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005066:	2b00      	cmp	r3, #0
 8005068:	d123      	bne.n	80050b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800506a:	88bb      	ldrh	r3, [r7, #4]
 800506c:	3303      	adds	r3, #3
 800506e:	089b      	lsrs	r3, r3, #2
 8005070:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005072:	2300      	movs	r3, #0
 8005074:	61bb      	str	r3, [r7, #24]
 8005076:	e018      	b.n	80050aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	031a      	lsls	r2, r3, #12
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	4413      	add	r3, r2
 8005080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005084:	461a      	mov	r2, r3
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	3301      	adds	r3, #1
 8005090:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	3301      	adds	r3, #1
 8005096:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	3301      	adds	r3, #1
 800509c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	3301      	adds	r3, #1
 80050a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	3301      	adds	r3, #1
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d3e2      	bcc.n	8005078 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3724      	adds	r7, #36	; 0x24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b08b      	sub	sp, #44	; 0x2c
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	4613      	mov	r3, r2
 80050cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050d6:	88fb      	ldrh	r3, [r7, #6]
 80050d8:	089b      	lsrs	r3, r3, #2
 80050da:	b29b      	uxth	r3, r3
 80050dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050de:	88fb      	ldrh	r3, [r7, #6]
 80050e0:	f003 0303 	and.w	r3, r3, #3
 80050e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80050e6:	2300      	movs	r3, #0
 80050e8:	623b      	str	r3, [r7, #32]
 80050ea:	e014      	b.n	8005116 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	3301      	adds	r3, #1
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	3301      	adds	r3, #1
 8005102:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	3301      	adds	r3, #1
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	3301      	adds	r3, #1
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	3301      	adds	r3, #1
 8005114:	623b      	str	r3, [r7, #32]
 8005116:	6a3a      	ldr	r2, [r7, #32]
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	429a      	cmp	r2, r3
 800511c:	d3e6      	bcc.n	80050ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800511e:	8bfb      	ldrh	r3, [r7, #30]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01e      	beq.n	8005162 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800512e:	461a      	mov	r2, r3
 8005130:	f107 0310 	add.w	r3, r7, #16
 8005134:	6812      	ldr	r2, [r2, #0]
 8005136:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	fa22 f303 	lsr.w	r3, r2, r3
 8005144:	b2da      	uxtb	r2, r3
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	701a      	strb	r2, [r3, #0]
      i++;
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	3301      	adds	r3, #1
 800514e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	3301      	adds	r3, #1
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005156:	8bfb      	ldrh	r3, [r7, #30]
 8005158:	3b01      	subs	r3, #1
 800515a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800515c:	8bfb      	ldrh	r3, [r7, #30]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1ea      	bne.n	8005138 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005164:	4618      	mov	r0, r3
 8005166:	372c      	adds	r7, #44	; 0x2c
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4013      	ands	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005188:	68fb      	ldr	r3, [r7, #12]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f003 0301 	and.w	r3, r3, #1
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3301      	adds	r3, #1
 80051c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4a13      	ldr	r2, [pc, #76]	; (8005218 <USB_CoreReset+0x64>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e01b      	b.n	800520a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	daf2      	bge.n	80051c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f043 0201 	orr.w	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	3301      	adds	r3, #1
 80051ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4a09      	ldr	r2, [pc, #36]	; (8005218 <USB_CoreReset+0x64>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d901      	bls.n	80051fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e006      	b.n	800520a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b01      	cmp	r3, #1
 8005206:	d0f0      	beq.n	80051ea <USB_CoreReset+0x36>

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	00030d40 	.word	0x00030d40

0800521c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800521c:	b084      	sub	sp, #16
 800521e:	b580      	push	{r7, lr}
 8005220:	b086      	sub	sp, #24
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800522a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800523c:	461a      	mov	r2, r3
 800523e:	2300      	movs	r3, #0
 8005240:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005246:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526e:	2b00      	cmp	r3, #0
 8005270:	d018      	beq.n	80052a4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005274:	2b01      	cmp	r3, #1
 8005276:	d10a      	bne.n	800528e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005286:	f043 0304 	orr.w	r3, r3, #4
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	e014      	b.n	80052b8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800529c:	f023 0304 	bic.w	r3, r3, #4
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	e009      	b.n	80052b8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052b2:	f023 0304 	bic.w	r3, r3, #4
 80052b6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052b8:	2110      	movs	r1, #16
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff fe5e 	bl	8004f7c <USB_FlushTxFifo>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff fe8a 	bl	8004fe4 <USB_FlushRxFifo>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80052da:	2300      	movs	r3, #0
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	e015      	b.n	800530c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ec:	461a      	mov	r2, r3
 80052ee:	f04f 33ff 	mov.w	r3, #4294967295
 80052f2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005300:	461a      	mov	r2, r3
 8005302:	2300      	movs	r3, #0
 8005304:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	3301      	adds	r3, #1
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	429a      	cmp	r2, r3
 8005312:	d3e5      	bcc.n	80052e0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f04f 32ff 	mov.w	r2, #4294967295
 8005320:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00b      	beq.n	8005346 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005334:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a13      	ldr	r2, [pc, #76]	; (8005388 <USB_HostInit+0x16c>)
 800533a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a13      	ldr	r2, [pc, #76]	; (800538c <USB_HostInit+0x170>)
 8005340:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005344:	e009      	b.n	800535a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2280      	movs	r2, #128	; 0x80
 800534a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a10      	ldr	r2, [pc, #64]	; (8005390 <USB_HostInit+0x174>)
 8005350:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a0f      	ldr	r2, [pc, #60]	; (8005394 <USB_HostInit+0x178>)
 8005356:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	2b00      	cmp	r3, #0
 800535e:	d105      	bne.n	800536c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	f043 0210 	orr.w	r2, r3, #16
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699a      	ldr	r2, [r3, #24]
 8005370:	4b09      	ldr	r3, [pc, #36]	; (8005398 <USB_HostInit+0x17c>)
 8005372:	4313      	orrs	r3, r2
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005378:	7dfb      	ldrb	r3, [r7, #23]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005384:	b004      	add	sp, #16
 8005386:	4770      	bx	lr
 8005388:	01000200 	.word	0x01000200
 800538c:	00e00300 	.word	0x00e00300
 8005390:	00600080 	.word	0x00600080
 8005394:	004000e0 	.word	0x004000e0
 8005398:	a3200008 	.word	0xa3200008

0800539c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053ba:	f023 0303 	bic.w	r3, r3, #3
 80053be:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	78fb      	ldrb	r3, [r7, #3]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053d4:	4313      	orrs	r3, r2
 80053d6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80053d8:	78fb      	ldrb	r3, [r7, #3]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d107      	bne.n	80053ee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053e4:	461a      	mov	r2, r3
 80053e6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80053ea:	6053      	str	r3, [r2, #4]
 80053ec:	e009      	b.n	8005402 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d106      	bne.n	8005402 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053fa:	461a      	mov	r2, r3
 80053fc:	f241 7370 	movw	r3, #6000	; 0x1770
 8005400:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005430:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800543a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800543e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005440:	2064      	movs	r0, #100	; 0x64
 8005442:	f7fb fe9b 	bl	800117c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800544e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005452:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005454:	200a      	movs	r0, #10
 8005456:	f7fb fe91 	bl	800117c <HAL_Delay>

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005488:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d109      	bne.n	80054a8 <USB_DriveVbus+0x44>
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d106      	bne.n	80054a8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054a6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b2:	d109      	bne.n	80054c8 <USB_DriveVbus+0x64>
 80054b4:	78fb      	ldrb	r3, [r7, #3]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80054c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054c6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b085      	sub	sp, #20
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	0c5b      	lsrs	r3, r3, #17
 80054f4:	f003 0303 	and.w	r3, r3, #3
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	b29b      	uxth	r3, r3
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
	...

08005528 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	4608      	mov	r0, r1
 8005532:	4611      	mov	r1, r2
 8005534:	461a      	mov	r2, r3
 8005536:	4603      	mov	r3, r0
 8005538:	70fb      	strb	r3, [r7, #3]
 800553a:	460b      	mov	r3, r1
 800553c:	70bb      	strb	r3, [r7, #2]
 800553e:	4613      	mov	r3, r2
 8005540:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	4413      	add	r3, r2
 8005552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005556:	461a      	mov	r2, r3
 8005558:	f04f 33ff 	mov.w	r3, #4294967295
 800555c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800555e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005562:	2b03      	cmp	r3, #3
 8005564:	d87e      	bhi.n	8005664 <USB_HC_Init+0x13c>
 8005566:	a201      	add	r2, pc, #4	; (adr r2, 800556c <USB_HC_Init+0x44>)
 8005568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556c:	0800557d 	.word	0x0800557d
 8005570:	08005627 	.word	0x08005627
 8005574:	0800557d 	.word	0x0800557d
 8005578:	080055e9 	.word	0x080055e9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800557c:	78fb      	ldrb	r3, [r7, #3]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	4413      	add	r3, r2
 8005584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005588:	461a      	mov	r2, r3
 800558a:	f240 439d 	movw	r3, #1181	; 0x49d
 800558e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005590:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005594:	2b00      	cmp	r3, #0
 8005596:	da10      	bge.n	80055ba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	78fa      	ldrb	r2, [r7, #3]
 80055a8:	0151      	lsls	r1, r2, #5
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	440a      	add	r2, r1
 80055ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80055b8:	e057      	b.n	800566a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d051      	beq.n	800566a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	78fa      	ldrb	r2, [r7, #3]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80055e4:	60d3      	str	r3, [r2, #12]
      break;
 80055e6:	e040      	b.n	800566a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055e8:	78fb      	ldrb	r3, [r7, #3]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f4:	461a      	mov	r2, r3
 80055f6:	f240 639d 	movw	r3, #1693	; 0x69d
 80055fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80055fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005600:	2b00      	cmp	r3, #0
 8005602:	da34      	bge.n	800566e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005604:	78fb      	ldrb	r3, [r7, #3]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	4413      	add	r3, r2
 800560c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	78fa      	ldrb	r2, [r7, #3]
 8005614:	0151      	lsls	r1, r2, #5
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	440a      	add	r2, r1
 800561a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800561e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005622:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005624:	e023      	b.n	800566e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005626:	78fb      	ldrb	r3, [r7, #3]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	4413      	add	r3, r2
 800562e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005632:	461a      	mov	r2, r3
 8005634:	f240 2325 	movw	r3, #549	; 0x225
 8005638:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800563a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800563e:	2b00      	cmp	r3, #0
 8005640:	da17      	bge.n	8005672 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005642:	78fb      	ldrb	r3, [r7, #3]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	4413      	add	r3, r2
 800564a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	78fa      	ldrb	r2, [r7, #3]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	440a      	add	r2, r1
 8005658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800565c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005660:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005662:	e006      	b.n	8005672 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	77fb      	strb	r3, [r7, #31]
      break;
 8005668:	e004      	b.n	8005674 <USB_HC_Init+0x14c>
      break;
 800566a:	bf00      	nop
 800566c:	e002      	b.n	8005674 <USB_HC_Init+0x14c>
      break;
 800566e:	bf00      	nop
 8005670:	e000      	b.n	8005674 <USB_HC_Init+0x14c>
      break;
 8005672:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	4413      	add	r3, r2
 800567c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	78fa      	ldrb	r2, [r7, #3]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	440a      	add	r2, r1
 800568a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800568e:	f043 0302 	orr.w	r3, r3, #2
 8005692:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	2101      	movs	r1, #1
 80056a4:	fa01 f303 	lsl.w	r3, r1, r3
 80056a8:	6939      	ldr	r1, [r7, #16]
 80056aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80056ae:	4313      	orrs	r3, r2
 80056b0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80056be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	da03      	bge.n	80056ce <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80056c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ca:	61bb      	str	r3, [r7, #24]
 80056cc:	e001      	b.n	80056d2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff feff 	bl	80054d6 <USB_GetHostSpeed>
 80056d8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80056da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d106      	bne.n	80056f0 <USB_HC_Init+0x1c8>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d003      	beq.n	80056f0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80056e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056ec:	617b      	str	r3, [r7, #20]
 80056ee:	e001      	b.n	80056f4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056f4:	787b      	ldrb	r3, [r7, #1]
 80056f6:	059b      	lsls	r3, r3, #22
 80056f8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80056fc:	78bb      	ldrb	r3, [r7, #2]
 80056fe:	02db      	lsls	r3, r3, #11
 8005700:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005704:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005706:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800570a:	049b      	lsls	r3, r3, #18
 800570c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005710:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005712:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005714:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005718:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800571e:	78fb      	ldrb	r3, [r7, #3]
 8005720:	0159      	lsls	r1, r3, #5
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	440b      	add	r3, r1
 8005726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005730:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005732:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005736:	2b03      	cmp	r3, #3
 8005738:	d003      	beq.n	8005742 <USB_HC_Init+0x21a>
 800573a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800573e:	2b01      	cmp	r3, #1
 8005740:	d10f      	bne.n	8005762 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005742:	78fb      	ldrb	r3, [r7, #3]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	4413      	add	r3, r2
 800574a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	78fa      	ldrb	r2, [r7, #3]
 8005752:	0151      	lsls	r1, r2, #5
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	440a      	add	r2, r1
 8005758:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800575c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005760:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005762:	7ffb      	ldrb	r3, [r7, #31]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3720      	adds	r7, #32
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08c      	sub	sp, #48	; 0x30
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	4613      	mov	r3, r2
 8005778:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	785b      	ldrb	r3, [r3, #1]
 8005782:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005788:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005792:	2b00      	cmp	r3, #0
 8005794:	d02d      	beq.n	80057f2 <USB_HC_StartXfer+0x86>
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	791b      	ldrb	r3, [r3, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d129      	bne.n	80057f2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d117      	bne.n	80057d4 <USB_HC_StartXfer+0x68>
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	79db      	ldrb	r3, [r3, #7]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <USB_HC_StartXfer+0x48>
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	79db      	ldrb	r3, [r3, #7]
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d10f      	bne.n	80057d4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	6a3a      	ldr	r2, [r7, #32]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80057d4:	79fb      	ldrb	r3, [r7, #7]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10b      	bne.n	80057f2 <USB_HC_StartXfer+0x86>
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	795b      	ldrb	r3, [r3, #5]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d107      	bne.n	80057f2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	4619      	mov	r1, r3
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 fa0f 	bl	8005c0c <USB_DoPing>
      return HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	e0f8      	b.n	80059e4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d018      	beq.n	800582c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	8912      	ldrh	r2, [r2, #8]
 8005802:	4413      	add	r3, r2
 8005804:	3b01      	subs	r3, #1
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	8912      	ldrh	r2, [r2, #8]
 800580a:	fbb3 f3f2 	udiv	r3, r3, r2
 800580e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005810:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005812:	8b7b      	ldrh	r3, [r7, #26]
 8005814:	429a      	cmp	r2, r3
 8005816:	d90b      	bls.n	8005830 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005818:	8b7b      	ldrh	r3, [r7, #26]
 800581a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800581c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	8912      	ldrh	r2, [r2, #8]
 8005822:	fb03 f202 	mul.w	r2, r3, r2
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	611a      	str	r2, [r3, #16]
 800582a:	e001      	b.n	8005830 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800582c:	2301      	movs	r3, #1
 800582e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	78db      	ldrb	r3, [r3, #3]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d007      	beq.n	8005848 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005838:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	8912      	ldrh	r2, [r2, #8]
 800583e:	fb03 f202 	mul.w	r2, r3, r2
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	611a      	str	r2, [r3, #16]
 8005846:	e003      	b.n	8005850 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	695a      	ldr	r2, [r3, #20]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005858:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800585a:	04d9      	lsls	r1, r3, #19
 800585c:	4b63      	ldr	r3, [pc, #396]	; (80059ec <USB_HC_StartXfer+0x280>)
 800585e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005860:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	7a9b      	ldrb	r3, [r3, #10]
 8005866:	075b      	lsls	r3, r3, #29
 8005868:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800586c:	69f9      	ldr	r1, [r7, #28]
 800586e:	0148      	lsls	r0, r1, #5
 8005870:	6a39      	ldr	r1, [r7, #32]
 8005872:	4401      	add	r1, r0
 8005874:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005878:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800587a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800587c:	79fb      	ldrb	r3, [r7, #7]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	68d9      	ldr	r1, [r3, #12]
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	4413      	add	r3, r2
 800588e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005892:	460a      	mov	r2, r1
 8005894:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	bf0c      	ite	eq
 80058a6:	2301      	moveq	r3, #1
 80058a8:	2300      	movne	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69fa      	ldr	r2, [r7, #28]
 80058be:	0151      	lsls	r1, r2, #5
 80058c0:	6a3a      	ldr	r2, [r7, #32]
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80058cc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	7e7b      	ldrb	r3, [r7, #25]
 80058de:	075b      	lsls	r3, r3, #29
 80058e0:	69f9      	ldr	r1, [r7, #28]
 80058e2:	0148      	lsls	r0, r1, #5
 80058e4:	6a39      	ldr	r1, [r7, #32]
 80058e6:	4401      	add	r1, r0
 80058e8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80058ec:	4313      	orrs	r3, r2
 80058ee:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005906:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	78db      	ldrb	r3, [r3, #3]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d004      	beq.n	800591a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	e003      	b.n	8005922 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005920:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005928:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	4413      	add	r3, r2
 8005932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005936:	461a      	mov	r2, r3
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	e04e      	b.n	80059e4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	78db      	ldrb	r3, [r3, #3]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d149      	bne.n	80059e2 <USB_HC_StartXfer+0x276>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d045      	beq.n	80059e2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	79db      	ldrb	r3, [r3, #7]
 800595a:	2b03      	cmp	r3, #3
 800595c:	d830      	bhi.n	80059c0 <USB_HC_StartXfer+0x254>
 800595e:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <USB_HC_StartXfer+0x1f8>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	08005975 	.word	0x08005975
 8005968:	08005999 	.word	0x08005999
 800596c:	08005975 	.word	0x08005975
 8005970:	08005999 	.word	0x08005999
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	3303      	adds	r3, #3
 800597a:	089b      	lsrs	r3, r3, #2
 800597c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800597e:	8afa      	ldrh	r2, [r7, #22]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	b29b      	uxth	r3, r3
 8005986:	429a      	cmp	r2, r3
 8005988:	d91c      	bls.n	80059c4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f043 0220 	orr.w	r2, r3, #32
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	619a      	str	r2, [r3, #24]
        }
        break;
 8005996:	e015      	b.n	80059c4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	3303      	adds	r3, #3
 800599e:	089b      	lsrs	r3, r3, #2
 80059a0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80059a2:	8afa      	ldrh	r2, [r7, #22]
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d90a      	bls.n	80059c8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	619a      	str	r2, [r3, #24]
        }
        break;
 80059be:	e003      	b.n	80059c8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80059c0:	bf00      	nop
 80059c2:	e002      	b.n	80059ca <USB_HC_StartXfer+0x25e>
        break;
 80059c4:	bf00      	nop
 80059c6:	e000      	b.n	80059ca <USB_HC_StartXfer+0x25e>
        break;
 80059c8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	68d9      	ldr	r1, [r3, #12]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	785a      	ldrb	r2, [r3, #1]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2000      	movs	r0, #0
 80059da:	9000      	str	r0, [sp, #0]
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f7ff fb31 	bl	8005044 <USB_WritePacket>
  }

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3728      	adds	r7, #40	; 0x28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	1ff80000 	.word	0x1ff80000

080059f0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	b29b      	uxth	r3, r3
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b089      	sub	sp, #36	; 0x24
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005a22:	78fb      	ldrb	r3, [r7, #3]
 8005a24:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	0c9b      	lsrs	r3, r3, #18
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	0fdb      	lsrs	r3, r3, #31
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d104      	bne.n	8005a6c <USB_HC_Halt+0x5a>
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e0c8      	b.n	8005bfe <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <USB_HC_Halt+0x66>
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d163      	bne.n	8005b40 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	0151      	lsls	r1, r2, #5
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	440a      	add	r2, r1
 8005a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a96:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f040 80ab 	bne.w	8005bfc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d133      	bne.n	8005b1a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005acc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ad0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005af0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	3301      	adds	r3, #1
 8005af6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005afe:	d81d      	bhi.n	8005b3c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b16:	d0ec      	beq.n	8005af2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b18:	e070      	b.n	8005bfc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	0151      	lsls	r1, r2, #5
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	440a      	add	r2, r1
 8005b30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b38:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b3a:	e05f      	b.n	8005bfc <USB_HC_Halt+0x1ea>
            break;
 8005b3c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b3e:	e05d      	b.n	8005bfc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	0151      	lsls	r1, r2, #5
 8005b52:	69fa      	ldr	r2, [r7, #28]
 8005b54:	440a      	add	r2, r1
 8005b56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b5e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d133      	bne.n	8005bd8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b8e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	0151      	lsls	r1, r2, #5
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	440a      	add	r2, r1
 8005ba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bae:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bbc:	d81d      	bhi.n	8005bfa <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bd4:	d0ec      	beq.n	8005bb0 <USB_HC_Halt+0x19e>
 8005bd6:	e011      	b.n	8005bfc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	e000      	b.n	8005bfc <USB_HC_Halt+0x1ea>
          break;
 8005bfa:	bf00      	nop
    }
  }

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3724      	adds	r7, #36	; 0x24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
	...

08005c0c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005c1c:	78fb      	ldrb	r3, [r7, #3]
 8005c1e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005c20:	2301      	movs	r3, #1
 8005c22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	04da      	lsls	r2, r3, #19
 8005c28:	4b15      	ldr	r3, [pc, #84]	; (8005c80 <USB_DoPing+0x74>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	0151      	lsls	r1, r2, #5
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	440a      	add	r2, r1
 8005c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c3c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c54:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c5c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	015a      	lsls	r2, r3, #5
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	4413      	add	r3, r2
 8005c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	1ff80000 	.word	0x1ff80000

08005c84 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7ff f911 	bl	8004ec0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c9e:	2110      	movs	r1, #16
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff f96b 	bl	8004f7c <USB_FlushTxFifo>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7ff f997 	bl	8004fe4 <USB_FlushRxFifo>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61bb      	str	r3, [r7, #24]
 8005cc4:	e01f      	b.n	8005d06 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cdc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ce4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	3301      	adds	r3, #1
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	2b0f      	cmp	r3, #15
 8005d0a:	d9dc      	bls.n	8005cc6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	61bb      	str	r3, [r7, #24]
 8005d10:	e034      	b.n	8005d7c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d28:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d30:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d38:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d46:	461a      	mov	r2, r3
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d58:	d80c      	bhi.n	8005d74 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d70:	d0ec      	beq.n	8005d4c <USB_StopHost+0xc8>
 8005d72:	e000      	b.n	8005d76 <USB_StopHost+0xf2>
        break;
 8005d74:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	61bb      	str	r3, [r7, #24]
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	2b0f      	cmp	r3, #15
 8005d80:	d9c7      	bls.n	8005d12 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d88:	461a      	mov	r2, r3
 8005d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d8e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f04f 32ff 	mov.w	r2, #4294967295
 8005d96:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f7ff f880 	bl	8004e9e <USB_EnableGlobalInt>

  return ret;
 8005d9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3720      	adds	r7, #32
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005da8:	b590      	push	{r4, r7, lr}
 8005daa:	b089      	sub	sp, #36	; 0x24
 8005dac:	af04      	add	r7, sp, #16
 8005dae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005db0:	2301      	movs	r3, #1
 8005db2:	2202      	movs	r2, #2
 8005db4:	2102      	movs	r1, #2
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fc66 	bl	8006688 <USBH_FindInterface>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
 8005dc2:	2bff      	cmp	r3, #255	; 0xff
 8005dc4:	d002      	beq.n	8005dcc <USBH_CDC_InterfaceInit+0x24>
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d901      	bls.n	8005dd0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e13d      	b.n	800604c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fc3b 	bl	8006650 <USBH_SelectInterface>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005dde:	7bbb      	ldrb	r3, [r7, #14]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005de4:	2302      	movs	r3, #2
 8005de6:	e131      	b.n	800604c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005dee:	2050      	movs	r0, #80	; 0x50
 8005df0:	f002 fe96 	bl	8008b20 <malloc>
 8005df4:	4603      	mov	r3, r0
 8005df6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e11f      	b.n	800604c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005e0c:	2250      	movs	r2, #80	; 0x50
 8005e0e:	2100      	movs	r1, #0
 8005e10:	68b8      	ldr	r0, [r7, #8]
 8005e12:	f002 fe95 	bl	8008b40 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	211a      	movs	r1, #26
 8005e1c:	fb01 f303 	mul.w	r3, r1, r3
 8005e20:	4413      	add	r3, r2
 8005e22:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	b25b      	sxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	da15      	bge.n	8005e5a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	211a      	movs	r1, #26
 8005e34:	fb01 f303 	mul.w	r3, r1, r3
 8005e38:	4413      	add	r3, r2
 8005e3a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e3e:	781a      	ldrb	r2, [r3, #0]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	211a      	movs	r1, #26
 8005e4a:	fb01 f303 	mul.w	r3, r1, r3
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e54:	881a      	ldrh	r2, [r3, #0]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	785b      	ldrb	r3, [r3, #1]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f001 ff2c 	bl	8007cbe <USBH_AllocPipe>
 8005e66:	4603      	mov	r3, r0
 8005e68:	461a      	mov	r2, r3
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	7819      	ldrb	r1, [r3, #0]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	7858      	ldrb	r0, [r3, #1]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	8952      	ldrh	r2, [r2, #10]
 8005e86:	9202      	str	r2, [sp, #8]
 8005e88:	2203      	movs	r2, #3
 8005e8a:	9201      	str	r2, [sp, #4]
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	4623      	mov	r3, r4
 8005e90:	4602      	mov	r2, r0
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f001 fee4 	bl	8007c60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f002 f9f3 	bl	800828c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	210a      	movs	r1, #10
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fbeb 	bl	8006688 <USBH_FindInterface>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	2bff      	cmp	r3, #255	; 0xff
 8005eba:	d002      	beq.n	8005ec2 <USBH_CDC_InterfaceInit+0x11a>
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d901      	bls.n	8005ec6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e0c2      	b.n	800604c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	211a      	movs	r1, #26
 8005ecc:	fb01 f303 	mul.w	r3, r1, r3
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	b25b      	sxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	da16      	bge.n	8005f0c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ede:	7bfb      	ldrb	r3, [r7, #15]
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	211a      	movs	r1, #26
 8005ee4:	fb01 f303 	mul.w	r3, r1, r3
 8005ee8:	4413      	add	r3, r2
 8005eea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005eee:	781a      	ldrb	r2, [r3, #0]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	211a      	movs	r1, #26
 8005efa:	fb01 f303 	mul.w	r3, r1, r3
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f04:	881a      	ldrh	r2, [r3, #0]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	835a      	strh	r2, [r3, #26]
 8005f0a:	e015      	b.n	8005f38 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	211a      	movs	r1, #26
 8005f12:	fb01 f303 	mul.w	r3, r1, r3
 8005f16:	4413      	add	r3, r2
 8005f18:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005f1c:	781a      	ldrb	r2, [r3, #0]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	211a      	movs	r1, #26
 8005f28:	fb01 f303 	mul.w	r3, r1, r3
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f32:	881a      	ldrh	r2, [r3, #0]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	211a      	movs	r1, #26
 8005f3e:	fb01 f303 	mul.w	r3, r1, r3
 8005f42:	4413      	add	r3, r2
 8005f44:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	b25b      	sxtb	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	da16      	bge.n	8005f7e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	211a      	movs	r1, #26
 8005f56:	fb01 f303 	mul.w	r3, r1, r3
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f60:	781a      	ldrb	r2, [r3, #0]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	211a      	movs	r1, #26
 8005f6c:	fb01 f303 	mul.w	r3, r1, r3
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f76:	881a      	ldrh	r2, [r3, #0]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	835a      	strh	r2, [r3, #26]
 8005f7c:	e015      	b.n	8005faa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	211a      	movs	r1, #26
 8005f84:	fb01 f303 	mul.w	r3, r1, r3
 8005f88:	4413      	add	r3, r2
 8005f8a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f8e:	781a      	ldrb	r2, [r3, #0]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	211a      	movs	r1, #26
 8005f9a:	fb01 f303 	mul.w	r3, r1, r3
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005fa4:	881a      	ldrh	r2, [r3, #0]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	7b9b      	ldrb	r3, [r3, #14]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f001 fe84 	bl	8007cbe <USBH_AllocPipe>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	461a      	mov	r2, r3
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	7bdb      	ldrb	r3, [r3, #15]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f001 fe7a 	bl	8007cbe <USBH_AllocPipe>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	461a      	mov	r2, r3
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	7b59      	ldrb	r1, [r3, #13]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	7b98      	ldrb	r0, [r3, #14]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	8b12      	ldrh	r2, [r2, #24]
 8005fea:	9202      	str	r2, [sp, #8]
 8005fec:	2202      	movs	r2, #2
 8005fee:	9201      	str	r2, [sp, #4]
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	4623      	mov	r3, r4
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f001 fe32 	bl	8007c60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	7b19      	ldrb	r1, [r3, #12]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	7bd8      	ldrb	r0, [r3, #15]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	8b52      	ldrh	r2, [r2, #26]
 8006014:	9202      	str	r2, [sp, #8]
 8006016:	2202      	movs	r2, #2
 8006018:	9201      	str	r2, [sp, #4]
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	4623      	mov	r3, r4
 800601e:	4602      	mov	r2, r0
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 fe1d 	bl	8007c60 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	7b5b      	ldrb	r3, [r3, #13]
 8006032:	2200      	movs	r2, #0
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f002 f928 	bl	800828c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	7b1b      	ldrb	r3, [r3, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f002 f921 	bl	800828c <USBH_LL_SetToggle>

  return USBH_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	bd90      	pop	{r4, r7, pc}

08006054 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00e      	beq.n	800608c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	4619      	mov	r1, r3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f001 fe12 	bl	8007c9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	4619      	mov	r1, r3
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 fe3d 	bl	8007d00 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	7b1b      	ldrb	r3, [r3, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00e      	beq.n	80060b2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	7b1b      	ldrb	r3, [r3, #12]
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f001 fdff 	bl	8007c9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	7b1b      	ldrb	r3, [r3, #12]
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f001 fe2a 	bl	8007d00 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	7b5b      	ldrb	r3, [r3, #13]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00e      	beq.n	80060d8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	7b5b      	ldrb	r3, [r3, #13]
 80060be:	4619      	mov	r1, r3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f001 fdec 	bl	8007c9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	7b5b      	ldrb	r3, [r3, #13]
 80060ca:	4619      	mov	r1, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f001 fe17 	bl	8007d00 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00b      	beq.n	80060fc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f002 fd1f 	bl	8008b30 <free>
    phost->pActiveClass->pData = 0U;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060f8:	2200      	movs	r2, #0
 80060fa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3340      	adds	r3, #64	; 0x40
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f8b1 	bl	8006286 <GetLineCoding>
 8006124:	4603      	mov	r3, r0
 8006126:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006128:	7afb      	ldrb	r3, [r7, #11]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d105      	bne.n	800613a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006134:	2102      	movs	r1, #2
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800613a:	7afb      	ldrb	r3, [r7, #11]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800614c:	2301      	movs	r3, #1
 800614e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006164:	2b04      	cmp	r3, #4
 8006166:	d877      	bhi.n	8006258 <USBH_CDC_Process+0x114>
 8006168:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <USBH_CDC_Process+0x2c>)
 800616a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616e:	bf00      	nop
 8006170:	08006185 	.word	0x08006185
 8006174:	0800618b 	.word	0x0800618b
 8006178:	080061bb 	.word	0x080061bb
 800617c:	0800622f 	.word	0x0800622f
 8006180:	0800623d 	.word	0x0800623d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	73fb      	strb	r3, [r7, #15]
      break;
 8006188:	e06d      	b.n	8006266 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800618e:	4619      	mov	r1, r3
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f897 	bl	80062c4 <SetLineCoding>
 8006196:	4603      	mov	r3, r0
 8006198:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800619a:	7bbb      	ldrb	r3, [r7, #14]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d104      	bne.n	80061aa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80061a8:	e058      	b.n	800625c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80061aa:	7bbb      	ldrb	r3, [r7, #14]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d055      	beq.n	800625c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2204      	movs	r2, #4
 80061b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80061b8:	e050      	b.n	800625c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	3340      	adds	r3, #64	; 0x40
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f860 	bl	8006286 <GetLineCoding>
 80061c6:	4603      	mov	r3, r0
 80061c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80061ca:	7bbb      	ldrb	r3, [r7, #14]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d126      	bne.n	800621e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e2:	791b      	ldrb	r3, [r3, #4]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d13b      	bne.n	8006260 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d133      	bne.n	8006260 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006202:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006204:	429a      	cmp	r2, r3
 8006206:	d12b      	bne.n	8006260 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006210:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006212:	429a      	cmp	r2, r3
 8006214:	d124      	bne.n	8006260 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f958 	bl	80064cc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800621c:	e020      	b.n	8006260 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d01d      	beq.n	8006260 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2204      	movs	r2, #4
 8006228:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800622c:	e018      	b.n	8006260 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f867 	bl	8006302 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f8da 	bl	80063ee <CDC_ProcessReception>
      break;
 800623a:	e014      	b.n	8006266 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800623c:	2100      	movs	r1, #0
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 ffef 	bl	8007222 <USBH_ClrFeature>
 8006244:	4603      	mov	r3, r0
 8006246:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006248:	7bbb      	ldrb	r3, [r7, #14]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10a      	bne.n	8006264 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006256:	e005      	b.n	8006264 <USBH_CDC_Process+0x120>

    default:
      break;
 8006258:	bf00      	nop
 800625a:	e004      	b.n	8006266 <USBH_CDC_Process+0x122>
      break;
 800625c:	bf00      	nop
 800625e:	e002      	b.n	8006266 <USBH_CDC_Process+0x122>
      break;
 8006260:	bf00      	nop
 8006262:	e000      	b.n	8006266 <USBH_CDC_Process+0x122>
      break;
 8006264:	bf00      	nop

  }

  return status;
 8006266:	7bfb      	ldrb	r3, [r7, #15]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b082      	sub	sp, #8
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	22a1      	movs	r2, #161	; 0xa1
 8006294:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2221      	movs	r2, #33	; 0x21
 800629a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2207      	movs	r2, #7
 80062ac:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	2207      	movs	r2, #7
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f001 fa81 	bl	80077bc <USBH_CtlReq>
 80062ba:	4603      	mov	r3, r0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2221      	movs	r2, #33	; 0x21
 80062d2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2207      	movs	r2, #7
 80062ea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2207      	movs	r2, #7
 80062f0:	4619      	mov	r1, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f001 fa62 	bl	80077bc <USBH_CtlReq>
 80062f8:	4603      	mov	r3, r0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b086      	sub	sp, #24
 8006306:	af02      	add	r7, sp, #8
 8006308:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006314:	2300      	movs	r3, #0
 8006316:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800631e:	2b01      	cmp	r3, #1
 8006320:	d002      	beq.n	8006328 <CDC_ProcessTransmission+0x26>
 8006322:	2b02      	cmp	r3, #2
 8006324:	d023      	beq.n	800636e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006326:	e05e      	b.n	80063e6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	8b12      	ldrh	r2, [r2, #24]
 8006330:	4293      	cmp	r3, r2
 8006332:	d90b      	bls.n	800634c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	69d9      	ldr	r1, [r3, #28]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8b1a      	ldrh	r2, [r3, #24]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	7b5b      	ldrb	r3, [r3, #13]
 8006340:	2001      	movs	r0, #1
 8006342:	9000      	str	r0, [sp, #0]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f001 fc48 	bl	8007bda <USBH_BulkSendData>
 800634a:	e00b      	b.n	8006364 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	7b5b      	ldrb	r3, [r3, #13]
 800635a:	2001      	movs	r0, #1
 800635c:	9000      	str	r0, [sp, #0]
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f001 fc3b 	bl	8007bda <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800636c:	e03b      	b.n	80063e6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	7b5b      	ldrb	r3, [r3, #13]
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 ff5f 	bl	8008238 <USBH_LL_GetURBState>
 800637a:	4603      	mov	r3, r0
 800637c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800637e:	7afb      	ldrb	r3, [r7, #11]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d128      	bne.n	80063d6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	8b12      	ldrh	r2, [r2, #24]
 800638c:	4293      	cmp	r3, r2
 800638e:	d90e      	bls.n	80063ae <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	8b12      	ldrh	r2, [r2, #24]
 8006398:	1a9a      	subs	r2, r3, r2
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	8b12      	ldrh	r2, [r2, #24]
 80063a6:	441a      	add	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	61da      	str	r2, [r3, #28]
 80063ac:	e002      	b.n	80063b4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d004      	beq.n	80063c6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063c4:	e00e      	b.n	80063e4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f868 	bl	80064a4 <USBH_CDC_TransmitCallback>
      break;
 80063d4:	e006      	b.n	80063e4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80063d6:	7afb      	ldrb	r3, [r7, #11]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d103      	bne.n	80063e4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063e4:	bf00      	nop
  }
}
 80063e6:	bf00      	nop
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b086      	sub	sp, #24
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006400:	2300      	movs	r3, #0
 8006402:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800640a:	2b03      	cmp	r3, #3
 800640c:	d002      	beq.n	8006414 <CDC_ProcessReception+0x26>
 800640e:	2b04      	cmp	r3, #4
 8006410:	d00e      	beq.n	8006430 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006412:	e043      	b.n	800649c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	6a19      	ldr	r1, [r3, #32]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	8b5a      	ldrh	r2, [r3, #26]
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	7b1b      	ldrb	r3, [r3, #12]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 fbff 	bl	8007c24 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2204      	movs	r2, #4
 800642a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800642e:	e035      	b.n	800649c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	7b1b      	ldrb	r3, [r3, #12]
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 fefe 	bl	8008238 <USBH_LL_GetURBState>
 800643c:	4603      	mov	r3, r0
 800643e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006440:	7cfb      	ldrb	r3, [r7, #19]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d129      	bne.n	800649a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	7b1b      	ldrb	r3, [r3, #12]
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f001 fe61 	bl	8008114 <USBH_LL_GetLastXferSize>
 8006452:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	429a      	cmp	r2, r3
 800645c:	d016      	beq.n	800648c <CDC_ProcessReception+0x9e>
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	8b5b      	ldrh	r3, [r3, #26]
 8006462:	461a      	mov	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4293      	cmp	r3, r2
 8006468:	d910      	bls.n	800648c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	1ad2      	subs	r2, r2, r3
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	6a1a      	ldr	r2, [r3, #32]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	441a      	add	r2, r3
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2203      	movs	r2, #3
 8006486:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800648a:	e006      	b.n	800649a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f80f 	bl	80064b8 <USBH_CDC_ReceiveCallback>
      break;
 800649a:	bf00      	nop
  }
}
 800649c:	bf00      	nop
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	4613      	mov	r3, r2
 80064ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80064f4:	2302      	movs	r3, #2
 80064f6:	e029      	b.n	800654c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	79fa      	ldrb	r2, [r7, #7]
 80064fc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f81f 	bl	8006554 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f001 fd31 	bl	8007fac <USBH_LL_Init>

  return USBH_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006560:	2300      	movs	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	e009      	b.n	800657a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	33e0      	adds	r3, #224	; 0xe0
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	2200      	movs	r2, #0
 8006572:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	3301      	adds	r3, #1
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2b0f      	cmp	r3, #15
 800657e:	d9f2      	bls.n	8006566 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	e009      	b.n	800659a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006590:	2200      	movs	r2, #0
 8006592:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	3301      	adds	r3, #1
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a0:	d3f1      	bcc.n	8006586 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2240      	movs	r2, #64	; 0x40
 80065c6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d016      	beq.n	800663e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10e      	bne.n	8006638 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006620:	1c59      	adds	r1, r3, #1
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	33de      	adds	r3, #222	; 0xde
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	73fb      	strb	r3, [r7, #15]
 8006636:	e004      	b.n	8006642 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006638:	2302      	movs	r3, #2
 800663a:	73fb      	strb	r3, [r7, #15]
 800663c:	e001      	b.n	8006642 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800663e:	2302      	movs	r3, #2
 8006640:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006642:	7bfb      	ldrb	r3, [r7, #15]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	460b      	mov	r3, r1
 800665a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006666:	78fa      	ldrb	r2, [r7, #3]
 8006668:	429a      	cmp	r2, r3
 800666a:	d204      	bcs.n	8006676 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	78fa      	ldrb	r2, [r7, #3]
 8006670:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006674:	e001      	b.n	800667a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006676:	2302      	movs	r3, #2
 8006678:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800667a:	7bfb      	ldrb	r3, [r7, #15]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	4608      	mov	r0, r1
 8006692:	4611      	mov	r1, r2
 8006694:	461a      	mov	r2, r3
 8006696:	4603      	mov	r3, r0
 8006698:	70fb      	strb	r3, [r7, #3]
 800669a:	460b      	mov	r3, r1
 800669c:	70bb      	strb	r3, [r7, #2]
 800669e:	4613      	mov	r3, r2
 80066a0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80066a6:	2300      	movs	r3, #0
 80066a8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80066b0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80066b2:	e025      	b.n	8006700 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
 80066b6:	221a      	movs	r2, #26
 80066b8:	fb02 f303 	mul.w	r3, r2, r3
 80066bc:	3308      	adds	r3, #8
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	4413      	add	r3, r2
 80066c2:	3302      	adds	r3, #2
 80066c4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	795b      	ldrb	r3, [r3, #5]
 80066ca:	78fa      	ldrb	r2, [r7, #3]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d002      	beq.n	80066d6 <USBH_FindInterface+0x4e>
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	2bff      	cmp	r3, #255	; 0xff
 80066d4:	d111      	bne.n	80066fa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80066da:	78ba      	ldrb	r2, [r7, #2]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d002      	beq.n	80066e6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066e0:	78bb      	ldrb	r3, [r7, #2]
 80066e2:	2bff      	cmp	r3, #255	; 0xff
 80066e4:	d109      	bne.n	80066fa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066ea:	787a      	ldrb	r2, [r7, #1]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d002      	beq.n	80066f6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80066f0:	787b      	ldrb	r3, [r7, #1]
 80066f2:	2bff      	cmp	r3, #255	; 0xff
 80066f4:	d101      	bne.n	80066fa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80066f6:	7dfb      	ldrb	r3, [r7, #23]
 80066f8:	e006      	b.n	8006708 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
 80066fc:	3301      	adds	r3, #1
 80066fe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006700:	7dfb      	ldrb	r3, [r7, #23]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d9d6      	bls.n	80066b4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006706:	23ff      	movs	r3, #255	; 0xff
}
 8006708:	4618      	mov	r0, r3
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f001 fc81 	bl	8008024 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006722:	2101      	movs	r1, #1
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f001 fd9a 	bl	800825e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b088      	sub	sp, #32
 8006738:	af04      	add	r7, sp, #16
 800673a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800673c:	2302      	movs	r3, #2
 800673e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b01      	cmp	r3, #1
 800674e:	d102      	bne.n	8006756 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2203      	movs	r2, #3
 8006754:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b0b      	cmp	r3, #11
 800675e:	f200 81be 	bhi.w	8006ade <USBH_Process+0x3aa>
 8006762:	a201      	add	r2, pc, #4	; (adr r2, 8006768 <USBH_Process+0x34>)
 8006764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006768:	08006799 	.word	0x08006799
 800676c:	080067cb 	.word	0x080067cb
 8006770:	08006833 	.word	0x08006833
 8006774:	08006a79 	.word	0x08006a79
 8006778:	08006adf 	.word	0x08006adf
 800677c:	080068d7 	.word	0x080068d7
 8006780:	08006a1f 	.word	0x08006a1f
 8006784:	0800690d 	.word	0x0800690d
 8006788:	0800692d 	.word	0x0800692d
 800678c:	0800694d 	.word	0x0800694d
 8006790:	08006991 	.word	0x08006991
 8006794:	08006a61 	.word	0x08006a61
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 819e 	beq.w	8006ae2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80067ac:	20c8      	movs	r0, #200	; 0xc8
 80067ae:	f001 fd9d 	bl	80082ec <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 fc93 	bl	80080de <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80067c8:	e18b      	b.n	8006ae2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d107      	bne.n	80067e4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80067e2:	e18d      	b.n	8006b00 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80067ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067ee:	d914      	bls.n	800681a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80067f6:	3301      	adds	r3, #1
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006806:	2b03      	cmp	r3, #3
 8006808:	d903      	bls.n	8006812 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	220d      	movs	r2, #13
 800680e:	701a      	strb	r2, [r3, #0]
      break;
 8006810:	e176      	b.n	8006b00 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	701a      	strb	r2, [r3, #0]
      break;
 8006818:	e172      	b.n	8006b00 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006820:	f103 020a 	add.w	r2, r3, #10
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800682a:	200a      	movs	r0, #10
 800682c:	f001 fd5e 	bl	80082ec <USBH_Delay>
      break;
 8006830:	e166      	b.n	8006b00 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006838:	2b00      	cmp	r3, #0
 800683a:	d005      	beq.n	8006848 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006842:	2104      	movs	r1, #4
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006848:	2064      	movs	r0, #100	; 0x64
 800684a:	f001 fd4f 	bl	80082ec <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f001 fc1e 	bl	8008090 <USBH_LL_GetSpeed>
 8006854:	4603      	mov	r3, r0
 8006856:	461a      	mov	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2205      	movs	r2, #5
 8006862:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006864:	2100      	movs	r1, #0
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 fa29 	bl	8007cbe <USBH_AllocPipe>
 800686c:	4603      	mov	r3, r0
 800686e:	461a      	mov	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006874:	2180      	movs	r1, #128	; 0x80
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 fa21 	bl	8007cbe <USBH_AllocPipe>
 800687c:	4603      	mov	r3, r0
 800687e:	461a      	mov	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	7919      	ldrb	r1, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006898:	b292      	uxth	r2, r2
 800689a:	9202      	str	r2, [sp, #8]
 800689c:	2200      	movs	r2, #0
 800689e:	9201      	str	r2, [sp, #4]
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	4603      	mov	r3, r0
 80068a4:	2280      	movs	r2, #128	; 0x80
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f001 f9da 	bl	8007c60 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	7959      	ldrb	r1, [r3, #5]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80068c0:	b292      	uxth	r2, r2
 80068c2:	9202      	str	r2, [sp, #8]
 80068c4:	2200      	movs	r2, #0
 80068c6:	9201      	str	r2, [sp, #4]
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	4603      	mov	r3, r0
 80068cc:	2200      	movs	r2, #0
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f001 f9c6 	bl	8007c60 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068d4:	e114      	b.n	8006b00 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f918 	bl	8006b0c <USBH_HandleEnum>
 80068dc:	4603      	mov	r3, r0
 80068de:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80068e0:	7bbb      	ldrb	r3, [r7, #14]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f040 80fe 	bne.w	8006ae6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d103      	bne.n	8006904 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2208      	movs	r2, #8
 8006900:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006902:	e0f0      	b.n	8006ae6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2207      	movs	r2, #7
 8006908:	701a      	strb	r2, [r3, #0]
      break;
 800690a:	e0ec      	b.n	8006ae6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 80e9 	beq.w	8006aea <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800691e:	2101      	movs	r1, #1
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2208      	movs	r2, #8
 8006928:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800692a:	e0de      	b.n	8006aea <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006932:	b29b      	uxth	r3, r3
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fc2c 	bl	8007194 <USBH_SetCfg>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	f040 80d5 	bne.w	8006aee <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2209      	movs	r2, #9
 8006948:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800694a:	e0d0      	b.n	8006aee <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b00      	cmp	r3, #0
 8006958:	d016      	beq.n	8006988 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800695a:	2101      	movs	r1, #1
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fc3c 	bl	80071da <USBH_SetFeature>
 8006962:	4603      	mov	r3, r0
 8006964:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006966:	7bbb      	ldrb	r3, [r7, #14]
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d103      	bne.n	8006976 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	220a      	movs	r2, #10
 8006972:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006974:	e0bd      	b.n	8006af2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b03      	cmp	r3, #3
 800697c:	f040 80b9 	bne.w	8006af2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	220a      	movs	r2, #10
 8006984:	701a      	strb	r2, [r3, #0]
      break;
 8006986:	e0b4      	b.n	8006af2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	220a      	movs	r2, #10
 800698c:	701a      	strb	r2, [r3, #0]
      break;
 800698e:	e0b0      	b.n	8006af2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 80ad 	beq.w	8006af6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80069a4:	2300      	movs	r3, #0
 80069a6:	73fb      	strb	r3, [r7, #15]
 80069a8:	e016      	b.n	80069d8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80069aa:	7bfa      	ldrb	r2, [r7, #15]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	32de      	adds	r2, #222	; 0xde
 80069b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b4:	791a      	ldrb	r2, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80069bc:	429a      	cmp	r2, r3
 80069be:	d108      	bne.n	80069d2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80069c0:	7bfa      	ldrb	r2, [r7, #15]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	32de      	adds	r2, #222	; 0xde
 80069c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80069d0:	e005      	b.n	80069de <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	3301      	adds	r3, #1
 80069d6:	73fb      	strb	r3, [r7, #15]
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0e5      	beq.n	80069aa <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d016      	beq.n	8006a16 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	4798      	blx	r3
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d109      	bne.n	8006a0e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2206      	movs	r2, #6
 80069fe:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a06:	2103      	movs	r1, #3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a0c:	e073      	b.n	8006af6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	220d      	movs	r2, #13
 8006a12:	701a      	strb	r2, [r3, #0]
      break;
 8006a14:	e06f      	b.n	8006af6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	220d      	movs	r2, #13
 8006a1a:	701a      	strb	r2, [r3, #0]
      break;
 8006a1c:	e06b      	b.n	8006af6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d017      	beq.n	8006a58 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	4798      	blx	r3
 8006a34:	4603      	mov	r3, r0
 8006a36:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a38:	7bbb      	ldrb	r3, [r7, #14]
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d103      	bne.n	8006a48 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	220b      	movs	r2, #11
 8006a44:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a46:	e058      	b.n	8006afa <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006a48:	7bbb      	ldrb	r3, [r7, #14]
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d154      	bne.n	8006afa <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	220d      	movs	r2, #13
 8006a54:	701a      	strb	r2, [r3, #0]
      break;
 8006a56:	e050      	b.n	8006afa <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	220d      	movs	r2, #13
 8006a5c:	701a      	strb	r2, [r3, #0]
      break;
 8006a5e:	e04c      	b.n	8006afa <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d049      	beq.n	8006afe <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	4798      	blx	r3
      }
      break;
 8006a76:	e042      	b.n	8006afe <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff fd67 	bl	8006554 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d009      	beq.n	8006aa4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d005      	beq.n	8006aba <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ab4:	2105      	movs	r1, #5
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d107      	bne.n	8006ad6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff fe20 	bl	8006714 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ad4:	e014      	b.n	8006b00 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 faa4 	bl	8008024 <USBH_LL_Start>
      break;
 8006adc:	e010      	b.n	8006b00 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006ade:	bf00      	nop
 8006ae0:	e00e      	b.n	8006b00 <USBH_Process+0x3cc>
      break;
 8006ae2:	bf00      	nop
 8006ae4:	e00c      	b.n	8006b00 <USBH_Process+0x3cc>
      break;
 8006ae6:	bf00      	nop
 8006ae8:	e00a      	b.n	8006b00 <USBH_Process+0x3cc>
    break;
 8006aea:	bf00      	nop
 8006aec:	e008      	b.n	8006b00 <USBH_Process+0x3cc>
      break;
 8006aee:	bf00      	nop
 8006af0:	e006      	b.n	8006b00 <USBH_Process+0x3cc>
      break;
 8006af2:	bf00      	nop
 8006af4:	e004      	b.n	8006b00 <USBH_Process+0x3cc>
      break;
 8006af6:	bf00      	nop
 8006af8:	e002      	b.n	8006b00 <USBH_Process+0x3cc>
      break;
 8006afa:	bf00      	nop
 8006afc:	e000      	b.n	8006b00 <USBH_Process+0x3cc>
      break;
 8006afe:	bf00      	nop
  }
  return USBH_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop

08006b0c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b088      	sub	sp, #32
 8006b10:	af04      	add	r7, sp, #16
 8006b12:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006b14:	2301      	movs	r3, #1
 8006b16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	785b      	ldrb	r3, [r3, #1]
 8006b20:	2b07      	cmp	r3, #7
 8006b22:	f200 81c1 	bhi.w	8006ea8 <USBH_HandleEnum+0x39c>
 8006b26:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <USBH_HandleEnum+0x20>)
 8006b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2c:	08006b4d 	.word	0x08006b4d
 8006b30:	08006c0b 	.word	0x08006c0b
 8006b34:	08006c75 	.word	0x08006c75
 8006b38:	08006d03 	.word	0x08006d03
 8006b3c:	08006d6d 	.word	0x08006d6d
 8006b40:	08006ddd 	.word	0x08006ddd
 8006b44:	08006e23 	.word	0x08006e23
 8006b48:	08006e69 	.word	0x08006e69
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006b4c:	2108      	movs	r1, #8
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fa50 	bl	8006ff4 <USBH_Get_DevDesc>
 8006b54:	4603      	mov	r3, r0
 8006b56:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b58:	7bbb      	ldrb	r3, [r7, #14]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d130      	bne.n	8006bc0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	7919      	ldrb	r1, [r3, #4]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b82:	b292      	uxth	r2, r2
 8006b84:	9202      	str	r2, [sp, #8]
 8006b86:	2200      	movs	r2, #0
 8006b88:	9201      	str	r2, [sp, #4]
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2280      	movs	r2, #128	; 0x80
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f001 f865 	bl	8007c60 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	7959      	ldrb	r1, [r3, #5]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006baa:	b292      	uxth	r2, r2
 8006bac:	9202      	str	r2, [sp, #8]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	9201      	str	r2, [sp, #4]
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f001 f851 	bl	8007c60 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006bbe:	e175      	b.n	8006eac <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bc0:	7bbb      	ldrb	r3, [r7, #14]
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	f040 8172 	bne.w	8006eac <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bce:	3301      	adds	r3, #1
 8006bd0:	b2da      	uxtb	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d903      	bls.n	8006bea <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	220d      	movs	r2, #13
 8006be6:	701a      	strb	r2, [r3, #0]
      break;
 8006be8:	e160      	b.n	8006eac <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	795b      	ldrb	r3, [r3, #5]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 f885 	bl	8007d00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	791b      	ldrb	r3, [r3, #4]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 f87f 	bl	8007d00 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	701a      	strb	r2, [r3, #0]
      break;
 8006c08:	e150      	b.n	8006eac <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006c0a:	2112      	movs	r1, #18
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f9f1 	bl	8006ff4 <USBH_Get_DevDesc>
 8006c12:	4603      	mov	r3, r0
 8006c14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d103      	bne.n	8006c24 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006c22:	e145      	b.n	8006eb0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	f040 8142 	bne.w	8006eb0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c32:	3301      	adds	r3, #1
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d903      	bls.n	8006c4e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	220d      	movs	r2, #13
 8006c4a:	701a      	strb	r2, [r3, #0]
      break;
 8006c4c:	e130      	b.n	8006eb0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	795b      	ldrb	r3, [r3, #5]
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 f853 	bl	8007d00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	791b      	ldrb	r3, [r3, #4]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f001 f84d 	bl	8007d00 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	701a      	strb	r2, [r3, #0]
      break;
 8006c72:	e11d      	b.n	8006eb0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006c74:	2101      	movs	r1, #1
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fa68 	bl	800714c <USBH_SetAddress>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c80:	7bbb      	ldrb	r3, [r7, #14]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d132      	bne.n	8006cec <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006c86:	2002      	movs	r0, #2
 8006c88:	f001 fb30 	bl	80082ec <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2203      	movs	r2, #3
 8006c98:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	7919      	ldrb	r1, [r3, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006cae:	b292      	uxth	r2, r2
 8006cb0:	9202      	str	r2, [sp, #8]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	9201      	str	r2, [sp, #4]
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2280      	movs	r2, #128	; 0x80
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 ffcf 	bl	8007c60 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	7959      	ldrb	r1, [r3, #5]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cd6:	b292      	uxth	r2, r2
 8006cd8:	9202      	str	r2, [sp, #8]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	9201      	str	r2, [sp, #4]
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 ffbb 	bl	8007c60 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006cea:	e0e3      	b.n	8006eb4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cec:	7bbb      	ldrb	r3, [r7, #14]
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	f040 80e0 	bne.w	8006eb4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	220d      	movs	r2, #13
 8006cf8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	705a      	strb	r2, [r3, #1]
      break;
 8006d00:	e0d8      	b.n	8006eb4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006d02:	2109      	movs	r1, #9
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f99d 	bl	8007044 <USBH_Get_CfgDesc>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d0e:	7bbb      	ldrb	r3, [r7, #14]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d103      	bne.n	8006d1c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2204      	movs	r2, #4
 8006d18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d1a:	e0cd      	b.n	8006eb8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	2b03      	cmp	r3, #3
 8006d20:	f040 80ca 	bne.w	8006eb8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d903      	bls.n	8006d46 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	220d      	movs	r2, #13
 8006d42:	701a      	strb	r2, [r3, #0]
      break;
 8006d44:	e0b8      	b.n	8006eb8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	795b      	ldrb	r3, [r3, #5]
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 ffd7 	bl	8007d00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	791b      	ldrb	r3, [r3, #4]
 8006d56:	4619      	mov	r1, r3
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 ffd1 	bl	8007d00 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	701a      	strb	r2, [r3, #0]
      break;
 8006d6a:	e0a5      	b.n	8006eb8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f965 	bl	8007044 <USBH_Get_CfgDesc>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d103      	bne.n	8006d8c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2205      	movs	r2, #5
 8006d88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d8a:	e097      	b.n	8006ebc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	f040 8094 	bne.w	8006ebc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d903      	bls.n	8006db6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	220d      	movs	r2, #13
 8006db2:	701a      	strb	r2, [r3, #0]
      break;
 8006db4:	e082      	b.n	8006ebc <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	795b      	ldrb	r3, [r3, #5]
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 ff9f 	bl	8007d00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	791b      	ldrb	r3, [r3, #4]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 ff99 	bl	8007d00 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	701a      	strb	r2, [r3, #0]
      break;
 8006dda:	e06f      	b.n	8006ebc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d019      	beq.n	8006e1a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006df2:	23ff      	movs	r3, #255	; 0xff
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f949 	bl	800708c <USBH_Get_StringDesc>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d103      	bne.n	8006e0c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2206      	movs	r2, #6
 8006e08:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e0a:	e059      	b.n	8006ec0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d156      	bne.n	8006ec0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2206      	movs	r2, #6
 8006e16:	705a      	strb	r2, [r3, #1]
      break;
 8006e18:	e052      	b.n	8006ec0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2206      	movs	r2, #6
 8006e1e:	705a      	strb	r2, [r3, #1]
      break;
 8006e20:	e04e      	b.n	8006ec0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d019      	beq.n	8006e60 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e38:	23ff      	movs	r3, #255	; 0xff
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f926 	bl	800708c <USBH_Get_StringDesc>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e44:	7bbb      	ldrb	r3, [r7, #14]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d103      	bne.n	8006e52 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2207      	movs	r2, #7
 8006e4e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e50:	e038      	b.n	8006ec4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e52:	7bbb      	ldrb	r3, [r7, #14]
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d135      	bne.n	8006ec4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2207      	movs	r2, #7
 8006e5c:	705a      	strb	r2, [r3, #1]
      break;
 8006e5e:	e031      	b.n	8006ec4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2207      	movs	r2, #7
 8006e64:	705a      	strb	r2, [r3, #1]
      break;
 8006e66:	e02d      	b.n	8006ec4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d017      	beq.n	8006ea2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006e7e:	23ff      	movs	r3, #255	; 0xff
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f903 	bl	800708c <USBH_Get_StringDesc>
 8006e86:	4603      	mov	r3, r0
 8006e88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e8a:	7bbb      	ldrb	r3, [r7, #14]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006e94:	e018      	b.n	8006ec8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e96:	7bbb      	ldrb	r3, [r7, #14]
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	d115      	bne.n	8006ec8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea0:	e012      	b.n	8006ec8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ea6:	e00f      	b.n	8006ec8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006ea8:	bf00      	nop
 8006eaa:	e00e      	b.n	8006eca <USBH_HandleEnum+0x3be>
      break;
 8006eac:	bf00      	nop
 8006eae:	e00c      	b.n	8006eca <USBH_HandleEnum+0x3be>
      break;
 8006eb0:	bf00      	nop
 8006eb2:	e00a      	b.n	8006eca <USBH_HandleEnum+0x3be>
      break;
 8006eb4:	bf00      	nop
 8006eb6:	e008      	b.n	8006eca <USBH_HandleEnum+0x3be>
      break;
 8006eb8:	bf00      	nop
 8006eba:	e006      	b.n	8006eca <USBH_HandleEnum+0x3be>
      break;
 8006ebc:	bf00      	nop
 8006ebe:	e004      	b.n	8006eca <USBH_HandleEnum+0x3be>
      break;
 8006ec0:	bf00      	nop
 8006ec2:	e002      	b.n	8006eca <USBH_HandleEnum+0x3be>
      break;
 8006ec4:	bf00      	nop
 8006ec6:	e000      	b.n	8006eca <USBH_HandleEnum+0x3be>
      break;
 8006ec8:	bf00      	nop
  }
  return Status;
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006ee6:	bf00      	nop
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b082      	sub	sp, #8
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f804 	bl	8006f16 <USBH_HandleSof>
}
 8006f0e:	bf00      	nop
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b082      	sub	sp, #8
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b0b      	cmp	r3, #11
 8006f26:	d10a      	bne.n	8006f3e <USBH_HandleSof+0x28>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d005      	beq.n	8006f3e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	4798      	blx	r3
  }
}
 8006f3e:	bf00      	nop
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006f56:	bf00      	nop
}
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006f72:	bf00      	nop
}
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b083      	sub	sp, #12
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f001 f844 	bl	800805a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	791b      	ldrb	r3, [r3, #4]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fe91 	bl	8007d00 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	795b      	ldrb	r3, [r3, #5]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fe8b 	bl	8007d00 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007006:	78fb      	ldrb	r3, [r7, #3]
 8007008:	b29b      	uxth	r3, r3
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007012:	2100      	movs	r1, #0
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f864 	bl	80070e2 <USBH_GetDescriptor>
 800701a:	4603      	mov	r3, r0
 800701c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800701e:	7bfb      	ldrb	r3, [r7, #15]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10a      	bne.n	800703a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f203 3026 	addw	r0, r3, #806	; 0x326
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007030:	78fa      	ldrb	r2, [r7, #3]
 8007032:	b292      	uxth	r2, r2
 8007034:	4619      	mov	r1, r3
 8007036:	f000 f918 	bl	800726a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800703a:	7bfb      	ldrb	r3, [r7, #15]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af02      	add	r7, sp, #8
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	331c      	adds	r3, #28
 8007054:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007056:	887b      	ldrh	r3, [r7, #2]
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007060:	2100      	movs	r1, #0
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f83d 	bl	80070e2 <USBH_GetDescriptor>
 8007068:	4603      	mov	r3, r0
 800706a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d107      	bne.n	8007082 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007072:	887b      	ldrh	r3, [r7, #2]
 8007074:	461a      	mov	r2, r3
 8007076:	68b9      	ldr	r1, [r7, #8]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f987 	bl	800738c <USBH_ParseCfgDesc>
 800707e:	4603      	mov	r3, r0
 8007080:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007082:	7bfb      	ldrb	r3, [r7, #15]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af02      	add	r7, sp, #8
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	607a      	str	r2, [r7, #4]
 8007096:	461a      	mov	r2, r3
 8007098:	460b      	mov	r3, r1
 800709a:	72fb      	strb	r3, [r7, #11]
 800709c:	4613      	mov	r3, r2
 800709e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80070a0:	7afb      	ldrb	r3, [r7, #11]
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80070a8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80070b0:	893b      	ldrh	r3, [r7, #8]
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	460b      	mov	r3, r1
 80070b6:	2100      	movs	r1, #0
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 f812 	bl	80070e2 <USBH_GetDescriptor>
 80070be:	4603      	mov	r3, r0
 80070c0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80070c2:	7dfb      	ldrb	r3, [r7, #23]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d107      	bne.n	80070d8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070ce:	893a      	ldrh	r2, [r7, #8]
 80070d0:	6879      	ldr	r1, [r7, #4]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 fb24 	bl	8007720 <USBH_ParseStringDesc>
  }

  return status;
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	60f8      	str	r0, [r7, #12]
 80070ea:	607b      	str	r3, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	72fb      	strb	r3, [r7, #11]
 80070f0:	4613      	mov	r3, r2
 80070f2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	789b      	ldrb	r3, [r3, #2]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d11c      	bne.n	8007136 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80070fc:	7afb      	ldrb	r3, [r7, #11]
 80070fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007102:	b2da      	uxtb	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2206      	movs	r2, #6
 800710c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	893a      	ldrh	r2, [r7, #8]
 8007112:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007114:	893b      	ldrh	r3, [r7, #8]
 8007116:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800711a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800711e:	d104      	bne.n	800712a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f240 4209 	movw	r2, #1033	; 0x409
 8007126:	829a      	strh	r2, [r3, #20]
 8007128:	e002      	b.n	8007130 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	8b3a      	ldrh	r2, [r7, #24]
 8007134:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007136:	8b3b      	ldrh	r3, [r7, #24]
 8007138:	461a      	mov	r2, r3
 800713a:	6879      	ldr	r1, [r7, #4]
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 fb3d 	bl	80077bc <USBH_CtlReq>
 8007142:	4603      	mov	r3, r0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	789b      	ldrb	r3, [r3, #2]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d10f      	bne.n	8007180 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2205      	movs	r2, #5
 800716a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800716c:	78fb      	ldrb	r3, [r7, #3]
 800716e:	b29a      	uxth	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007180:	2200      	movs	r2, #0
 8007182:	2100      	movs	r1, #0
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fb19 	bl	80077bc <USBH_CtlReq>
 800718a:	4603      	mov	r3, r0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	789b      	ldrb	r3, [r3, #2]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d10e      	bne.n	80071c6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2209      	movs	r2, #9
 80071b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	887a      	ldrh	r2, [r7, #2]
 80071b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80071c6:	2200      	movs	r2, #0
 80071c8:	2100      	movs	r1, #0
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 faf6 	bl	80077bc <USBH_CtlReq>
 80071d0:	4603      	mov	r3, r0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b082      	sub	sp, #8
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	460b      	mov	r3, r1
 80071e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	789b      	ldrb	r3, [r3, #2]
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d10f      	bne.n	800720e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2203      	movs	r2, #3
 80071f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80071fa:	78fb      	ldrb	r3, [r7, #3]
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800720e:	2200      	movs	r2, #0
 8007210:	2100      	movs	r1, #0
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fad2 	bl	80077bc <USBH_CtlReq>
 8007218:	4603      	mov	r3, r0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b082      	sub	sp, #8
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	460b      	mov	r3, r1
 800722c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	789b      	ldrb	r3, [r3, #2]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d10f      	bne.n	8007256 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2202      	movs	r2, #2
 800723a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007248:	78fb      	ldrb	r3, [r7, #3]
 800724a:	b29a      	uxth	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007256:	2200      	movs	r2, #0
 8007258:	2100      	movs	r1, #0
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 faae 	bl	80077bc <USBH_CtlReq>
 8007260:	4603      	mov	r3, r0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800726a:	b480      	push	{r7}
 800726c:	b085      	sub	sp, #20
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	4613      	mov	r3, r2
 8007276:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	781a      	ldrb	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	785a      	ldrb	r2, [r3, #1]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	3302      	adds	r3, #2
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	b29a      	uxth	r2, r3
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	3303      	adds	r3, #3
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	b29b      	uxth	r3, r3
 8007298:	021b      	lsls	r3, r3, #8
 800729a:	b29b      	uxth	r3, r3
 800729c:	4313      	orrs	r3, r2
 800729e:	b29a      	uxth	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	791a      	ldrb	r2, [r3, #4]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	795a      	ldrb	r2, [r3, #5]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	799a      	ldrb	r2, [r3, #6]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	79da      	ldrb	r2, [r3, #7]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	79db      	ldrb	r3, [r3, #7]
 80072c8:	2b20      	cmp	r3, #32
 80072ca:	dc11      	bgt.n	80072f0 <USBH_ParseDevDesc+0x86>
 80072cc:	2b08      	cmp	r3, #8
 80072ce:	db16      	blt.n	80072fe <USBH_ParseDevDesc+0x94>
 80072d0:	3b08      	subs	r3, #8
 80072d2:	2201      	movs	r2, #1
 80072d4:	fa02 f303 	lsl.w	r3, r2, r3
 80072d8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80072dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bf14      	ite	ne
 80072e4:	2301      	movne	r3, #1
 80072e6:	2300      	moveq	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d102      	bne.n	80072f4 <USBH_ParseDevDesc+0x8a>
 80072ee:	e006      	b.n	80072fe <USBH_ParseDevDesc+0x94>
 80072f0:	2b40      	cmp	r3, #64	; 0x40
 80072f2:	d104      	bne.n	80072fe <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	79da      	ldrb	r2, [r3, #7]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	71da      	strb	r2, [r3, #7]
      break;
 80072fc:	e003      	b.n	8007306 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2240      	movs	r2, #64	; 0x40
 8007302:	71da      	strb	r2, [r3, #7]
      break;
 8007304:	bf00      	nop
  }

  if (length > 8U)
 8007306:	88fb      	ldrh	r3, [r7, #6]
 8007308:	2b08      	cmp	r3, #8
 800730a:	d939      	bls.n	8007380 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	3308      	adds	r3, #8
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	b29a      	uxth	r2, r3
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	3309      	adds	r3, #9
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	b29b      	uxth	r3, r3
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	b29b      	uxth	r3, r3
 8007320:	4313      	orrs	r3, r2
 8007322:	b29a      	uxth	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	330a      	adds	r3, #10
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	b29a      	uxth	r2, r3
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	330b      	adds	r3, #11
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	b29b      	uxth	r3, r3
 8007338:	021b      	lsls	r3, r3, #8
 800733a:	b29b      	uxth	r3, r3
 800733c:	4313      	orrs	r3, r2
 800733e:	b29a      	uxth	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	330c      	adds	r3, #12
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	b29a      	uxth	r2, r3
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	330d      	adds	r3, #13
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	b29b      	uxth	r3, r3
 8007354:	021b      	lsls	r3, r3, #8
 8007356:	b29b      	uxth	r3, r3
 8007358:	4313      	orrs	r3, r2
 800735a:	b29a      	uxth	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	7b9a      	ldrb	r2, [r3, #14]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	7bda      	ldrb	r2, [r3, #15]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	7c1a      	ldrb	r2, [r3, #16]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	7c5a      	ldrb	r2, [r3, #17]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	745a      	strb	r2, [r3, #17]
  }
}
 8007380:	bf00      	nop
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b08c      	sub	sp, #48	; 0x30
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	4613      	mov	r3, r2
 8007398:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80073a0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	781a      	ldrb	r2, [r3, #0]
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	785a      	ldrb	r2, [r3, #1]
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	3302      	adds	r3, #2
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	3303      	adds	r3, #3
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	021b      	lsls	r3, r3, #8
 80073de:	b29b      	uxth	r3, r3
 80073e0:	4313      	orrs	r3, r2
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073e8:	bf28      	it	cs
 80073ea:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	791a      	ldrb	r2, [r3, #4]
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	795a      	ldrb	r2, [r3, #5]
 8007400:	6a3b      	ldr	r3, [r7, #32]
 8007402:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	799a      	ldrb	r2, [r3, #6]
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	79da      	ldrb	r2, [r3, #7]
 8007410:	6a3b      	ldr	r3, [r7, #32]
 8007412:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	7a1a      	ldrb	r2, [r3, #8]
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b09      	cmp	r3, #9
 8007422:	d002      	beq.n	800742a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	2209      	movs	r2, #9
 8007428:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800742a:	88fb      	ldrh	r3, [r7, #6]
 800742c:	2b09      	cmp	r3, #9
 800742e:	f240 809d 	bls.w	800756c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007432:	2309      	movs	r3, #9
 8007434:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007436:	2300      	movs	r3, #0
 8007438:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800743a:	e081      	b.n	8007540 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800743c:	f107 0316 	add.w	r3, r7, #22
 8007440:	4619      	mov	r1, r3
 8007442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007444:	f000 f99f 	bl	8007786 <USBH_GetNextDesc>
 8007448:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	785b      	ldrb	r3, [r3, #1]
 800744e:	2b04      	cmp	r3, #4
 8007450:	d176      	bne.n	8007540 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b09      	cmp	r3, #9
 8007458:	d002      	beq.n	8007460 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745c:	2209      	movs	r2, #9
 800745e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007464:	221a      	movs	r2, #26
 8007466:	fb02 f303 	mul.w	r3, r2, r3
 800746a:	3308      	adds	r3, #8
 800746c:	6a3a      	ldr	r2, [r7, #32]
 800746e:	4413      	add	r3, r2
 8007470:	3302      	adds	r3, #2
 8007472:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007476:	69f8      	ldr	r0, [r7, #28]
 8007478:	f000 f87e 	bl	8007578 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007482:	2300      	movs	r3, #0
 8007484:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007486:	e043      	b.n	8007510 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007488:	f107 0316 	add.w	r3, r7, #22
 800748c:	4619      	mov	r1, r3
 800748e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007490:	f000 f979 	bl	8007786 <USBH_GetNextDesc>
 8007494:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	785b      	ldrb	r3, [r3, #1]
 800749a:	2b05      	cmp	r3, #5
 800749c:	d138      	bne.n	8007510 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	795b      	ldrb	r3, [r3, #5]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d10f      	bne.n	80074c6 <USBH_ParseCfgDesc+0x13a>
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	799b      	ldrb	r3, [r3, #6]
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d10b      	bne.n	80074c6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	79db      	ldrb	r3, [r3, #7]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10f      	bne.n	80074d6 <USBH_ParseCfgDesc+0x14a>
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2b09      	cmp	r3, #9
 80074bc:	d00b      	beq.n	80074d6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	2209      	movs	r2, #9
 80074c2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80074c4:	e007      	b.n	80074d6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	2b07      	cmp	r3, #7
 80074cc:	d004      	beq.n	80074d8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	2207      	movs	r2, #7
 80074d2:	701a      	strb	r2, [r3, #0]
 80074d4:	e000      	b.n	80074d8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80074d6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80074d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074dc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80074e0:	3201      	adds	r2, #1
 80074e2:	00d2      	lsls	r2, r2, #3
 80074e4:	211a      	movs	r1, #26
 80074e6:	fb01 f303 	mul.w	r3, r1, r3
 80074ea:	4413      	add	r3, r2
 80074ec:	3308      	adds	r3, #8
 80074ee:	6a3a      	ldr	r2, [r7, #32]
 80074f0:	4413      	add	r3, r2
 80074f2:	3304      	adds	r3, #4
 80074f4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80074f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f8:	69b9      	ldr	r1, [r7, #24]
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 f86b 	bl	80075d6 <USBH_ParseEPDesc>
 8007500:	4603      	mov	r3, r0
 8007502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007506:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800750a:	3301      	adds	r3, #1
 800750c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	791b      	ldrb	r3, [r3, #4]
 8007514:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007518:	429a      	cmp	r2, r3
 800751a:	d204      	bcs.n	8007526 <USBH_ParseCfgDesc+0x19a>
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	885a      	ldrh	r2, [r3, #2]
 8007520:	8afb      	ldrh	r3, [r7, #22]
 8007522:	429a      	cmp	r2, r3
 8007524:	d8b0      	bhi.n	8007488 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	791b      	ldrb	r3, [r3, #4]
 800752a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800752e:	429a      	cmp	r2, r3
 8007530:	d201      	bcs.n	8007536 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007532:	2303      	movs	r3, #3
 8007534:	e01c      	b.n	8007570 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800753a:	3301      	adds	r3, #1
 800753c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007544:	2b01      	cmp	r3, #1
 8007546:	d805      	bhi.n	8007554 <USBH_ParseCfgDesc+0x1c8>
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	885a      	ldrh	r2, [r3, #2]
 800754c:	8afb      	ldrh	r3, [r7, #22]
 800754e:	429a      	cmp	r2, r3
 8007550:	f63f af74 	bhi.w	800743c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	791b      	ldrb	r3, [r3, #4]
 8007558:	2b02      	cmp	r3, #2
 800755a:	bf28      	it	cs
 800755c:	2302      	movcs	r3, #2
 800755e:	b2db      	uxtb	r3, r3
 8007560:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007564:	429a      	cmp	r2, r3
 8007566:	d201      	bcs.n	800756c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007568:	2303      	movs	r3, #3
 800756a:	e001      	b.n	8007570 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800756c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007570:	4618      	mov	r0, r3
 8007572:	3730      	adds	r7, #48	; 0x30
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	781a      	ldrb	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	785a      	ldrb	r2, [r3, #1]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	789a      	ldrb	r2, [r3, #2]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	78da      	ldrb	r2, [r3, #3]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	791a      	ldrb	r2, [r3, #4]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	795a      	ldrb	r2, [r3, #5]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	799a      	ldrb	r2, [r3, #6]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	79da      	ldrb	r2, [r3, #7]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	7a1a      	ldrb	r2, [r3, #8]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	721a      	strb	r2, [r3, #8]
}
 80075ca:	bf00      	nop
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b087      	sub	sp, #28
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	781a      	ldrb	r2, [r3, #0]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	785a      	ldrb	r2, [r3, #1]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	789a      	ldrb	r2, [r3, #2]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	78da      	ldrb	r2, [r3, #3]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3304      	adds	r3, #4
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	b29a      	uxth	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	3305      	adds	r3, #5
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	b29b      	uxth	r3, r3
 8007616:	021b      	lsls	r3, r3, #8
 8007618:	b29b      	uxth	r3, r3
 800761a:	4313      	orrs	r3, r2
 800761c:	b29a      	uxth	r2, r3
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	799a      	ldrb	r2, [r3, #6]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	889b      	ldrh	r3, [r3, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d102      	bne.n	8007638 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007632:	2303      	movs	r3, #3
 8007634:	75fb      	strb	r3, [r7, #23]
 8007636:	e033      	b.n	80076a0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	889b      	ldrh	r3, [r3, #4]
 800763c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007640:	f023 0307 	bic.w	r3, r3, #7
 8007644:	b29a      	uxth	r2, r3
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	889b      	ldrh	r3, [r3, #4]
 800764e:	b21a      	sxth	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3304      	adds	r3, #4
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	b299      	uxth	r1, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3305      	adds	r3, #5
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	b29b      	uxth	r3, r3
 8007660:	021b      	lsls	r3, r3, #8
 8007662:	b29b      	uxth	r3, r3
 8007664:	430b      	orrs	r3, r1
 8007666:	b29b      	uxth	r3, r3
 8007668:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800766c:	2b00      	cmp	r3, #0
 800766e:	d110      	bne.n	8007692 <USBH_ParseEPDesc+0xbc>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3304      	adds	r3, #4
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	b299      	uxth	r1, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3305      	adds	r3, #5
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	b29b      	uxth	r3, r3
 8007680:	021b      	lsls	r3, r3, #8
 8007682:	b29b      	uxth	r3, r3
 8007684:	430b      	orrs	r3, r1
 8007686:	b29b      	uxth	r3, r3
 8007688:	b21b      	sxth	r3, r3
 800768a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800768e:	b21b      	sxth	r3, r3
 8007690:	e001      	b.n	8007696 <USBH_ParseEPDesc+0xc0>
 8007692:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007696:	4313      	orrs	r3, r2
 8007698:	b21b      	sxth	r3, r3
 800769a:	b29a      	uxth	r2, r3
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d116      	bne.n	80076d8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	78db      	ldrb	r3, [r3, #3]
 80076ae:	f003 0303 	and.w	r3, r3, #3
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d005      	beq.n	80076c2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	78db      	ldrb	r3, [r3, #3]
 80076ba:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d127      	bne.n	8007712 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	799b      	ldrb	r3, [r3, #6]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <USBH_ParseEPDesc+0xfc>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	799b      	ldrb	r3, [r3, #6]
 80076ce:	2b10      	cmp	r3, #16
 80076d0:	d91f      	bls.n	8007712 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80076d2:	2303      	movs	r3, #3
 80076d4:	75fb      	strb	r3, [r7, #23]
 80076d6:	e01c      	b.n	8007712 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	78db      	ldrb	r3, [r3, #3]
 80076dc:	f003 0303 	and.w	r3, r3, #3
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d10a      	bne.n	80076fa <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	799b      	ldrb	r3, [r3, #6]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <USBH_ParseEPDesc+0x11e>
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	799b      	ldrb	r3, [r3, #6]
 80076f0:	2b10      	cmp	r3, #16
 80076f2:	d90e      	bls.n	8007712 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80076f4:	2303      	movs	r3, #3
 80076f6:	75fb      	strb	r3, [r7, #23]
 80076f8:	e00b      	b.n	8007712 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	78db      	ldrb	r3, [r3, #3]
 80076fe:	f003 0303 	and.w	r3, r3, #3
 8007702:	2b03      	cmp	r3, #3
 8007704:	d105      	bne.n	8007712 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	799b      	ldrb	r3, [r3, #6]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800770e:	2303      	movs	r3, #3
 8007710:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007712:	7dfb      	ldrb	r3, [r7, #23]
}
 8007714:	4618      	mov	r0, r3
 8007716:	371c      	adds	r7, #28
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007720:	b480      	push	{r7}
 8007722:	b087      	sub	sp, #28
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	4613      	mov	r3, r2
 800772c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3301      	adds	r3, #1
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	2b03      	cmp	r3, #3
 8007736:	d120      	bne.n	800777a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	1e9a      	subs	r2, r3, #2
 800773e:	88fb      	ldrh	r3, [r7, #6]
 8007740:	4293      	cmp	r3, r2
 8007742:	bf28      	it	cs
 8007744:	4613      	movcs	r3, r2
 8007746:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	3302      	adds	r3, #2
 800774c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800774e:	2300      	movs	r3, #0
 8007750:	82fb      	strh	r3, [r7, #22]
 8007752:	e00b      	b.n	800776c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007754:	8afb      	ldrh	r3, [r7, #22]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4413      	add	r3, r2
 800775a:	781a      	ldrb	r2, [r3, #0]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	3301      	adds	r3, #1
 8007764:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007766:	8afb      	ldrh	r3, [r7, #22]
 8007768:	3302      	adds	r3, #2
 800776a:	82fb      	strh	r3, [r7, #22]
 800776c:	8afa      	ldrh	r2, [r7, #22]
 800776e:	8abb      	ldrh	r3, [r7, #20]
 8007770:	429a      	cmp	r2, r3
 8007772:	d3ef      	bcc.n	8007754 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2200      	movs	r2, #0
 8007778:	701a      	strb	r2, [r3, #0]
  }
}
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007786:	b480      	push	{r7}
 8007788:	b085      	sub	sp, #20
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	881a      	ldrh	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	b29b      	uxth	r3, r3
 800779a:	4413      	add	r3, r2
 800779c:	b29a      	uxth	r2, r3
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4413      	add	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80077ae:	68fb      	ldr	r3, [r7, #12]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	4613      	mov	r3, r2
 80077c8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80077ca:	2301      	movs	r3, #1
 80077cc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	789b      	ldrb	r3, [r3, #2]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d002      	beq.n	80077dc <USBH_CtlReq+0x20>
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d00f      	beq.n	80077fa <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80077da:	e027      	b.n	800782c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	88fa      	ldrh	r2, [r7, #6]
 80077e6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2201      	movs	r2, #1
 80077ec:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2202      	movs	r2, #2
 80077f2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80077f4:	2301      	movs	r3, #1
 80077f6:	75fb      	strb	r3, [r7, #23]
      break;
 80077f8:	e018      	b.n	800782c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 f81c 	bl	8007838 <USBH_HandleControl>
 8007800:	4603      	mov	r3, r0
 8007802:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <USBH_CtlReq+0x54>
 800780a:	7dfb      	ldrb	r3, [r7, #23]
 800780c:	2b03      	cmp	r3, #3
 800780e:	d106      	bne.n	800781e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2201      	movs	r2, #1
 8007814:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	761a      	strb	r2, [r3, #24]
      break;
 800781c:	e005      	b.n	800782a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	2b02      	cmp	r3, #2
 8007822:	d102      	bne.n	800782a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2201      	movs	r2, #1
 8007828:	709a      	strb	r2, [r3, #2]
      break;
 800782a:	bf00      	nop
  }
  return status;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af02      	add	r7, sp, #8
 800783e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007840:	2301      	movs	r3, #1
 8007842:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007844:	2300      	movs	r3, #0
 8007846:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	7e1b      	ldrb	r3, [r3, #24]
 800784c:	3b01      	subs	r3, #1
 800784e:	2b0a      	cmp	r3, #10
 8007850:	f200 8156 	bhi.w	8007b00 <USBH_HandleControl+0x2c8>
 8007854:	a201      	add	r2, pc, #4	; (adr r2, 800785c <USBH_HandleControl+0x24>)
 8007856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785a:	bf00      	nop
 800785c:	08007889 	.word	0x08007889
 8007860:	080078a3 	.word	0x080078a3
 8007864:	0800790d 	.word	0x0800790d
 8007868:	08007933 	.word	0x08007933
 800786c:	0800796b 	.word	0x0800796b
 8007870:	08007995 	.word	0x08007995
 8007874:	080079e7 	.word	0x080079e7
 8007878:	08007a09 	.word	0x08007a09
 800787c:	08007a45 	.word	0x08007a45
 8007880:	08007a6b 	.word	0x08007a6b
 8007884:	08007aa9 	.word	0x08007aa9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f103 0110 	add.w	r1, r3, #16
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	795b      	ldrb	r3, [r3, #5]
 8007892:	461a      	mov	r2, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f943 	bl	8007b20 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2202      	movs	r2, #2
 800789e:	761a      	strb	r2, [r3, #24]
      break;
 80078a0:	e139      	b.n	8007b16 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	795b      	ldrb	r3, [r3, #5]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fcc5 	bl	8008238 <USBH_LL_GetURBState>
 80078ae:	4603      	mov	r3, r0
 80078b0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80078b2:	7bbb      	ldrb	r3, [r7, #14]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d11e      	bne.n	80078f6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	7c1b      	ldrb	r3, [r3, #16]
 80078bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078c0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	8adb      	ldrh	r3, [r3, #22]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80078ca:	7b7b      	ldrb	r3, [r7, #13]
 80078cc:	2b80      	cmp	r3, #128	; 0x80
 80078ce:	d103      	bne.n	80078d8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2203      	movs	r2, #3
 80078d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078d6:	e115      	b.n	8007b04 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2205      	movs	r2, #5
 80078dc:	761a      	strb	r2, [r3, #24]
      break;
 80078de:	e111      	b.n	8007b04 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80078e0:	7b7b      	ldrb	r3, [r7, #13]
 80078e2:	2b80      	cmp	r3, #128	; 0x80
 80078e4:	d103      	bne.n	80078ee <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2209      	movs	r2, #9
 80078ea:	761a      	strb	r2, [r3, #24]
      break;
 80078ec:	e10a      	b.n	8007b04 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2207      	movs	r2, #7
 80078f2:	761a      	strb	r2, [r3, #24]
      break;
 80078f4:	e106      	b.n	8007b04 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80078f6:	7bbb      	ldrb	r3, [r7, #14]
 80078f8:	2b04      	cmp	r3, #4
 80078fa:	d003      	beq.n	8007904 <USBH_HandleControl+0xcc>
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b02      	cmp	r3, #2
 8007900:	f040 8100 	bne.w	8007b04 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	220b      	movs	r2, #11
 8007908:	761a      	strb	r2, [r3, #24]
      break;
 800790a:	e0fb      	b.n	8007b04 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007912:	b29a      	uxth	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6899      	ldr	r1, [r3, #8]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	899a      	ldrh	r2, [r3, #12]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	791b      	ldrb	r3, [r3, #4]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f93a 	bl	8007b9e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2204      	movs	r2, #4
 800792e:	761a      	strb	r2, [r3, #24]
      break;
 8007930:	e0f1      	b.n	8007b16 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	791b      	ldrb	r3, [r3, #4]
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fc7d 	bl	8008238 <USBH_LL_GetURBState>
 800793e:	4603      	mov	r3, r0
 8007940:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d102      	bne.n	800794e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2209      	movs	r2, #9
 800794c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	2b05      	cmp	r3, #5
 8007952:	d102      	bne.n	800795a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007954:	2303      	movs	r3, #3
 8007956:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007958:	e0d6      	b.n	8007b08 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	2b04      	cmp	r3, #4
 800795e:	f040 80d3 	bne.w	8007b08 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	220b      	movs	r2, #11
 8007966:	761a      	strb	r2, [r3, #24]
      break;
 8007968:	e0ce      	b.n	8007b08 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6899      	ldr	r1, [r3, #8]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	899a      	ldrh	r2, [r3, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	795b      	ldrb	r3, [r3, #5]
 8007976:	2001      	movs	r0, #1
 8007978:	9000      	str	r0, [sp, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f8ea 	bl	8007b54 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007986:	b29a      	uxth	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2206      	movs	r2, #6
 8007990:	761a      	strb	r2, [r3, #24]
      break;
 8007992:	e0c0      	b.n	8007b16 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	795b      	ldrb	r3, [r3, #5]
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fc4c 	bl	8008238 <USBH_LL_GetURBState>
 80079a0:	4603      	mov	r3, r0
 80079a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d103      	bne.n	80079b2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2207      	movs	r2, #7
 80079ae:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079b0:	e0ac      	b.n	8007b0c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
 80079b4:	2b05      	cmp	r3, #5
 80079b6:	d105      	bne.n	80079c4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	220c      	movs	r2, #12
 80079bc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80079be:	2303      	movs	r3, #3
 80079c0:	73fb      	strb	r3, [r7, #15]
      break;
 80079c2:	e0a3      	b.n	8007b0c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d103      	bne.n	80079d2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2205      	movs	r2, #5
 80079ce:	761a      	strb	r2, [r3, #24]
      break;
 80079d0:	e09c      	b.n	8007b0c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b04      	cmp	r3, #4
 80079d6:	f040 8099 	bne.w	8007b0c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	220b      	movs	r2, #11
 80079de:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80079e0:	2302      	movs	r3, #2
 80079e2:	73fb      	strb	r3, [r7, #15]
      break;
 80079e4:	e092      	b.n	8007b0c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	791b      	ldrb	r3, [r3, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	2100      	movs	r1, #0
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f8d5 	bl	8007b9e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2208      	movs	r2, #8
 8007a04:	761a      	strb	r2, [r3, #24]

      break;
 8007a06:	e086      	b.n	8007b16 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	791b      	ldrb	r3, [r3, #4]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fc12 	bl	8008238 <USBH_LL_GetURBState>
 8007a14:	4603      	mov	r3, r0
 8007a16:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d105      	bne.n	8007a2a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	220d      	movs	r2, #13
 8007a22:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a28:	e072      	b.n	8007b10 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007a2a:	7bbb      	ldrb	r3, [r7, #14]
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d103      	bne.n	8007a38 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	220b      	movs	r2, #11
 8007a34:	761a      	strb	r2, [r3, #24]
      break;
 8007a36:	e06b      	b.n	8007b10 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	2b05      	cmp	r3, #5
 8007a3c:	d168      	bne.n	8007b10 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	73fb      	strb	r3, [r7, #15]
      break;
 8007a42:	e065      	b.n	8007b10 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	795b      	ldrb	r3, [r3, #5]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	9200      	str	r2, [sp, #0]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2100      	movs	r1, #0
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f87f 	bl	8007b54 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	220a      	movs	r2, #10
 8007a66:	761a      	strb	r2, [r3, #24]
      break;
 8007a68:	e055      	b.n	8007b16 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	795b      	ldrb	r3, [r3, #5]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fbe1 	bl	8008238 <USBH_LL_GetURBState>
 8007a76:	4603      	mov	r3, r0
 8007a78:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007a7a:	7bbb      	ldrb	r3, [r7, #14]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d105      	bne.n	8007a8c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	220d      	movs	r2, #13
 8007a88:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a8a:	e043      	b.n	8007b14 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d103      	bne.n	8007a9a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2209      	movs	r2, #9
 8007a96:	761a      	strb	r2, [r3, #24]
      break;
 8007a98:	e03c      	b.n	8007b14 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	2b04      	cmp	r3, #4
 8007a9e:	d139      	bne.n	8007b14 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	220b      	movs	r2, #11
 8007aa4:	761a      	strb	r2, [r3, #24]
      break;
 8007aa6:	e035      	b.n	8007b14 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	7e5b      	ldrb	r3, [r3, #25]
 8007aac:	3301      	adds	r3, #1
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	765a      	strb	r2, [r3, #25]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	7e5b      	ldrb	r3, [r3, #25]
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d806      	bhi.n	8007aca <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007ac8:	e025      	b.n	8007b16 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ad0:	2106      	movs	r1, #6
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	795b      	ldrb	r3, [r3, #5]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f90c 	bl	8007d00 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	791b      	ldrb	r3, [r3, #4]
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f906 	bl	8007d00 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007afa:	2302      	movs	r3, #2
 8007afc:	73fb      	strb	r3, [r7, #15]
      break;
 8007afe:	e00a      	b.n	8007b16 <USBH_HandleControl+0x2de>

    default:
      break;
 8007b00:	bf00      	nop
 8007b02:	e008      	b.n	8007b16 <USBH_HandleControl+0x2de>
      break;
 8007b04:	bf00      	nop
 8007b06:	e006      	b.n	8007b16 <USBH_HandleControl+0x2de>
      break;
 8007b08:	bf00      	nop
 8007b0a:	e004      	b.n	8007b16 <USBH_HandleControl+0x2de>
      break;
 8007b0c:	bf00      	nop
 8007b0e:	e002      	b.n	8007b16 <USBH_HandleControl+0x2de>
      break;
 8007b10:	bf00      	nop
 8007b12:	e000      	b.n	8007b16 <USBH_HandleControl+0x2de>
      break;
 8007b14:	bf00      	nop
  }

  return status;
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b088      	sub	sp, #32
 8007b24:	af04      	add	r7, sp, #16
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b2e:	79f9      	ldrb	r1, [r7, #7]
 8007b30:	2300      	movs	r3, #0
 8007b32:	9303      	str	r3, [sp, #12]
 8007b34:	2308      	movs	r3, #8
 8007b36:	9302      	str	r3, [sp, #8]
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	9301      	str	r3, [sp, #4]
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	2300      	movs	r3, #0
 8007b42:	2200      	movs	r2, #0
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 fb46 	bl	80081d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af04      	add	r7, sp, #16
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	4611      	mov	r1, r2
 8007b60:	461a      	mov	r2, r3
 8007b62:	460b      	mov	r3, r1
 8007b64:	80fb      	strh	r3, [r7, #6]
 8007b66:	4613      	mov	r3, r2
 8007b68:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007b74:	2300      	movs	r3, #0
 8007b76:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b78:	7979      	ldrb	r1, [r7, #5]
 8007b7a:	7e3b      	ldrb	r3, [r7, #24]
 8007b7c:	9303      	str	r3, [sp, #12]
 8007b7e:	88fb      	ldrh	r3, [r7, #6]
 8007b80:	9302      	str	r3, [sp, #8]
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	9301      	str	r3, [sp, #4]
 8007b86:	2301      	movs	r3, #1
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 fb21 	bl	80081d6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b088      	sub	sp, #32
 8007ba2:	af04      	add	r7, sp, #16
 8007ba4:	60f8      	str	r0, [r7, #12]
 8007ba6:	60b9      	str	r1, [r7, #8]
 8007ba8:	4611      	mov	r1, r2
 8007baa:	461a      	mov	r2, r3
 8007bac:	460b      	mov	r3, r1
 8007bae:	80fb      	strh	r3, [r7, #6]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bb4:	7979      	ldrb	r1, [r7, #5]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	9303      	str	r3, [sp, #12]
 8007bba:	88fb      	ldrh	r3, [r7, #6]
 8007bbc:	9302      	str	r3, [sp, #8]
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	9301      	str	r3, [sp, #4]
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	2201      	movs	r2, #1
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 fb03 	bl	80081d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007bd0:	2300      	movs	r3, #0

}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b088      	sub	sp, #32
 8007bde:	af04      	add	r7, sp, #16
 8007be0:	60f8      	str	r0, [r7, #12]
 8007be2:	60b9      	str	r1, [r7, #8]
 8007be4:	4611      	mov	r1, r2
 8007be6:	461a      	mov	r2, r3
 8007be8:	460b      	mov	r3, r1
 8007bea:	80fb      	strh	r3, [r7, #6]
 8007bec:	4613      	mov	r3, r2
 8007bee:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bfe:	7979      	ldrb	r1, [r7, #5]
 8007c00:	7e3b      	ldrb	r3, [r7, #24]
 8007c02:	9303      	str	r3, [sp, #12]
 8007c04:	88fb      	ldrh	r3, [r7, #6]
 8007c06:	9302      	str	r3, [sp, #8]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	9301      	str	r3, [sp, #4]
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	2302      	movs	r3, #2
 8007c12:	2200      	movs	r2, #0
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 fade 	bl	80081d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b088      	sub	sp, #32
 8007c28:	af04      	add	r7, sp, #16
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	4611      	mov	r1, r2
 8007c30:	461a      	mov	r2, r3
 8007c32:	460b      	mov	r3, r1
 8007c34:	80fb      	strh	r3, [r7, #6]
 8007c36:	4613      	mov	r3, r2
 8007c38:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c3a:	7979      	ldrb	r1, [r7, #5]
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	9303      	str	r3, [sp, #12]
 8007c40:	88fb      	ldrh	r3, [r7, #6]
 8007c42:	9302      	str	r3, [sp, #8]
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	9301      	str	r3, [sp, #4]
 8007c48:	2301      	movs	r3, #1
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	2201      	movs	r2, #1
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 fac0 	bl	80081d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af04      	add	r7, sp, #16
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	4608      	mov	r0, r1
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	4603      	mov	r3, r0
 8007c70:	70fb      	strb	r3, [r7, #3]
 8007c72:	460b      	mov	r3, r1
 8007c74:	70bb      	strb	r3, [r7, #2]
 8007c76:	4613      	mov	r3, r2
 8007c78:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007c7a:	7878      	ldrb	r0, [r7, #1]
 8007c7c:	78ba      	ldrb	r2, [r7, #2]
 8007c7e:	78f9      	ldrb	r1, [r7, #3]
 8007c80:	8b3b      	ldrh	r3, [r7, #24]
 8007c82:	9302      	str	r3, [sp, #8]
 8007c84:	7d3b      	ldrb	r3, [r7, #20]
 8007c86:	9301      	str	r3, [sp, #4]
 8007c88:	7c3b      	ldrb	r3, [r7, #16]
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fa53 	bl	800813a <USBH_LL_OpenPipe>

  return USBH_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007caa:	78fb      	ldrb	r3, [r7, #3]
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fa72 	bl	8008198 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f836 	bl	8007d3c <USBH_GetFreePipe>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007cd4:	89fb      	ldrh	r3, [r7, #14]
 8007cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d00a      	beq.n	8007cf4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007cde:	78fa      	ldrb	r2, [r7, #3]
 8007ce0:	89fb      	ldrh	r3, [r7, #14]
 8007ce2:	f003 030f 	and.w	r3, r3, #15
 8007ce6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	33e0      	adds	r3, #224	; 0xe0
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	440b      	add	r3, r1
 8007cf2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007cf4:	89fb      	ldrh	r3, [r7, #14]
 8007cf6:	b2db      	uxtb	r3, r3
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	2b0f      	cmp	r3, #15
 8007d10:	d80d      	bhi.n	8007d2e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007d12:	78fb      	ldrb	r3, [r7, #3]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	33e0      	adds	r3, #224	; 0xe0
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007d24:	6879      	ldr	r1, [r7, #4]
 8007d26:	33e0      	adds	r3, #224	; 0xe0
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	440b      	add	r3, r1
 8007d2c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007d48:	2300      	movs	r3, #0
 8007d4a:	73fb      	strb	r3, [r7, #15]
 8007d4c:	e00f      	b.n	8007d6e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	33e0      	adds	r3, #224	; 0xe0
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d102      	bne.n	8007d68 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	e007      	b.n	8007d78 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	73fb      	strb	r3, [r7, #15]
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
 8007d70:	2b0f      	cmp	r3, #15
 8007d72:	d9ec      	bls.n	8007d4e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007d88:	2201      	movs	r2, #1
 8007d8a:	490e      	ldr	r1, [pc, #56]	; (8007dc4 <MX_USB_HOST_Init+0x40>)
 8007d8c:	480e      	ldr	r0, [pc, #56]	; (8007dc8 <MX_USB_HOST_Init+0x44>)
 8007d8e:	f7fe fba7 	bl	80064e0 <USBH_Init>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007d98:	f7f8 ffac 	bl	8000cf4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007d9c:	490b      	ldr	r1, [pc, #44]	; (8007dcc <MX_USB_HOST_Init+0x48>)
 8007d9e:	480a      	ldr	r0, [pc, #40]	; (8007dc8 <MX_USB_HOST_Init+0x44>)
 8007da0:	f7fe fc2c 	bl	80065fc <USBH_RegisterClass>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007daa:	f7f8 ffa3 	bl	8000cf4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007dae:	4806      	ldr	r0, [pc, #24]	; (8007dc8 <MX_USB_HOST_Init+0x44>)
 8007db0:	f7fe fcb0 	bl	8006714 <USBH_Start>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d001      	beq.n	8007dbe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007dba:	f7f8 ff9b 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007dbe:	bf00      	nop
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	08007de5 	.word	0x08007de5
 8007dc8:	20000224 	.word	0x20000224
 8007dcc:	2000000c 	.word	0x2000000c

08007dd0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007dd4:	4802      	ldr	r0, [pc, #8]	; (8007de0 <MX_USB_HOST_Process+0x10>)
 8007dd6:	f7fe fcad 	bl	8006734 <USBH_Process>
}
 8007dda:	bf00      	nop
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20000224 	.word	0x20000224

08007de4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007df0:	78fb      	ldrb	r3, [r7, #3]
 8007df2:	3b01      	subs	r3, #1
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	d819      	bhi.n	8007e2c <USBH_UserProcess+0x48>
 8007df8:	a201      	add	r2, pc, #4	; (adr r2, 8007e00 <USBH_UserProcess+0x1c>)
 8007dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfe:	bf00      	nop
 8007e00:	08007e2d 	.word	0x08007e2d
 8007e04:	08007e1d 	.word	0x08007e1d
 8007e08:	08007e2d 	.word	0x08007e2d
 8007e0c:	08007e25 	.word	0x08007e25
 8007e10:	08007e15 	.word	0x08007e15
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e14:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <USBH_UserProcess+0x58>)
 8007e16:	2203      	movs	r2, #3
 8007e18:	701a      	strb	r2, [r3, #0]
  break;
 8007e1a:	e008      	b.n	8007e2e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e1c:	4b07      	ldr	r3, [pc, #28]	; (8007e3c <USBH_UserProcess+0x58>)
 8007e1e:	2202      	movs	r2, #2
 8007e20:	701a      	strb	r2, [r3, #0]
  break;
 8007e22:	e004      	b.n	8007e2e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e24:	4b05      	ldr	r3, [pc, #20]	; (8007e3c <USBH_UserProcess+0x58>)
 8007e26:	2201      	movs	r2, #1
 8007e28:	701a      	strb	r2, [r3, #0]
  break;
 8007e2a:	e000      	b.n	8007e2e <USBH_UserProcess+0x4a>

  default:
  break;
 8007e2c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e2e:	bf00      	nop
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	200005fc 	.word	0x200005fc

08007e40 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b08a      	sub	sp, #40	; 0x28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e48:	f107 0314 	add.w	r3, r7, #20
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	605a      	str	r2, [r3, #4]
 8007e52:	609a      	str	r2, [r3, #8]
 8007e54:	60da      	str	r2, [r3, #12]
 8007e56:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e60:	d147      	bne.n	8007ef2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e62:	2300      	movs	r3, #0
 8007e64:	613b      	str	r3, [r7, #16]
 8007e66:	4b25      	ldr	r3, [pc, #148]	; (8007efc <HAL_HCD_MspInit+0xbc>)
 8007e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6a:	4a24      	ldr	r2, [pc, #144]	; (8007efc <HAL_HCD_MspInit+0xbc>)
 8007e6c:	f043 0301 	orr.w	r3, r3, #1
 8007e70:	6313      	str	r3, [r2, #48]	; 0x30
 8007e72:	4b22      	ldr	r3, [pc, #136]	; (8007efc <HAL_HCD_MspInit+0xbc>)
 8007e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	613b      	str	r3, [r7, #16]
 8007e7c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e84:	2300      	movs	r3, #0
 8007e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007e8c:	f107 0314 	add.w	r3, r7, #20
 8007e90:	4619      	mov	r1, r3
 8007e92:	481b      	ldr	r0, [pc, #108]	; (8007f00 <HAL_HCD_MspInit+0xc0>)
 8007e94:	f7fa fc02 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007e98:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007eaa:	230a      	movs	r3, #10
 8007eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eae:	f107 0314 	add.w	r3, r7, #20
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	4812      	ldr	r0, [pc, #72]	; (8007f00 <HAL_HCD_MspInit+0xc0>)
 8007eb6:	f7fa fbf1 	bl	800269c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007eba:	4b10      	ldr	r3, [pc, #64]	; (8007efc <HAL_HCD_MspInit+0xbc>)
 8007ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ebe:	4a0f      	ldr	r2, [pc, #60]	; (8007efc <HAL_HCD_MspInit+0xbc>)
 8007ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec4:	6353      	str	r3, [r2, #52]	; 0x34
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	4b0c      	ldr	r3, [pc, #48]	; (8007efc <HAL_HCD_MspInit+0xbc>)
 8007ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ece:	4a0b      	ldr	r2, [pc, #44]	; (8007efc <HAL_HCD_MspInit+0xbc>)
 8007ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8007ed6:	4b09      	ldr	r3, [pc, #36]	; (8007efc <HAL_HCD_MspInit+0xbc>)
 8007ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	2043      	movs	r0, #67	; 0x43
 8007ee8:	f7f9 ff73 	bl	8001dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007eec:	2043      	movs	r0, #67	; 0x43
 8007eee:	f7f9 ff8c 	bl	8001e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ef2:	bf00      	nop
 8007ef4:	3728      	adds	r7, #40	; 0x28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	40023800 	.word	0x40023800
 8007f00:	40020000 	.word	0x40020000

08007f04 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fe ffed 	bl	8006ef2 <USBH_LL_IncTimer>
}
 8007f18:	bf00      	nop
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7ff f825 	bl	8006f7e <USBH_LL_Connect>
}
 8007f34:	bf00      	nop
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7ff f82e 	bl	8006fac <USBH_LL_Disconnect>
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	70fb      	strb	r3, [r7, #3]
 8007f64:	4613      	mov	r3, r2
 8007f66:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe ffdf 	bl	8006f46 <USBH_LL_PortEnabled>
}
 8007f88:	bf00      	nop
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe ffdf 	bl	8006f62 <USBH_LL_PortDisabled>
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d12a      	bne.n	8008014 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007fbe:	4a18      	ldr	r2, [pc, #96]	; (8008020 <USBH_LL_Init+0x74>)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a15      	ldr	r2, [pc, #84]	; (8008020 <USBH_LL_Init+0x74>)
 8007fca:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fce:	4b14      	ldr	r3, [pc, #80]	; (8008020 <USBH_LL_Init+0x74>)
 8007fd0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fd4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007fd6:	4b12      	ldr	r3, [pc, #72]	; (8008020 <USBH_LL_Init+0x74>)
 8007fd8:	2208      	movs	r2, #8
 8007fda:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007fdc:	4b10      	ldr	r3, [pc, #64]	; (8008020 <USBH_LL_Init+0x74>)
 8007fde:	2201      	movs	r2, #1
 8007fe0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007fe2:	4b0f      	ldr	r3, [pc, #60]	; (8008020 <USBH_LL_Init+0x74>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007fe8:	4b0d      	ldr	r3, [pc, #52]	; (8008020 <USBH_LL_Init+0x74>)
 8007fea:	2202      	movs	r2, #2
 8007fec:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007fee:	4b0c      	ldr	r3, [pc, #48]	; (8008020 <USBH_LL_Init+0x74>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007ff4:	480a      	ldr	r0, [pc, #40]	; (8008020 <USBH_LL_Init+0x74>)
 8007ff6:	f7fa fd1f 	bl	8002a38 <HAL_HCD_Init>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008000:	f7f8 fe78 	bl	8000cf4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008004:	4806      	ldr	r0, [pc, #24]	; (8008020 <USBH_LL_Init+0x74>)
 8008006:	f7fb f902 	bl	800320e <HAL_HCD_GetCurrentFrame>
 800800a:	4603      	mov	r3, r0
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7fe ff60 	bl	8006ed4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20000600 	.word	0x20000600

08008024 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800802c:	2300      	movs	r3, #0
 800802e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800803a:	4618      	mov	r0, r3
 800803c:	f7fb f871 	bl	8003122 <HAL_HCD_Start>
 8008040:	4603      	mov	r3, r0
 8008042:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008044:	7bfb      	ldrb	r3, [r7, #15]
 8008046:	4618      	mov	r0, r3
 8008048:	f000 f95c 	bl	8008304 <USBH_Get_USB_Status>
 800804c:	4603      	mov	r3, r0
 800804e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008050:	7bbb      	ldrb	r3, [r7, #14]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008070:	4618      	mov	r0, r3
 8008072:	f7fb f879 	bl	8003168 <HAL_HCD_Stop>
 8008076:	4603      	mov	r3, r0
 8008078:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	4618      	mov	r0, r3
 800807e:	f000 f941 	bl	8008304 <USBH_Get_USB_Status>
 8008082:	4603      	mov	r3, r0
 8008084:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008086:	7bbb      	ldrb	r3, [r7, #14]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008098:	2301      	movs	r3, #1
 800809a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fb f8c1 	bl	800322a <HAL_HCD_GetCurrentSpeed>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d00c      	beq.n	80080c8 <USBH_LL_GetSpeed+0x38>
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d80d      	bhi.n	80080ce <USBH_LL_GetSpeed+0x3e>
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d002      	beq.n	80080bc <USBH_LL_GetSpeed+0x2c>
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d003      	beq.n	80080c2 <USBH_LL_GetSpeed+0x32>
 80080ba:	e008      	b.n	80080ce <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80080bc:	2300      	movs	r3, #0
 80080be:	73fb      	strb	r3, [r7, #15]
    break;
 80080c0:	e008      	b.n	80080d4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80080c2:	2301      	movs	r3, #1
 80080c4:	73fb      	strb	r3, [r7, #15]
    break;
 80080c6:	e005      	b.n	80080d4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80080c8:	2302      	movs	r3, #2
 80080ca:	73fb      	strb	r3, [r7, #15]
    break;
 80080cc:	e002      	b.n	80080d4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80080ce:	2301      	movs	r3, #1
 80080d0:	73fb      	strb	r3, [r7, #15]
    break;
 80080d2:	bf00      	nop
  }
  return  speed;
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fb f854 	bl	80031a2 <HAL_HCD_ResetPort>
 80080fa:	4603      	mov	r3, r0
 80080fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	4618      	mov	r0, r3
 8008102:	f000 f8ff 	bl	8008304 <USBH_Get_USB_Status>
 8008106:	4603      	mov	r3, r0
 8008108:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800810a:	7bbb      	ldrb	r3, [r7, #14]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008126:	78fa      	ldrb	r2, [r7, #3]
 8008128:	4611      	mov	r1, r2
 800812a:	4618      	mov	r0, r3
 800812c:	f7fb f85b 	bl	80031e6 <HAL_HCD_HC_GetXferCount>
 8008130:	4603      	mov	r3, r0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800813a:	b590      	push	{r4, r7, lr}
 800813c:	b089      	sub	sp, #36	; 0x24
 800813e:	af04      	add	r7, sp, #16
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	4608      	mov	r0, r1
 8008144:	4611      	mov	r1, r2
 8008146:	461a      	mov	r2, r3
 8008148:	4603      	mov	r3, r0
 800814a:	70fb      	strb	r3, [r7, #3]
 800814c:	460b      	mov	r3, r1
 800814e:	70bb      	strb	r3, [r7, #2]
 8008150:	4613      	mov	r3, r2
 8008152:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008162:	787c      	ldrb	r4, [r7, #1]
 8008164:	78ba      	ldrb	r2, [r7, #2]
 8008166:	78f9      	ldrb	r1, [r7, #3]
 8008168:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800816a:	9302      	str	r3, [sp, #8]
 800816c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	4623      	mov	r3, r4
 800817a:	f7fa fcbf 	bl	8002afc <HAL_HCD_HC_Init>
 800817e:	4603      	mov	r3, r0
 8008180:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	4618      	mov	r0, r3
 8008186:	f000 f8bd 	bl	8008304 <USBH_Get_USB_Status>
 800818a:	4603      	mov	r3, r0
 800818c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800818e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	bd90      	pop	{r4, r7, pc}

08008198 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	460b      	mov	r3, r1
 80081a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081b2:	78fa      	ldrb	r2, [r7, #3]
 80081b4:	4611      	mov	r1, r2
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fa fd2f 	bl	8002c1a <HAL_HCD_HC_Halt>
 80081bc:	4603      	mov	r3, r0
 80081be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 f89e 	bl	8008304 <USBH_Get_USB_Status>
 80081c8:	4603      	mov	r3, r0
 80081ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80081d6:	b590      	push	{r4, r7, lr}
 80081d8:	b089      	sub	sp, #36	; 0x24
 80081da:	af04      	add	r7, sp, #16
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	4608      	mov	r0, r1
 80081e0:	4611      	mov	r1, r2
 80081e2:	461a      	mov	r2, r3
 80081e4:	4603      	mov	r3, r0
 80081e6:	70fb      	strb	r3, [r7, #3]
 80081e8:	460b      	mov	r3, r1
 80081ea:	70bb      	strb	r3, [r7, #2]
 80081ec:	4613      	mov	r3, r2
 80081ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f0:	2300      	movs	r3, #0
 80081f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081fe:	787c      	ldrb	r4, [r7, #1]
 8008200:	78ba      	ldrb	r2, [r7, #2]
 8008202:	78f9      	ldrb	r1, [r7, #3]
 8008204:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008208:	9303      	str	r3, [sp, #12]
 800820a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800820c:	9302      	str	r3, [sp, #8]
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	4623      	mov	r3, r4
 800821a:	f7fa fd21 	bl	8002c60 <HAL_HCD_HC_SubmitRequest>
 800821e:	4603      	mov	r3, r0
 8008220:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008222:	7bfb      	ldrb	r3, [r7, #15]
 8008224:	4618      	mov	r0, r3
 8008226:	f000 f86d 	bl	8008304 <USBH_Get_USB_Status>
 800822a:	4603      	mov	r3, r0
 800822c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800822e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	bd90      	pop	{r4, r7, pc}

08008238 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800824a:	78fa      	ldrb	r2, [r7, #3]
 800824c:	4611      	mov	r1, r2
 800824e:	4618      	mov	r0, r3
 8008250:	f7fa ffb5 	bl	80031be <HAL_HCD_HC_GetURBState>
 8008254:	4603      	mov	r3, r0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	460b      	mov	r3, r1
 8008268:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008270:	2b01      	cmp	r3, #1
 8008272:	d103      	bne.n	800827c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008274:	78fb      	ldrb	r3, [r7, #3]
 8008276:	4618      	mov	r0, r3
 8008278:	f000 f870 	bl	800835c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800827c:	20c8      	movs	r0, #200	; 0xc8
 800827e:	f7f8 ff7d 	bl	800117c <HAL_Delay>
  return USBH_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
 8008298:	4613      	mov	r3, r2
 800829a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082a2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80082a4:	78fb      	ldrb	r3, [r7, #3]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	212c      	movs	r1, #44	; 0x2c
 80082aa:	fb01 f303 	mul.w	r3, r1, r3
 80082ae:	4413      	add	r3, r2
 80082b0:	333b      	adds	r3, #59	; 0x3b
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d009      	beq.n	80082cc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80082b8:	78fb      	ldrb	r3, [r7, #3]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	212c      	movs	r1, #44	; 0x2c
 80082be:	fb01 f303 	mul.w	r3, r1, r3
 80082c2:	4413      	add	r3, r2
 80082c4:	3354      	adds	r3, #84	; 0x54
 80082c6:	78ba      	ldrb	r2, [r7, #2]
 80082c8:	701a      	strb	r2, [r3, #0]
 80082ca:	e008      	b.n	80082de <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80082cc:	78fb      	ldrb	r3, [r7, #3]
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	212c      	movs	r1, #44	; 0x2c
 80082d2:	fb01 f303 	mul.w	r3, r1, r3
 80082d6:	4413      	add	r3, r2
 80082d8:	3355      	adds	r3, #85	; 0x55
 80082da:	78ba      	ldrb	r2, [r7, #2]
 80082dc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7f8 ff41 	bl	800117c <HAL_Delay>
}
 80082fa:	bf00      	nop
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	4603      	mov	r3, r0
 800830c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	2b03      	cmp	r3, #3
 8008316:	d817      	bhi.n	8008348 <USBH_Get_USB_Status+0x44>
 8008318:	a201      	add	r2, pc, #4	; (adr r2, 8008320 <USBH_Get_USB_Status+0x1c>)
 800831a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831e:	bf00      	nop
 8008320:	08008331 	.word	0x08008331
 8008324:	08008337 	.word	0x08008337
 8008328:	0800833d 	.word	0x0800833d
 800832c:	08008343 	.word	0x08008343
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	73fb      	strb	r3, [r7, #15]
    break;
 8008334:	e00b      	b.n	800834e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008336:	2302      	movs	r3, #2
 8008338:	73fb      	strb	r3, [r7, #15]
    break;
 800833a:	e008      	b.n	800834e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800833c:	2301      	movs	r3, #1
 800833e:	73fb      	strb	r3, [r7, #15]
    break;
 8008340:	e005      	b.n	800834e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008342:	2302      	movs	r3, #2
 8008344:	73fb      	strb	r3, [r7, #15]
    break;
 8008346:	e002      	b.n	800834e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008348:	2302      	movs	r3, #2
 800834a:	73fb      	strb	r3, [r7, #15]
    break;
 800834c:	bf00      	nop
  }
  return usb_status;
 800834e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800836a:	79fb      	ldrb	r3, [r7, #7]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d102      	bne.n	8008376 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008370:	2300      	movs	r3, #0
 8008372:	73fb      	strb	r3, [r7, #15]
 8008374:	e001      	b.n	800837a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008376:	2301      	movs	r3, #1
 8008378:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800837a:	7bfb      	ldrb	r3, [r7, #15]
 800837c:	461a      	mov	r2, r3
 800837e:	2101      	movs	r1, #1
 8008380:	4803      	ldr	r0, [pc, #12]	; (8008390 <MX_DriverVbusFS+0x34>)
 8008382:	f7fa fb27 	bl	80029d4 <HAL_GPIO_WritePin>
}
 8008386:	bf00      	nop
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	40020800 	.word	0x40020800

08008394 <findslot>:
 8008394:	4b0a      	ldr	r3, [pc, #40]	; (80083c0 <findslot+0x2c>)
 8008396:	b510      	push	{r4, lr}
 8008398:	4604      	mov	r4, r0
 800839a:	6818      	ldr	r0, [r3, #0]
 800839c:	b118      	cbz	r0, 80083a6 <findslot+0x12>
 800839e:	6983      	ldr	r3, [r0, #24]
 80083a0:	b90b      	cbnz	r3, 80083a6 <findslot+0x12>
 80083a2:	f000 faf7 	bl	8008994 <__sinit>
 80083a6:	2c13      	cmp	r4, #19
 80083a8:	d807      	bhi.n	80083ba <findslot+0x26>
 80083aa:	4806      	ldr	r0, [pc, #24]	; (80083c4 <findslot+0x30>)
 80083ac:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80083b0:	3201      	adds	r2, #1
 80083b2:	d002      	beq.n	80083ba <findslot+0x26>
 80083b4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80083b8:	bd10      	pop	{r4, pc}
 80083ba:	2000      	movs	r0, #0
 80083bc:	e7fc      	b.n	80083b8 <findslot+0x24>
 80083be:	bf00      	nop
 80083c0:	20000034 	.word	0x20000034
 80083c4:	20000910 	.word	0x20000910

080083c8 <error>:
 80083c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ca:	4604      	mov	r4, r0
 80083cc:	f000 fa84 	bl	80088d8 <__errno>
 80083d0:	2613      	movs	r6, #19
 80083d2:	4605      	mov	r5, r0
 80083d4:	2700      	movs	r7, #0
 80083d6:	4630      	mov	r0, r6
 80083d8:	4639      	mov	r1, r7
 80083da:	beab      	bkpt	0x00ab
 80083dc:	4606      	mov	r6, r0
 80083de:	602e      	str	r6, [r5, #0]
 80083e0:	4620      	mov	r0, r4
 80083e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080083e4 <checkerror>:
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d101      	bne.n	80083ec <checkerror+0x8>
 80083e8:	f7ff bfee 	b.w	80083c8 <error>
 80083ec:	4770      	bx	lr

080083ee <_swiread>:
 80083ee:	b530      	push	{r4, r5, lr}
 80083f0:	b085      	sub	sp, #20
 80083f2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80083f6:	9203      	str	r2, [sp, #12]
 80083f8:	2406      	movs	r4, #6
 80083fa:	ad01      	add	r5, sp, #4
 80083fc:	4620      	mov	r0, r4
 80083fe:	4629      	mov	r1, r5
 8008400:	beab      	bkpt	0x00ab
 8008402:	4604      	mov	r4, r0
 8008404:	4620      	mov	r0, r4
 8008406:	f7ff ffed 	bl	80083e4 <checkerror>
 800840a:	b005      	add	sp, #20
 800840c:	bd30      	pop	{r4, r5, pc}

0800840e <_read>:
 800840e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008410:	4615      	mov	r5, r2
 8008412:	9101      	str	r1, [sp, #4]
 8008414:	f7ff ffbe 	bl	8008394 <findslot>
 8008418:	9901      	ldr	r1, [sp, #4]
 800841a:	4604      	mov	r4, r0
 800841c:	b938      	cbnz	r0, 800842e <_read+0x20>
 800841e:	f000 fa5b 	bl	80088d8 <__errno>
 8008422:	2309      	movs	r3, #9
 8008424:	6003      	str	r3, [r0, #0]
 8008426:	f04f 30ff 	mov.w	r0, #4294967295
 800842a:	b003      	add	sp, #12
 800842c:	bd30      	pop	{r4, r5, pc}
 800842e:	6800      	ldr	r0, [r0, #0]
 8008430:	462a      	mov	r2, r5
 8008432:	f7ff ffdc 	bl	80083ee <_swiread>
 8008436:	1c43      	adds	r3, r0, #1
 8008438:	d0f7      	beq.n	800842a <_read+0x1c>
 800843a:	6863      	ldr	r3, [r4, #4]
 800843c:	1a2a      	subs	r2, r5, r0
 800843e:	4413      	add	r3, r2
 8008440:	6063      	str	r3, [r4, #4]
 8008442:	4610      	mov	r0, r2
 8008444:	e7f1      	b.n	800842a <_read+0x1c>

08008446 <_swilseek>:
 8008446:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008448:	460c      	mov	r4, r1
 800844a:	4616      	mov	r6, r2
 800844c:	f7ff ffa2 	bl	8008394 <findslot>
 8008450:	4605      	mov	r5, r0
 8008452:	b940      	cbnz	r0, 8008466 <_swilseek+0x20>
 8008454:	f000 fa40 	bl	80088d8 <__errno>
 8008458:	2309      	movs	r3, #9
 800845a:	6003      	str	r3, [r0, #0]
 800845c:	f04f 34ff 	mov.w	r4, #4294967295
 8008460:	4620      	mov	r0, r4
 8008462:	b003      	add	sp, #12
 8008464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008466:	2e02      	cmp	r6, #2
 8008468:	d903      	bls.n	8008472 <_swilseek+0x2c>
 800846a:	f000 fa35 	bl	80088d8 <__errno>
 800846e:	2316      	movs	r3, #22
 8008470:	e7f3      	b.n	800845a <_swilseek+0x14>
 8008472:	2e01      	cmp	r6, #1
 8008474:	d112      	bne.n	800849c <_swilseek+0x56>
 8008476:	6843      	ldr	r3, [r0, #4]
 8008478:	18e4      	adds	r4, r4, r3
 800847a:	d4f6      	bmi.n	800846a <_swilseek+0x24>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	260a      	movs	r6, #10
 8008480:	e9cd 3400 	strd	r3, r4, [sp]
 8008484:	466f      	mov	r7, sp
 8008486:	4630      	mov	r0, r6
 8008488:	4639      	mov	r1, r7
 800848a:	beab      	bkpt	0x00ab
 800848c:	4606      	mov	r6, r0
 800848e:	4630      	mov	r0, r6
 8008490:	f7ff ffa8 	bl	80083e4 <checkerror>
 8008494:	2800      	cmp	r0, #0
 8008496:	dbe1      	blt.n	800845c <_swilseek+0x16>
 8008498:	606c      	str	r4, [r5, #4]
 800849a:	e7e1      	b.n	8008460 <_swilseek+0x1a>
 800849c:	2e02      	cmp	r6, #2
 800849e:	d1ed      	bne.n	800847c <_swilseek+0x36>
 80084a0:	6803      	ldr	r3, [r0, #0]
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	260c      	movs	r6, #12
 80084a6:	466f      	mov	r7, sp
 80084a8:	4630      	mov	r0, r6
 80084aa:	4639      	mov	r1, r7
 80084ac:	beab      	bkpt	0x00ab
 80084ae:	4606      	mov	r6, r0
 80084b0:	4630      	mov	r0, r6
 80084b2:	f7ff ff97 	bl	80083e4 <checkerror>
 80084b6:	1c43      	adds	r3, r0, #1
 80084b8:	d0d0      	beq.n	800845c <_swilseek+0x16>
 80084ba:	4404      	add	r4, r0
 80084bc:	e7de      	b.n	800847c <_swilseek+0x36>

080084be <_lseek>:
 80084be:	f7ff bfc2 	b.w	8008446 <_swilseek>

080084c2 <_swiwrite>:
 80084c2:	b530      	push	{r4, r5, lr}
 80084c4:	b085      	sub	sp, #20
 80084c6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80084ca:	9203      	str	r2, [sp, #12]
 80084cc:	2405      	movs	r4, #5
 80084ce:	ad01      	add	r5, sp, #4
 80084d0:	4620      	mov	r0, r4
 80084d2:	4629      	mov	r1, r5
 80084d4:	beab      	bkpt	0x00ab
 80084d6:	4604      	mov	r4, r0
 80084d8:	4620      	mov	r0, r4
 80084da:	f7ff ff83 	bl	80083e4 <checkerror>
 80084de:	b005      	add	sp, #20
 80084e0:	bd30      	pop	{r4, r5, pc}

080084e2 <_write>:
 80084e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084e4:	4615      	mov	r5, r2
 80084e6:	9101      	str	r1, [sp, #4]
 80084e8:	f7ff ff54 	bl	8008394 <findslot>
 80084ec:	9901      	ldr	r1, [sp, #4]
 80084ee:	4604      	mov	r4, r0
 80084f0:	b930      	cbnz	r0, 8008500 <_write+0x1e>
 80084f2:	f000 f9f1 	bl	80088d8 <__errno>
 80084f6:	2309      	movs	r3, #9
 80084f8:	6003      	str	r3, [r0, #0]
 80084fa:	f04f 30ff 	mov.w	r0, #4294967295
 80084fe:	e012      	b.n	8008526 <_write+0x44>
 8008500:	6800      	ldr	r0, [r0, #0]
 8008502:	462a      	mov	r2, r5
 8008504:	f7ff ffdd 	bl	80084c2 <_swiwrite>
 8008508:	2800      	cmp	r0, #0
 800850a:	dbf6      	blt.n	80084fa <_write+0x18>
 800850c:	6862      	ldr	r2, [r4, #4]
 800850e:	1a2b      	subs	r3, r5, r0
 8008510:	441a      	add	r2, r3
 8008512:	42a8      	cmp	r0, r5
 8008514:	6062      	str	r2, [r4, #4]
 8008516:	d105      	bne.n	8008524 <_write+0x42>
 8008518:	2000      	movs	r0, #0
 800851a:	b003      	add	sp, #12
 800851c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008520:	f7ff bf52 	b.w	80083c8 <error>
 8008524:	4618      	mov	r0, r3
 8008526:	b003      	add	sp, #12
 8008528:	bd30      	pop	{r4, r5, pc}

0800852a <_swiclose>:
 800852a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800852c:	2402      	movs	r4, #2
 800852e:	9001      	str	r0, [sp, #4]
 8008530:	ad01      	add	r5, sp, #4
 8008532:	4620      	mov	r0, r4
 8008534:	4629      	mov	r1, r5
 8008536:	beab      	bkpt	0x00ab
 8008538:	4604      	mov	r4, r0
 800853a:	4620      	mov	r0, r4
 800853c:	f7ff ff52 	bl	80083e4 <checkerror>
 8008540:	b003      	add	sp, #12
 8008542:	bd30      	pop	{r4, r5, pc}

08008544 <_close>:
 8008544:	b538      	push	{r3, r4, r5, lr}
 8008546:	4605      	mov	r5, r0
 8008548:	f7ff ff24 	bl	8008394 <findslot>
 800854c:	4604      	mov	r4, r0
 800854e:	b930      	cbnz	r0, 800855e <_close+0x1a>
 8008550:	f000 f9c2 	bl	80088d8 <__errno>
 8008554:	2309      	movs	r3, #9
 8008556:	6003      	str	r3, [r0, #0]
 8008558:	f04f 30ff 	mov.w	r0, #4294967295
 800855c:	bd38      	pop	{r3, r4, r5, pc}
 800855e:	3d01      	subs	r5, #1
 8008560:	2d01      	cmp	r5, #1
 8008562:	d809      	bhi.n	8008578 <_close+0x34>
 8008564:	4b09      	ldr	r3, [pc, #36]	; (800858c <_close+0x48>)
 8008566:	689a      	ldr	r2, [r3, #8]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	429a      	cmp	r2, r3
 800856c:	d104      	bne.n	8008578 <_close+0x34>
 800856e:	f04f 33ff 	mov.w	r3, #4294967295
 8008572:	6003      	str	r3, [r0, #0]
 8008574:	2000      	movs	r0, #0
 8008576:	e7f1      	b.n	800855c <_close+0x18>
 8008578:	6820      	ldr	r0, [r4, #0]
 800857a:	f7ff ffd6 	bl	800852a <_swiclose>
 800857e:	2800      	cmp	r0, #0
 8008580:	d1ec      	bne.n	800855c <_close+0x18>
 8008582:	f04f 33ff 	mov.w	r3, #4294967295
 8008586:	6023      	str	r3, [r4, #0]
 8008588:	e7e8      	b.n	800855c <_close+0x18>
 800858a:	bf00      	nop
 800858c:	20000910 	.word	0x20000910

08008590 <_swistat>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	460c      	mov	r4, r1
 8008594:	f7ff fefe 	bl	8008394 <findslot>
 8008598:	4605      	mov	r5, r0
 800859a:	b930      	cbnz	r0, 80085aa <_swistat+0x1a>
 800859c:	f000 f99c 	bl	80088d8 <__errno>
 80085a0:	2309      	movs	r3, #9
 80085a2:	6003      	str	r3, [r0, #0]
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295
 80085a8:	bd70      	pop	{r4, r5, r6, pc}
 80085aa:	6863      	ldr	r3, [r4, #4]
 80085ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80085b0:	6063      	str	r3, [r4, #4]
 80085b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085b6:	64a3      	str	r3, [r4, #72]	; 0x48
 80085b8:	260c      	movs	r6, #12
 80085ba:	4630      	mov	r0, r6
 80085bc:	4629      	mov	r1, r5
 80085be:	beab      	bkpt	0x00ab
 80085c0:	4605      	mov	r5, r0
 80085c2:	4628      	mov	r0, r5
 80085c4:	f7ff ff0e 	bl	80083e4 <checkerror>
 80085c8:	1c43      	adds	r3, r0, #1
 80085ca:	bf1c      	itt	ne
 80085cc:	6120      	strne	r0, [r4, #16]
 80085ce:	2000      	movne	r0, #0
 80085d0:	e7ea      	b.n	80085a8 <_swistat+0x18>

080085d2 <_fstat>:
 80085d2:	460b      	mov	r3, r1
 80085d4:	b510      	push	{r4, lr}
 80085d6:	2100      	movs	r1, #0
 80085d8:	4604      	mov	r4, r0
 80085da:	2258      	movs	r2, #88	; 0x58
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 faaf 	bl	8008b40 <memset>
 80085e2:	4601      	mov	r1, r0
 80085e4:	4620      	mov	r0, r4
 80085e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ea:	f7ff bfd1 	b.w	8008590 <_swistat>

080085ee <_stat>:
 80085ee:	b538      	push	{r3, r4, r5, lr}
 80085f0:	460d      	mov	r5, r1
 80085f2:	4604      	mov	r4, r0
 80085f4:	2258      	movs	r2, #88	; 0x58
 80085f6:	2100      	movs	r1, #0
 80085f8:	4628      	mov	r0, r5
 80085fa:	f000 faa1 	bl	8008b40 <memset>
 80085fe:	4620      	mov	r0, r4
 8008600:	2100      	movs	r1, #0
 8008602:	f000 f811 	bl	8008628 <_swiopen>
 8008606:	1c43      	adds	r3, r0, #1
 8008608:	4604      	mov	r4, r0
 800860a:	d00b      	beq.n	8008624 <_stat+0x36>
 800860c:	686b      	ldr	r3, [r5, #4]
 800860e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008612:	606b      	str	r3, [r5, #4]
 8008614:	4629      	mov	r1, r5
 8008616:	f7ff ffbb 	bl	8008590 <_swistat>
 800861a:	4605      	mov	r5, r0
 800861c:	4620      	mov	r0, r4
 800861e:	f7ff ff91 	bl	8008544 <_close>
 8008622:	462c      	mov	r4, r5
 8008624:	4620      	mov	r0, r4
 8008626:	bd38      	pop	{r3, r4, r5, pc}

08008628 <_swiopen>:
 8008628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800862c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80086d8 <_swiopen+0xb0>
 8008630:	b097      	sub	sp, #92	; 0x5c
 8008632:	4607      	mov	r7, r0
 8008634:	460e      	mov	r6, r1
 8008636:	2500      	movs	r5, #0
 8008638:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 800863c:	1c61      	adds	r1, r4, #1
 800863e:	d037      	beq.n	80086b0 <_swiopen+0x88>
 8008640:	3501      	adds	r5, #1
 8008642:	2d14      	cmp	r5, #20
 8008644:	d1f8      	bne.n	8008638 <_swiopen+0x10>
 8008646:	f000 f947 	bl	80088d8 <__errno>
 800864a:	2318      	movs	r3, #24
 800864c:	6003      	str	r3, [r0, #0]
 800864e:	f04f 34ff 	mov.w	r4, #4294967295
 8008652:	e03d      	b.n	80086d0 <_swiopen+0xa8>
 8008654:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8008658:	f240 6301 	movw	r3, #1537	; 0x601
 800865c:	07b2      	lsls	r2, r6, #30
 800865e:	bf48      	it	mi
 8008660:	f044 0402 	orrmi.w	r4, r4, #2
 8008664:	421e      	tst	r6, r3
 8008666:	bf18      	it	ne
 8008668:	f044 0404 	orrne.w	r4, r4, #4
 800866c:	0733      	lsls	r3, r6, #28
 800866e:	bf48      	it	mi
 8008670:	f024 0404 	bicmi.w	r4, r4, #4
 8008674:	4638      	mov	r0, r7
 8008676:	bf48      	it	mi
 8008678:	f044 0408 	orrmi.w	r4, r4, #8
 800867c:	9700      	str	r7, [sp, #0]
 800867e:	f7f7 fda7 	bl	80001d0 <strlen>
 8008682:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8008686:	2401      	movs	r4, #1
 8008688:	4620      	mov	r0, r4
 800868a:	4649      	mov	r1, r9
 800868c:	beab      	bkpt	0x00ab
 800868e:	4604      	mov	r4, r0
 8008690:	2c00      	cmp	r4, #0
 8008692:	db08      	blt.n	80086a6 <_swiopen+0x7e>
 8008694:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8008698:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800869c:	2300      	movs	r3, #0
 800869e:	f8c8 3004 	str.w	r3, [r8, #4]
 80086a2:	462c      	mov	r4, r5
 80086a4:	e014      	b.n	80086d0 <_swiopen+0xa8>
 80086a6:	4620      	mov	r0, r4
 80086a8:	f7ff fe8e 	bl	80083c8 <error>
 80086ac:	4604      	mov	r4, r0
 80086ae:	e00f      	b.n	80086d0 <_swiopen+0xa8>
 80086b0:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80086b4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80086b8:	46e9      	mov	r9, sp
 80086ba:	d1cb      	bne.n	8008654 <_swiopen+0x2c>
 80086bc:	4649      	mov	r1, r9
 80086be:	4638      	mov	r0, r7
 80086c0:	f7ff ff95 	bl	80085ee <_stat>
 80086c4:	3001      	adds	r0, #1
 80086c6:	d0c5      	beq.n	8008654 <_swiopen+0x2c>
 80086c8:	f000 f906 	bl	80088d8 <__errno>
 80086cc:	2311      	movs	r3, #17
 80086ce:	6003      	str	r3, [r0, #0]
 80086d0:	4620      	mov	r0, r4
 80086d2:	b017      	add	sp, #92	; 0x5c
 80086d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086d8:	20000910 	.word	0x20000910

080086dc <_get_semihosting_exts>:
 80086dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086e0:	4606      	mov	r6, r0
 80086e2:	460f      	mov	r7, r1
 80086e4:	482a      	ldr	r0, [pc, #168]	; (8008790 <_get_semihosting_exts+0xb4>)
 80086e6:	2100      	movs	r1, #0
 80086e8:	4615      	mov	r5, r2
 80086ea:	f7ff ff9d 	bl	8008628 <_swiopen>
 80086ee:	462a      	mov	r2, r5
 80086f0:	4604      	mov	r4, r0
 80086f2:	2100      	movs	r1, #0
 80086f4:	4630      	mov	r0, r6
 80086f6:	f000 fa23 	bl	8008b40 <memset>
 80086fa:	1c63      	adds	r3, r4, #1
 80086fc:	d016      	beq.n	800872c <_get_semihosting_exts+0x50>
 80086fe:	4620      	mov	r0, r4
 8008700:	f7ff fe48 	bl	8008394 <findslot>
 8008704:	f04f 090c 	mov.w	r9, #12
 8008708:	4680      	mov	r8, r0
 800870a:	4648      	mov	r0, r9
 800870c:	4641      	mov	r1, r8
 800870e:	beab      	bkpt	0x00ab
 8008710:	4680      	mov	r8, r0
 8008712:	4640      	mov	r0, r8
 8008714:	f7ff fe66 	bl	80083e4 <checkerror>
 8008718:	2803      	cmp	r0, #3
 800871a:	dd02      	ble.n	8008722 <_get_semihosting_exts+0x46>
 800871c:	1ec3      	subs	r3, r0, #3
 800871e:	42ab      	cmp	r3, r5
 8008720:	dc08      	bgt.n	8008734 <_get_semihosting_exts+0x58>
 8008722:	4620      	mov	r0, r4
 8008724:	f7ff ff0e 	bl	8008544 <_close>
 8008728:	f04f 34ff 	mov.w	r4, #4294967295
 800872c:	4620      	mov	r0, r4
 800872e:	b003      	add	sp, #12
 8008730:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008734:	2204      	movs	r2, #4
 8008736:	eb0d 0102 	add.w	r1, sp, r2
 800873a:	4620      	mov	r0, r4
 800873c:	f7ff fe67 	bl	800840e <_read>
 8008740:	2803      	cmp	r0, #3
 8008742:	ddee      	ble.n	8008722 <_get_semihosting_exts+0x46>
 8008744:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008748:	2b53      	cmp	r3, #83	; 0x53
 800874a:	d1ea      	bne.n	8008722 <_get_semihosting_exts+0x46>
 800874c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008750:	2b48      	cmp	r3, #72	; 0x48
 8008752:	d1e6      	bne.n	8008722 <_get_semihosting_exts+0x46>
 8008754:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008758:	2b46      	cmp	r3, #70	; 0x46
 800875a:	d1e2      	bne.n	8008722 <_get_semihosting_exts+0x46>
 800875c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008760:	2b42      	cmp	r3, #66	; 0x42
 8008762:	d1de      	bne.n	8008722 <_get_semihosting_exts+0x46>
 8008764:	2201      	movs	r2, #1
 8008766:	4639      	mov	r1, r7
 8008768:	4620      	mov	r0, r4
 800876a:	f7ff fe6c 	bl	8008446 <_swilseek>
 800876e:	2800      	cmp	r0, #0
 8008770:	dbd7      	blt.n	8008722 <_get_semihosting_exts+0x46>
 8008772:	462a      	mov	r2, r5
 8008774:	4631      	mov	r1, r6
 8008776:	4620      	mov	r0, r4
 8008778:	f7ff fe49 	bl	800840e <_read>
 800877c:	4605      	mov	r5, r0
 800877e:	4620      	mov	r0, r4
 8008780:	f7ff fee0 	bl	8008544 <_close>
 8008784:	4628      	mov	r0, r5
 8008786:	f7ff fe2d 	bl	80083e4 <checkerror>
 800878a:	4604      	mov	r4, r0
 800878c:	e7ce      	b.n	800872c <_get_semihosting_exts+0x50>
 800878e:	bf00      	nop
 8008790:	08009a10 	.word	0x08009a10

08008794 <initialise_semihosting_exts>:
 8008794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008796:	4d0a      	ldr	r5, [pc, #40]	; (80087c0 <initialise_semihosting_exts+0x2c>)
 8008798:	4c0a      	ldr	r4, [pc, #40]	; (80087c4 <initialise_semihosting_exts+0x30>)
 800879a:	2100      	movs	r1, #0
 800879c:	2201      	movs	r2, #1
 800879e:	a801      	add	r0, sp, #4
 80087a0:	6029      	str	r1, [r5, #0]
 80087a2:	6022      	str	r2, [r4, #0]
 80087a4:	f7ff ff9a 	bl	80086dc <_get_semihosting_exts>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	dd07      	ble.n	80087bc <initialise_semihosting_exts+0x28>
 80087ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80087b0:	f003 0201 	and.w	r2, r3, #1
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	602a      	str	r2, [r5, #0]
 80087ba:	6023      	str	r3, [r4, #0]
 80087bc:	b003      	add	sp, #12
 80087be:	bd30      	pop	{r4, r5, pc}
 80087c0:	2000002c 	.word	0x2000002c
 80087c4:	20000030 	.word	0x20000030

080087c8 <_has_ext_stdout_stderr>:
 80087c8:	b510      	push	{r4, lr}
 80087ca:	4c04      	ldr	r4, [pc, #16]	; (80087dc <_has_ext_stdout_stderr+0x14>)
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	da01      	bge.n	80087d6 <_has_ext_stdout_stderr+0xe>
 80087d2:	f7ff ffdf 	bl	8008794 <initialise_semihosting_exts>
 80087d6:	6820      	ldr	r0, [r4, #0]
 80087d8:	bd10      	pop	{r4, pc}
 80087da:	bf00      	nop
 80087dc:	20000030 	.word	0x20000030

080087e0 <initialise_monitor_handles>:
 80087e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e4:	b085      	sub	sp, #20
 80087e6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8008898 <initialise_monitor_handles+0xb8>
 80087ea:	f8cd 9004 	str.w	r9, [sp, #4]
 80087ee:	2303      	movs	r3, #3
 80087f0:	2400      	movs	r4, #0
 80087f2:	9303      	str	r3, [sp, #12]
 80087f4:	af01      	add	r7, sp, #4
 80087f6:	9402      	str	r4, [sp, #8]
 80087f8:	2501      	movs	r5, #1
 80087fa:	4628      	mov	r0, r5
 80087fc:	4639      	mov	r1, r7
 80087fe:	beab      	bkpt	0x00ab
 8008800:	4605      	mov	r5, r0
 8008802:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800889c <initialise_monitor_handles+0xbc>
 8008806:	4623      	mov	r3, r4
 8008808:	4c20      	ldr	r4, [pc, #128]	; (800888c <initialise_monitor_handles+0xac>)
 800880a:	f8c8 5000 	str.w	r5, [r8]
 800880e:	f04f 32ff 	mov.w	r2, #4294967295
 8008812:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8008816:	3301      	adds	r3, #1
 8008818:	2b14      	cmp	r3, #20
 800881a:	d1fa      	bne.n	8008812 <initialise_monitor_handles+0x32>
 800881c:	f7ff ffd4 	bl	80087c8 <_has_ext_stdout_stderr>
 8008820:	4d1b      	ldr	r5, [pc, #108]	; (8008890 <initialise_monitor_handles+0xb0>)
 8008822:	b1d0      	cbz	r0, 800885a <initialise_monitor_handles+0x7a>
 8008824:	f04f 0a03 	mov.w	sl, #3
 8008828:	2304      	movs	r3, #4
 800882a:	f8cd 9004 	str.w	r9, [sp, #4]
 800882e:	2601      	movs	r6, #1
 8008830:	f8cd a00c 	str.w	sl, [sp, #12]
 8008834:	9302      	str	r3, [sp, #8]
 8008836:	4630      	mov	r0, r6
 8008838:	4639      	mov	r1, r7
 800883a:	beab      	bkpt	0x00ab
 800883c:	4683      	mov	fp, r0
 800883e:	4b15      	ldr	r3, [pc, #84]	; (8008894 <initialise_monitor_handles+0xb4>)
 8008840:	f8cd 9004 	str.w	r9, [sp, #4]
 8008844:	f8c3 b000 	str.w	fp, [r3]
 8008848:	2308      	movs	r3, #8
 800884a:	f8cd a00c 	str.w	sl, [sp, #12]
 800884e:	9302      	str	r3, [sp, #8]
 8008850:	4630      	mov	r0, r6
 8008852:	4639      	mov	r1, r7
 8008854:	beab      	bkpt	0x00ab
 8008856:	4606      	mov	r6, r0
 8008858:	602e      	str	r6, [r5, #0]
 800885a:	682b      	ldr	r3, [r5, #0]
 800885c:	3301      	adds	r3, #1
 800885e:	bf02      	ittt	eq
 8008860:	4b0c      	ldreq	r3, [pc, #48]	; (8008894 <initialise_monitor_handles+0xb4>)
 8008862:	681b      	ldreq	r3, [r3, #0]
 8008864:	602b      	streq	r3, [r5, #0]
 8008866:	2600      	movs	r6, #0
 8008868:	f8d8 3000 	ldr.w	r3, [r8]
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	6066      	str	r6, [r4, #4]
 8008870:	f7ff ffaa 	bl	80087c8 <_has_ext_stdout_stderr>
 8008874:	b130      	cbz	r0, 8008884 <initialise_monitor_handles+0xa4>
 8008876:	4b07      	ldr	r3, [pc, #28]	; (8008894 <initialise_monitor_handles+0xb4>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800887e:	682b      	ldr	r3, [r5, #0]
 8008880:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8008884:	b005      	add	sp, #20
 8008886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888a:	bf00      	nop
 800888c:	20000910 	.word	0x20000910
 8008890:	20000904 	.word	0x20000904
 8008894:	2000090c 	.word	0x2000090c
 8008898:	08009a26 	.word	0x08009a26
 800889c:	20000908 	.word	0x20000908

080088a0 <_isatty>:
 80088a0:	b570      	push	{r4, r5, r6, lr}
 80088a2:	f7ff fd77 	bl	8008394 <findslot>
 80088a6:	2509      	movs	r5, #9
 80088a8:	4604      	mov	r4, r0
 80088aa:	b920      	cbnz	r0, 80088b6 <_isatty+0x16>
 80088ac:	f000 f814 	bl	80088d8 <__errno>
 80088b0:	6005      	str	r5, [r0, #0]
 80088b2:	4620      	mov	r0, r4
 80088b4:	bd70      	pop	{r4, r5, r6, pc}
 80088b6:	4628      	mov	r0, r5
 80088b8:	4621      	mov	r1, r4
 80088ba:	beab      	bkpt	0x00ab
 80088bc:	4604      	mov	r4, r0
 80088be:	2c01      	cmp	r4, #1
 80088c0:	d0f7      	beq.n	80088b2 <_isatty+0x12>
 80088c2:	f000 f809 	bl	80088d8 <__errno>
 80088c6:	2400      	movs	r4, #0
 80088c8:	4605      	mov	r5, r0
 80088ca:	2613      	movs	r6, #19
 80088cc:	4630      	mov	r0, r6
 80088ce:	4621      	mov	r1, r4
 80088d0:	beab      	bkpt	0x00ab
 80088d2:	4606      	mov	r6, r0
 80088d4:	602e      	str	r6, [r5, #0]
 80088d6:	e7ec      	b.n	80088b2 <_isatty+0x12>

080088d8 <__errno>:
 80088d8:	4b01      	ldr	r3, [pc, #4]	; (80088e0 <__errno+0x8>)
 80088da:	6818      	ldr	r0, [r3, #0]
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	20000034 	.word	0x20000034

080088e4 <std>:
 80088e4:	2300      	movs	r3, #0
 80088e6:	b510      	push	{r4, lr}
 80088e8:	4604      	mov	r4, r0
 80088ea:	e9c0 3300 	strd	r3, r3, [r0]
 80088ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088f2:	6083      	str	r3, [r0, #8]
 80088f4:	8181      	strh	r1, [r0, #12]
 80088f6:	6643      	str	r3, [r0, #100]	; 0x64
 80088f8:	81c2      	strh	r2, [r0, #14]
 80088fa:	6183      	str	r3, [r0, #24]
 80088fc:	4619      	mov	r1, r3
 80088fe:	2208      	movs	r2, #8
 8008900:	305c      	adds	r0, #92	; 0x5c
 8008902:	f000 f91d 	bl	8008b40 <memset>
 8008906:	4b05      	ldr	r3, [pc, #20]	; (800891c <std+0x38>)
 8008908:	6263      	str	r3, [r4, #36]	; 0x24
 800890a:	4b05      	ldr	r3, [pc, #20]	; (8008920 <std+0x3c>)
 800890c:	62a3      	str	r3, [r4, #40]	; 0x28
 800890e:	4b05      	ldr	r3, [pc, #20]	; (8008924 <std+0x40>)
 8008910:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008912:	4b05      	ldr	r3, [pc, #20]	; (8008928 <std+0x44>)
 8008914:	6224      	str	r4, [r4, #32]
 8008916:	6323      	str	r3, [r4, #48]	; 0x30
 8008918:	bd10      	pop	{r4, pc}
 800891a:	bf00      	nop
 800891c:	08008d8d 	.word	0x08008d8d
 8008920:	08008daf 	.word	0x08008daf
 8008924:	08008de7 	.word	0x08008de7
 8008928:	08008e0b 	.word	0x08008e0b

0800892c <_cleanup_r>:
 800892c:	4901      	ldr	r1, [pc, #4]	; (8008934 <_cleanup_r+0x8>)
 800892e:	f000 b8af 	b.w	8008a90 <_fwalk_reent>
 8008932:	bf00      	nop
 8008934:	08008f65 	.word	0x08008f65

08008938 <__sfmoreglue>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	2268      	movs	r2, #104	; 0x68
 800893c:	1e4d      	subs	r5, r1, #1
 800893e:	4355      	muls	r5, r2
 8008940:	460e      	mov	r6, r1
 8008942:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008946:	f000 f96f 	bl	8008c28 <_malloc_r>
 800894a:	4604      	mov	r4, r0
 800894c:	b140      	cbz	r0, 8008960 <__sfmoreglue+0x28>
 800894e:	2100      	movs	r1, #0
 8008950:	e9c0 1600 	strd	r1, r6, [r0]
 8008954:	300c      	adds	r0, #12
 8008956:	60a0      	str	r0, [r4, #8]
 8008958:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800895c:	f000 f8f0 	bl	8008b40 <memset>
 8008960:	4620      	mov	r0, r4
 8008962:	bd70      	pop	{r4, r5, r6, pc}

08008964 <__sfp_lock_acquire>:
 8008964:	4801      	ldr	r0, [pc, #4]	; (800896c <__sfp_lock_acquire+0x8>)
 8008966:	f000 b8d8 	b.w	8008b1a <__retarget_lock_acquire_recursive>
 800896a:	bf00      	nop
 800896c:	200009b1 	.word	0x200009b1

08008970 <__sfp_lock_release>:
 8008970:	4801      	ldr	r0, [pc, #4]	; (8008978 <__sfp_lock_release+0x8>)
 8008972:	f000 b8d3 	b.w	8008b1c <__retarget_lock_release_recursive>
 8008976:	bf00      	nop
 8008978:	200009b1 	.word	0x200009b1

0800897c <__sinit_lock_acquire>:
 800897c:	4801      	ldr	r0, [pc, #4]	; (8008984 <__sinit_lock_acquire+0x8>)
 800897e:	f000 b8cc 	b.w	8008b1a <__retarget_lock_acquire_recursive>
 8008982:	bf00      	nop
 8008984:	200009b2 	.word	0x200009b2

08008988 <__sinit_lock_release>:
 8008988:	4801      	ldr	r0, [pc, #4]	; (8008990 <__sinit_lock_release+0x8>)
 800898a:	f000 b8c7 	b.w	8008b1c <__retarget_lock_release_recursive>
 800898e:	bf00      	nop
 8008990:	200009b2 	.word	0x200009b2

08008994 <__sinit>:
 8008994:	b510      	push	{r4, lr}
 8008996:	4604      	mov	r4, r0
 8008998:	f7ff fff0 	bl	800897c <__sinit_lock_acquire>
 800899c:	69a3      	ldr	r3, [r4, #24]
 800899e:	b11b      	cbz	r3, 80089a8 <__sinit+0x14>
 80089a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a4:	f7ff bff0 	b.w	8008988 <__sinit_lock_release>
 80089a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80089ac:	6523      	str	r3, [r4, #80]	; 0x50
 80089ae:	4b13      	ldr	r3, [pc, #76]	; (80089fc <__sinit+0x68>)
 80089b0:	4a13      	ldr	r2, [pc, #76]	; (8008a00 <__sinit+0x6c>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80089b6:	42a3      	cmp	r3, r4
 80089b8:	bf04      	itt	eq
 80089ba:	2301      	moveq	r3, #1
 80089bc:	61a3      	streq	r3, [r4, #24]
 80089be:	4620      	mov	r0, r4
 80089c0:	f000 f820 	bl	8008a04 <__sfp>
 80089c4:	6060      	str	r0, [r4, #4]
 80089c6:	4620      	mov	r0, r4
 80089c8:	f000 f81c 	bl	8008a04 <__sfp>
 80089cc:	60a0      	str	r0, [r4, #8]
 80089ce:	4620      	mov	r0, r4
 80089d0:	f000 f818 	bl	8008a04 <__sfp>
 80089d4:	2200      	movs	r2, #0
 80089d6:	60e0      	str	r0, [r4, #12]
 80089d8:	2104      	movs	r1, #4
 80089da:	6860      	ldr	r0, [r4, #4]
 80089dc:	f7ff ff82 	bl	80088e4 <std>
 80089e0:	68a0      	ldr	r0, [r4, #8]
 80089e2:	2201      	movs	r2, #1
 80089e4:	2109      	movs	r1, #9
 80089e6:	f7ff ff7d 	bl	80088e4 <std>
 80089ea:	68e0      	ldr	r0, [r4, #12]
 80089ec:	2202      	movs	r2, #2
 80089ee:	2112      	movs	r1, #18
 80089f0:	f7ff ff78 	bl	80088e4 <std>
 80089f4:	2301      	movs	r3, #1
 80089f6:	61a3      	str	r3, [r4, #24]
 80089f8:	e7d2      	b.n	80089a0 <__sinit+0xc>
 80089fa:	bf00      	nop
 80089fc:	08009a8c 	.word	0x08009a8c
 8008a00:	0800892d 	.word	0x0800892d

08008a04 <__sfp>:
 8008a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a06:	4607      	mov	r7, r0
 8008a08:	f7ff ffac 	bl	8008964 <__sfp_lock_acquire>
 8008a0c:	4b1e      	ldr	r3, [pc, #120]	; (8008a88 <__sfp+0x84>)
 8008a0e:	681e      	ldr	r6, [r3, #0]
 8008a10:	69b3      	ldr	r3, [r6, #24]
 8008a12:	b913      	cbnz	r3, 8008a1a <__sfp+0x16>
 8008a14:	4630      	mov	r0, r6
 8008a16:	f7ff ffbd 	bl	8008994 <__sinit>
 8008a1a:	3648      	adds	r6, #72	; 0x48
 8008a1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a20:	3b01      	subs	r3, #1
 8008a22:	d503      	bpl.n	8008a2c <__sfp+0x28>
 8008a24:	6833      	ldr	r3, [r6, #0]
 8008a26:	b30b      	cbz	r3, 8008a6c <__sfp+0x68>
 8008a28:	6836      	ldr	r6, [r6, #0]
 8008a2a:	e7f7      	b.n	8008a1c <__sfp+0x18>
 8008a2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a30:	b9d5      	cbnz	r5, 8008a68 <__sfp+0x64>
 8008a32:	4b16      	ldr	r3, [pc, #88]	; (8008a8c <__sfp+0x88>)
 8008a34:	60e3      	str	r3, [r4, #12]
 8008a36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a3a:	6665      	str	r5, [r4, #100]	; 0x64
 8008a3c:	f000 f86c 	bl	8008b18 <__retarget_lock_init_recursive>
 8008a40:	f7ff ff96 	bl	8008970 <__sfp_lock_release>
 8008a44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a4c:	6025      	str	r5, [r4, #0]
 8008a4e:	61a5      	str	r5, [r4, #24]
 8008a50:	2208      	movs	r2, #8
 8008a52:	4629      	mov	r1, r5
 8008a54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a58:	f000 f872 	bl	8008b40 <memset>
 8008a5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a64:	4620      	mov	r0, r4
 8008a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a68:	3468      	adds	r4, #104	; 0x68
 8008a6a:	e7d9      	b.n	8008a20 <__sfp+0x1c>
 8008a6c:	2104      	movs	r1, #4
 8008a6e:	4638      	mov	r0, r7
 8008a70:	f7ff ff62 	bl	8008938 <__sfmoreglue>
 8008a74:	4604      	mov	r4, r0
 8008a76:	6030      	str	r0, [r6, #0]
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d1d5      	bne.n	8008a28 <__sfp+0x24>
 8008a7c:	f7ff ff78 	bl	8008970 <__sfp_lock_release>
 8008a80:	230c      	movs	r3, #12
 8008a82:	603b      	str	r3, [r7, #0]
 8008a84:	e7ee      	b.n	8008a64 <__sfp+0x60>
 8008a86:	bf00      	nop
 8008a88:	08009a8c 	.word	0x08009a8c
 8008a8c:	ffff0001 	.word	0xffff0001

08008a90 <_fwalk_reent>:
 8008a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a94:	4606      	mov	r6, r0
 8008a96:	4688      	mov	r8, r1
 8008a98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a9c:	2700      	movs	r7, #0
 8008a9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008aa2:	f1b9 0901 	subs.w	r9, r9, #1
 8008aa6:	d505      	bpl.n	8008ab4 <_fwalk_reent+0x24>
 8008aa8:	6824      	ldr	r4, [r4, #0]
 8008aaa:	2c00      	cmp	r4, #0
 8008aac:	d1f7      	bne.n	8008a9e <_fwalk_reent+0xe>
 8008aae:	4638      	mov	r0, r7
 8008ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ab4:	89ab      	ldrh	r3, [r5, #12]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d907      	bls.n	8008aca <_fwalk_reent+0x3a>
 8008aba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	d003      	beq.n	8008aca <_fwalk_reent+0x3a>
 8008ac2:	4629      	mov	r1, r5
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	47c0      	blx	r8
 8008ac8:	4307      	orrs	r7, r0
 8008aca:	3568      	adds	r5, #104	; 0x68
 8008acc:	e7e9      	b.n	8008aa2 <_fwalk_reent+0x12>
	...

08008ad0 <__libc_init_array>:
 8008ad0:	b570      	push	{r4, r5, r6, lr}
 8008ad2:	4d0d      	ldr	r5, [pc, #52]	; (8008b08 <__libc_init_array+0x38>)
 8008ad4:	4c0d      	ldr	r4, [pc, #52]	; (8008b0c <__libc_init_array+0x3c>)
 8008ad6:	1b64      	subs	r4, r4, r5
 8008ad8:	10a4      	asrs	r4, r4, #2
 8008ada:	2600      	movs	r6, #0
 8008adc:	42a6      	cmp	r6, r4
 8008ade:	d109      	bne.n	8008af4 <__libc_init_array+0x24>
 8008ae0:	4d0b      	ldr	r5, [pc, #44]	; (8008b10 <__libc_init_array+0x40>)
 8008ae2:	4c0c      	ldr	r4, [pc, #48]	; (8008b14 <__libc_init_array+0x44>)
 8008ae4:	f000 ff28 	bl	8009938 <_init>
 8008ae8:	1b64      	subs	r4, r4, r5
 8008aea:	10a4      	asrs	r4, r4, #2
 8008aec:	2600      	movs	r6, #0
 8008aee:	42a6      	cmp	r6, r4
 8008af0:	d105      	bne.n	8008afe <__libc_init_array+0x2e>
 8008af2:	bd70      	pop	{r4, r5, r6, pc}
 8008af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008af8:	4798      	blx	r3
 8008afa:	3601      	adds	r6, #1
 8008afc:	e7ee      	b.n	8008adc <__libc_init_array+0xc>
 8008afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b02:	4798      	blx	r3
 8008b04:	3601      	adds	r6, #1
 8008b06:	e7f2      	b.n	8008aee <__libc_init_array+0x1e>
 8008b08:	08009acc 	.word	0x08009acc
 8008b0c:	08009acc 	.word	0x08009acc
 8008b10:	08009acc 	.word	0x08009acc
 8008b14:	08009ad0 	.word	0x08009ad0

08008b18 <__retarget_lock_init_recursive>:
 8008b18:	4770      	bx	lr

08008b1a <__retarget_lock_acquire_recursive>:
 8008b1a:	4770      	bx	lr

08008b1c <__retarget_lock_release_recursive>:
 8008b1c:	4770      	bx	lr
	...

08008b20 <malloc>:
 8008b20:	4b02      	ldr	r3, [pc, #8]	; (8008b2c <malloc+0xc>)
 8008b22:	4601      	mov	r1, r0
 8008b24:	6818      	ldr	r0, [r3, #0]
 8008b26:	f000 b87f 	b.w	8008c28 <_malloc_r>
 8008b2a:	bf00      	nop
 8008b2c:	20000034 	.word	0x20000034

08008b30 <free>:
 8008b30:	4b02      	ldr	r3, [pc, #8]	; (8008b3c <free+0xc>)
 8008b32:	4601      	mov	r1, r0
 8008b34:	6818      	ldr	r0, [r3, #0]
 8008b36:	f000 b80b 	b.w	8008b50 <_free_r>
 8008b3a:	bf00      	nop
 8008b3c:	20000034 	.word	0x20000034

08008b40 <memset>:
 8008b40:	4402      	add	r2, r0
 8008b42:	4603      	mov	r3, r0
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d100      	bne.n	8008b4a <memset+0xa>
 8008b48:	4770      	bx	lr
 8008b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b4e:	e7f9      	b.n	8008b44 <memset+0x4>

08008b50 <_free_r>:
 8008b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b52:	2900      	cmp	r1, #0
 8008b54:	d044      	beq.n	8008be0 <_free_r+0x90>
 8008b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b5a:	9001      	str	r0, [sp, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b62:	bfb8      	it	lt
 8008b64:	18e4      	addlt	r4, r4, r3
 8008b66:	f000 fa4b 	bl	8009000 <__malloc_lock>
 8008b6a:	4a1e      	ldr	r2, [pc, #120]	; (8008be4 <_free_r+0x94>)
 8008b6c:	9801      	ldr	r0, [sp, #4]
 8008b6e:	6813      	ldr	r3, [r2, #0]
 8008b70:	b933      	cbnz	r3, 8008b80 <_free_r+0x30>
 8008b72:	6063      	str	r3, [r4, #4]
 8008b74:	6014      	str	r4, [r2, #0]
 8008b76:	b003      	add	sp, #12
 8008b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b7c:	f000 ba46 	b.w	800900c <__malloc_unlock>
 8008b80:	42a3      	cmp	r3, r4
 8008b82:	d908      	bls.n	8008b96 <_free_r+0x46>
 8008b84:	6825      	ldr	r5, [r4, #0]
 8008b86:	1961      	adds	r1, r4, r5
 8008b88:	428b      	cmp	r3, r1
 8008b8a:	bf01      	itttt	eq
 8008b8c:	6819      	ldreq	r1, [r3, #0]
 8008b8e:	685b      	ldreq	r3, [r3, #4]
 8008b90:	1949      	addeq	r1, r1, r5
 8008b92:	6021      	streq	r1, [r4, #0]
 8008b94:	e7ed      	b.n	8008b72 <_free_r+0x22>
 8008b96:	461a      	mov	r2, r3
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	b10b      	cbz	r3, 8008ba0 <_free_r+0x50>
 8008b9c:	42a3      	cmp	r3, r4
 8008b9e:	d9fa      	bls.n	8008b96 <_free_r+0x46>
 8008ba0:	6811      	ldr	r1, [r2, #0]
 8008ba2:	1855      	adds	r5, r2, r1
 8008ba4:	42a5      	cmp	r5, r4
 8008ba6:	d10b      	bne.n	8008bc0 <_free_r+0x70>
 8008ba8:	6824      	ldr	r4, [r4, #0]
 8008baa:	4421      	add	r1, r4
 8008bac:	1854      	adds	r4, r2, r1
 8008bae:	42a3      	cmp	r3, r4
 8008bb0:	6011      	str	r1, [r2, #0]
 8008bb2:	d1e0      	bne.n	8008b76 <_free_r+0x26>
 8008bb4:	681c      	ldr	r4, [r3, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	6053      	str	r3, [r2, #4]
 8008bba:	4421      	add	r1, r4
 8008bbc:	6011      	str	r1, [r2, #0]
 8008bbe:	e7da      	b.n	8008b76 <_free_r+0x26>
 8008bc0:	d902      	bls.n	8008bc8 <_free_r+0x78>
 8008bc2:	230c      	movs	r3, #12
 8008bc4:	6003      	str	r3, [r0, #0]
 8008bc6:	e7d6      	b.n	8008b76 <_free_r+0x26>
 8008bc8:	6825      	ldr	r5, [r4, #0]
 8008bca:	1961      	adds	r1, r4, r5
 8008bcc:	428b      	cmp	r3, r1
 8008bce:	bf04      	itt	eq
 8008bd0:	6819      	ldreq	r1, [r3, #0]
 8008bd2:	685b      	ldreq	r3, [r3, #4]
 8008bd4:	6063      	str	r3, [r4, #4]
 8008bd6:	bf04      	itt	eq
 8008bd8:	1949      	addeq	r1, r1, r5
 8008bda:	6021      	streq	r1, [r4, #0]
 8008bdc:	6054      	str	r4, [r2, #4]
 8008bde:	e7ca      	b.n	8008b76 <_free_r+0x26>
 8008be0:	b003      	add	sp, #12
 8008be2:	bd30      	pop	{r4, r5, pc}
 8008be4:	200009b4 	.word	0x200009b4

08008be8 <sbrk_aligned>:
 8008be8:	b570      	push	{r4, r5, r6, lr}
 8008bea:	4e0e      	ldr	r6, [pc, #56]	; (8008c24 <sbrk_aligned+0x3c>)
 8008bec:	460c      	mov	r4, r1
 8008bee:	6831      	ldr	r1, [r6, #0]
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	b911      	cbnz	r1, 8008bfa <sbrk_aligned+0x12>
 8008bf4:	f000 f8ba 	bl	8008d6c <_sbrk_r>
 8008bf8:	6030      	str	r0, [r6, #0]
 8008bfa:	4621      	mov	r1, r4
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	f000 f8b5 	bl	8008d6c <_sbrk_r>
 8008c02:	1c43      	adds	r3, r0, #1
 8008c04:	d00a      	beq.n	8008c1c <sbrk_aligned+0x34>
 8008c06:	1cc4      	adds	r4, r0, #3
 8008c08:	f024 0403 	bic.w	r4, r4, #3
 8008c0c:	42a0      	cmp	r0, r4
 8008c0e:	d007      	beq.n	8008c20 <sbrk_aligned+0x38>
 8008c10:	1a21      	subs	r1, r4, r0
 8008c12:	4628      	mov	r0, r5
 8008c14:	f000 f8aa 	bl	8008d6c <_sbrk_r>
 8008c18:	3001      	adds	r0, #1
 8008c1a:	d101      	bne.n	8008c20 <sbrk_aligned+0x38>
 8008c1c:	f04f 34ff 	mov.w	r4, #4294967295
 8008c20:	4620      	mov	r0, r4
 8008c22:	bd70      	pop	{r4, r5, r6, pc}
 8008c24:	200009b8 	.word	0x200009b8

08008c28 <_malloc_r>:
 8008c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c2c:	1ccd      	adds	r5, r1, #3
 8008c2e:	f025 0503 	bic.w	r5, r5, #3
 8008c32:	3508      	adds	r5, #8
 8008c34:	2d0c      	cmp	r5, #12
 8008c36:	bf38      	it	cc
 8008c38:	250c      	movcc	r5, #12
 8008c3a:	2d00      	cmp	r5, #0
 8008c3c:	4607      	mov	r7, r0
 8008c3e:	db01      	blt.n	8008c44 <_malloc_r+0x1c>
 8008c40:	42a9      	cmp	r1, r5
 8008c42:	d905      	bls.n	8008c50 <_malloc_r+0x28>
 8008c44:	230c      	movs	r3, #12
 8008c46:	603b      	str	r3, [r7, #0]
 8008c48:	2600      	movs	r6, #0
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c50:	4e2e      	ldr	r6, [pc, #184]	; (8008d0c <_malloc_r+0xe4>)
 8008c52:	f000 f9d5 	bl	8009000 <__malloc_lock>
 8008c56:	6833      	ldr	r3, [r6, #0]
 8008c58:	461c      	mov	r4, r3
 8008c5a:	bb34      	cbnz	r4, 8008caa <_malloc_r+0x82>
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	4638      	mov	r0, r7
 8008c60:	f7ff ffc2 	bl	8008be8 <sbrk_aligned>
 8008c64:	1c43      	adds	r3, r0, #1
 8008c66:	4604      	mov	r4, r0
 8008c68:	d14d      	bne.n	8008d06 <_malloc_r+0xde>
 8008c6a:	6834      	ldr	r4, [r6, #0]
 8008c6c:	4626      	mov	r6, r4
 8008c6e:	2e00      	cmp	r6, #0
 8008c70:	d140      	bne.n	8008cf4 <_malloc_r+0xcc>
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	4631      	mov	r1, r6
 8008c76:	4638      	mov	r0, r7
 8008c78:	eb04 0803 	add.w	r8, r4, r3
 8008c7c:	f000 f876 	bl	8008d6c <_sbrk_r>
 8008c80:	4580      	cmp	r8, r0
 8008c82:	d13a      	bne.n	8008cfa <_malloc_r+0xd2>
 8008c84:	6821      	ldr	r1, [r4, #0]
 8008c86:	3503      	adds	r5, #3
 8008c88:	1a6d      	subs	r5, r5, r1
 8008c8a:	f025 0503 	bic.w	r5, r5, #3
 8008c8e:	3508      	adds	r5, #8
 8008c90:	2d0c      	cmp	r5, #12
 8008c92:	bf38      	it	cc
 8008c94:	250c      	movcc	r5, #12
 8008c96:	4629      	mov	r1, r5
 8008c98:	4638      	mov	r0, r7
 8008c9a:	f7ff ffa5 	bl	8008be8 <sbrk_aligned>
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	d02b      	beq.n	8008cfa <_malloc_r+0xd2>
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	442b      	add	r3, r5
 8008ca6:	6023      	str	r3, [r4, #0]
 8008ca8:	e00e      	b.n	8008cc8 <_malloc_r+0xa0>
 8008caa:	6822      	ldr	r2, [r4, #0]
 8008cac:	1b52      	subs	r2, r2, r5
 8008cae:	d41e      	bmi.n	8008cee <_malloc_r+0xc6>
 8008cb0:	2a0b      	cmp	r2, #11
 8008cb2:	d916      	bls.n	8008ce2 <_malloc_r+0xba>
 8008cb4:	1961      	adds	r1, r4, r5
 8008cb6:	42a3      	cmp	r3, r4
 8008cb8:	6025      	str	r5, [r4, #0]
 8008cba:	bf18      	it	ne
 8008cbc:	6059      	strne	r1, [r3, #4]
 8008cbe:	6863      	ldr	r3, [r4, #4]
 8008cc0:	bf08      	it	eq
 8008cc2:	6031      	streq	r1, [r6, #0]
 8008cc4:	5162      	str	r2, [r4, r5]
 8008cc6:	604b      	str	r3, [r1, #4]
 8008cc8:	4638      	mov	r0, r7
 8008cca:	f104 060b 	add.w	r6, r4, #11
 8008cce:	f000 f99d 	bl	800900c <__malloc_unlock>
 8008cd2:	f026 0607 	bic.w	r6, r6, #7
 8008cd6:	1d23      	adds	r3, r4, #4
 8008cd8:	1af2      	subs	r2, r6, r3
 8008cda:	d0b6      	beq.n	8008c4a <_malloc_r+0x22>
 8008cdc:	1b9b      	subs	r3, r3, r6
 8008cde:	50a3      	str	r3, [r4, r2]
 8008ce0:	e7b3      	b.n	8008c4a <_malloc_r+0x22>
 8008ce2:	6862      	ldr	r2, [r4, #4]
 8008ce4:	42a3      	cmp	r3, r4
 8008ce6:	bf0c      	ite	eq
 8008ce8:	6032      	streq	r2, [r6, #0]
 8008cea:	605a      	strne	r2, [r3, #4]
 8008cec:	e7ec      	b.n	8008cc8 <_malloc_r+0xa0>
 8008cee:	4623      	mov	r3, r4
 8008cf0:	6864      	ldr	r4, [r4, #4]
 8008cf2:	e7b2      	b.n	8008c5a <_malloc_r+0x32>
 8008cf4:	4634      	mov	r4, r6
 8008cf6:	6876      	ldr	r6, [r6, #4]
 8008cf8:	e7b9      	b.n	8008c6e <_malloc_r+0x46>
 8008cfa:	230c      	movs	r3, #12
 8008cfc:	603b      	str	r3, [r7, #0]
 8008cfe:	4638      	mov	r0, r7
 8008d00:	f000 f984 	bl	800900c <__malloc_unlock>
 8008d04:	e7a1      	b.n	8008c4a <_malloc_r+0x22>
 8008d06:	6025      	str	r5, [r4, #0]
 8008d08:	e7de      	b.n	8008cc8 <_malloc_r+0xa0>
 8008d0a:	bf00      	nop
 8008d0c:	200009b4 	.word	0x200009b4

08008d10 <iprintf>:
 8008d10:	b40f      	push	{r0, r1, r2, r3}
 8008d12:	4b0a      	ldr	r3, [pc, #40]	; (8008d3c <iprintf+0x2c>)
 8008d14:	b513      	push	{r0, r1, r4, lr}
 8008d16:	681c      	ldr	r4, [r3, #0]
 8008d18:	b124      	cbz	r4, 8008d24 <iprintf+0x14>
 8008d1a:	69a3      	ldr	r3, [r4, #24]
 8008d1c:	b913      	cbnz	r3, 8008d24 <iprintf+0x14>
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f7ff fe38 	bl	8008994 <__sinit>
 8008d24:	ab05      	add	r3, sp, #20
 8008d26:	9a04      	ldr	r2, [sp, #16]
 8008d28:	68a1      	ldr	r1, [r4, #8]
 8008d2a:	9301      	str	r3, [sp, #4]
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f000 f99d 	bl	800906c <_vfiprintf_r>
 8008d32:	b002      	add	sp, #8
 8008d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d38:	b004      	add	sp, #16
 8008d3a:	4770      	bx	lr
 8008d3c:	20000034 	.word	0x20000034

08008d40 <putchar>:
 8008d40:	4b09      	ldr	r3, [pc, #36]	; (8008d68 <putchar+0x28>)
 8008d42:	b513      	push	{r0, r1, r4, lr}
 8008d44:	681c      	ldr	r4, [r3, #0]
 8008d46:	4601      	mov	r1, r0
 8008d48:	b134      	cbz	r4, 8008d58 <putchar+0x18>
 8008d4a:	69a3      	ldr	r3, [r4, #24]
 8008d4c:	b923      	cbnz	r3, 8008d58 <putchar+0x18>
 8008d4e:	9001      	str	r0, [sp, #4]
 8008d50:	4620      	mov	r0, r4
 8008d52:	f7ff fe1f 	bl	8008994 <__sinit>
 8008d56:	9901      	ldr	r1, [sp, #4]
 8008d58:	68a2      	ldr	r2, [r4, #8]
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	b002      	add	sp, #8
 8008d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d62:	f000 bc47 	b.w	80095f4 <_putc_r>
 8008d66:	bf00      	nop
 8008d68:	20000034 	.word	0x20000034

08008d6c <_sbrk_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4d06      	ldr	r5, [pc, #24]	; (8008d88 <_sbrk_r+0x1c>)
 8008d70:	2300      	movs	r3, #0
 8008d72:	4604      	mov	r4, r0
 8008d74:	4608      	mov	r0, r1
 8008d76:	602b      	str	r3, [r5, #0]
 8008d78:	f7f8 f91c 	bl	8000fb4 <_sbrk>
 8008d7c:	1c43      	adds	r3, r0, #1
 8008d7e:	d102      	bne.n	8008d86 <_sbrk_r+0x1a>
 8008d80:	682b      	ldr	r3, [r5, #0]
 8008d82:	b103      	cbz	r3, 8008d86 <_sbrk_r+0x1a>
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	200009bc 	.word	0x200009bc

08008d8c <__sread>:
 8008d8c:	b510      	push	{r4, lr}
 8008d8e:	460c      	mov	r4, r1
 8008d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d94:	f000 fc76 	bl	8009684 <_read_r>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	bfab      	itete	ge
 8008d9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8008da0:	181b      	addge	r3, r3, r0
 8008da2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008da6:	bfac      	ite	ge
 8008da8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008daa:	81a3      	strhlt	r3, [r4, #12]
 8008dac:	bd10      	pop	{r4, pc}

08008dae <__swrite>:
 8008dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008db2:	461f      	mov	r7, r3
 8008db4:	898b      	ldrh	r3, [r1, #12]
 8008db6:	05db      	lsls	r3, r3, #23
 8008db8:	4605      	mov	r5, r0
 8008dba:	460c      	mov	r4, r1
 8008dbc:	4616      	mov	r6, r2
 8008dbe:	d505      	bpl.n	8008dcc <__swrite+0x1e>
 8008dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f000 f908 	bl	8008fdc <_lseek_r>
 8008dcc:	89a3      	ldrh	r3, [r4, #12]
 8008dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dd6:	81a3      	strh	r3, [r4, #12]
 8008dd8:	4632      	mov	r2, r6
 8008dda:	463b      	mov	r3, r7
 8008ddc:	4628      	mov	r0, r5
 8008dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008de2:	f000 b817 	b.w	8008e14 <_write_r>

08008de6 <__sseek>:
 8008de6:	b510      	push	{r4, lr}
 8008de8:	460c      	mov	r4, r1
 8008dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dee:	f000 f8f5 	bl	8008fdc <_lseek_r>
 8008df2:	1c43      	adds	r3, r0, #1
 8008df4:	89a3      	ldrh	r3, [r4, #12]
 8008df6:	bf15      	itete	ne
 8008df8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008dfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008dfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e02:	81a3      	strheq	r3, [r4, #12]
 8008e04:	bf18      	it	ne
 8008e06:	81a3      	strhne	r3, [r4, #12]
 8008e08:	bd10      	pop	{r4, pc}

08008e0a <__sclose>:
 8008e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e0e:	f000 b813 	b.w	8008e38 <_close_r>
	...

08008e14 <_write_r>:
 8008e14:	b538      	push	{r3, r4, r5, lr}
 8008e16:	4d07      	ldr	r5, [pc, #28]	; (8008e34 <_write_r+0x20>)
 8008e18:	4604      	mov	r4, r0
 8008e1a:	4608      	mov	r0, r1
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	2200      	movs	r2, #0
 8008e20:	602a      	str	r2, [r5, #0]
 8008e22:	461a      	mov	r2, r3
 8008e24:	f7ff fb5d 	bl	80084e2 <_write>
 8008e28:	1c43      	adds	r3, r0, #1
 8008e2a:	d102      	bne.n	8008e32 <_write_r+0x1e>
 8008e2c:	682b      	ldr	r3, [r5, #0]
 8008e2e:	b103      	cbz	r3, 8008e32 <_write_r+0x1e>
 8008e30:	6023      	str	r3, [r4, #0]
 8008e32:	bd38      	pop	{r3, r4, r5, pc}
 8008e34:	200009bc 	.word	0x200009bc

08008e38 <_close_r>:
 8008e38:	b538      	push	{r3, r4, r5, lr}
 8008e3a:	4d06      	ldr	r5, [pc, #24]	; (8008e54 <_close_r+0x1c>)
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	4604      	mov	r4, r0
 8008e40:	4608      	mov	r0, r1
 8008e42:	602b      	str	r3, [r5, #0]
 8008e44:	f7ff fb7e 	bl	8008544 <_close>
 8008e48:	1c43      	adds	r3, r0, #1
 8008e4a:	d102      	bne.n	8008e52 <_close_r+0x1a>
 8008e4c:	682b      	ldr	r3, [r5, #0]
 8008e4e:	b103      	cbz	r3, 8008e52 <_close_r+0x1a>
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	bd38      	pop	{r3, r4, r5, pc}
 8008e54:	200009bc 	.word	0x200009bc

08008e58 <__sflush_r>:
 8008e58:	898a      	ldrh	r2, [r1, #12]
 8008e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5e:	4605      	mov	r5, r0
 8008e60:	0710      	lsls	r0, r2, #28
 8008e62:	460c      	mov	r4, r1
 8008e64:	d458      	bmi.n	8008f18 <__sflush_r+0xc0>
 8008e66:	684b      	ldr	r3, [r1, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	dc05      	bgt.n	8008e78 <__sflush_r+0x20>
 8008e6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	dc02      	bgt.n	8008e78 <__sflush_r+0x20>
 8008e72:	2000      	movs	r0, #0
 8008e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e7a:	2e00      	cmp	r6, #0
 8008e7c:	d0f9      	beq.n	8008e72 <__sflush_r+0x1a>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e84:	682f      	ldr	r7, [r5, #0]
 8008e86:	602b      	str	r3, [r5, #0]
 8008e88:	d032      	beq.n	8008ef0 <__sflush_r+0x98>
 8008e8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	075a      	lsls	r2, r3, #29
 8008e90:	d505      	bpl.n	8008e9e <__sflush_r+0x46>
 8008e92:	6863      	ldr	r3, [r4, #4]
 8008e94:	1ac0      	subs	r0, r0, r3
 8008e96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e98:	b10b      	cbz	r3, 8008e9e <__sflush_r+0x46>
 8008e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e9c:	1ac0      	subs	r0, r0, r3
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ea4:	6a21      	ldr	r1, [r4, #32]
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	47b0      	blx	r6
 8008eaa:	1c43      	adds	r3, r0, #1
 8008eac:	89a3      	ldrh	r3, [r4, #12]
 8008eae:	d106      	bne.n	8008ebe <__sflush_r+0x66>
 8008eb0:	6829      	ldr	r1, [r5, #0]
 8008eb2:	291d      	cmp	r1, #29
 8008eb4:	d82c      	bhi.n	8008f10 <__sflush_r+0xb8>
 8008eb6:	4a2a      	ldr	r2, [pc, #168]	; (8008f60 <__sflush_r+0x108>)
 8008eb8:	40ca      	lsrs	r2, r1
 8008eba:	07d6      	lsls	r6, r2, #31
 8008ebc:	d528      	bpl.n	8008f10 <__sflush_r+0xb8>
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	6062      	str	r2, [r4, #4]
 8008ec2:	04d9      	lsls	r1, r3, #19
 8008ec4:	6922      	ldr	r2, [r4, #16]
 8008ec6:	6022      	str	r2, [r4, #0]
 8008ec8:	d504      	bpl.n	8008ed4 <__sflush_r+0x7c>
 8008eca:	1c42      	adds	r2, r0, #1
 8008ecc:	d101      	bne.n	8008ed2 <__sflush_r+0x7a>
 8008ece:	682b      	ldr	r3, [r5, #0]
 8008ed0:	b903      	cbnz	r3, 8008ed4 <__sflush_r+0x7c>
 8008ed2:	6560      	str	r0, [r4, #84]	; 0x54
 8008ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ed6:	602f      	str	r7, [r5, #0]
 8008ed8:	2900      	cmp	r1, #0
 8008eda:	d0ca      	beq.n	8008e72 <__sflush_r+0x1a>
 8008edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ee0:	4299      	cmp	r1, r3
 8008ee2:	d002      	beq.n	8008eea <__sflush_r+0x92>
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f7ff fe33 	bl	8008b50 <_free_r>
 8008eea:	2000      	movs	r0, #0
 8008eec:	6360      	str	r0, [r4, #52]	; 0x34
 8008eee:	e7c1      	b.n	8008e74 <__sflush_r+0x1c>
 8008ef0:	6a21      	ldr	r1, [r4, #32]
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	47b0      	blx	r6
 8008ef8:	1c41      	adds	r1, r0, #1
 8008efa:	d1c7      	bne.n	8008e8c <__sflush_r+0x34>
 8008efc:	682b      	ldr	r3, [r5, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d0c4      	beq.n	8008e8c <__sflush_r+0x34>
 8008f02:	2b1d      	cmp	r3, #29
 8008f04:	d001      	beq.n	8008f0a <__sflush_r+0xb2>
 8008f06:	2b16      	cmp	r3, #22
 8008f08:	d101      	bne.n	8008f0e <__sflush_r+0xb6>
 8008f0a:	602f      	str	r7, [r5, #0]
 8008f0c:	e7b1      	b.n	8008e72 <__sflush_r+0x1a>
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f14:	81a3      	strh	r3, [r4, #12]
 8008f16:	e7ad      	b.n	8008e74 <__sflush_r+0x1c>
 8008f18:	690f      	ldr	r7, [r1, #16]
 8008f1a:	2f00      	cmp	r7, #0
 8008f1c:	d0a9      	beq.n	8008e72 <__sflush_r+0x1a>
 8008f1e:	0793      	lsls	r3, r2, #30
 8008f20:	680e      	ldr	r6, [r1, #0]
 8008f22:	bf08      	it	eq
 8008f24:	694b      	ldreq	r3, [r1, #20]
 8008f26:	600f      	str	r7, [r1, #0]
 8008f28:	bf18      	it	ne
 8008f2a:	2300      	movne	r3, #0
 8008f2c:	eba6 0807 	sub.w	r8, r6, r7
 8008f30:	608b      	str	r3, [r1, #8]
 8008f32:	f1b8 0f00 	cmp.w	r8, #0
 8008f36:	dd9c      	ble.n	8008e72 <__sflush_r+0x1a>
 8008f38:	6a21      	ldr	r1, [r4, #32]
 8008f3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f3c:	4643      	mov	r3, r8
 8008f3e:	463a      	mov	r2, r7
 8008f40:	4628      	mov	r0, r5
 8008f42:	47b0      	blx	r6
 8008f44:	2800      	cmp	r0, #0
 8008f46:	dc06      	bgt.n	8008f56 <__sflush_r+0xfe>
 8008f48:	89a3      	ldrh	r3, [r4, #12]
 8008f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f4e:	81a3      	strh	r3, [r4, #12]
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295
 8008f54:	e78e      	b.n	8008e74 <__sflush_r+0x1c>
 8008f56:	4407      	add	r7, r0
 8008f58:	eba8 0800 	sub.w	r8, r8, r0
 8008f5c:	e7e9      	b.n	8008f32 <__sflush_r+0xda>
 8008f5e:	bf00      	nop
 8008f60:	20400001 	.word	0x20400001

08008f64 <_fflush_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	690b      	ldr	r3, [r1, #16]
 8008f68:	4605      	mov	r5, r0
 8008f6a:	460c      	mov	r4, r1
 8008f6c:	b913      	cbnz	r3, 8008f74 <_fflush_r+0x10>
 8008f6e:	2500      	movs	r5, #0
 8008f70:	4628      	mov	r0, r5
 8008f72:	bd38      	pop	{r3, r4, r5, pc}
 8008f74:	b118      	cbz	r0, 8008f7e <_fflush_r+0x1a>
 8008f76:	6983      	ldr	r3, [r0, #24]
 8008f78:	b90b      	cbnz	r3, 8008f7e <_fflush_r+0x1a>
 8008f7a:	f7ff fd0b 	bl	8008994 <__sinit>
 8008f7e:	4b14      	ldr	r3, [pc, #80]	; (8008fd0 <_fflush_r+0x6c>)
 8008f80:	429c      	cmp	r4, r3
 8008f82:	d11b      	bne.n	8008fbc <_fflush_r+0x58>
 8008f84:	686c      	ldr	r4, [r5, #4]
 8008f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d0ef      	beq.n	8008f6e <_fflush_r+0xa>
 8008f8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f90:	07d0      	lsls	r0, r2, #31
 8008f92:	d404      	bmi.n	8008f9e <_fflush_r+0x3a>
 8008f94:	0599      	lsls	r1, r3, #22
 8008f96:	d402      	bmi.n	8008f9e <_fflush_r+0x3a>
 8008f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f9a:	f7ff fdbe 	bl	8008b1a <__retarget_lock_acquire_recursive>
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	f7ff ff59 	bl	8008e58 <__sflush_r>
 8008fa6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fa8:	07da      	lsls	r2, r3, #31
 8008faa:	4605      	mov	r5, r0
 8008fac:	d4e0      	bmi.n	8008f70 <_fflush_r+0xc>
 8008fae:	89a3      	ldrh	r3, [r4, #12]
 8008fb0:	059b      	lsls	r3, r3, #22
 8008fb2:	d4dd      	bmi.n	8008f70 <_fflush_r+0xc>
 8008fb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fb6:	f7ff fdb1 	bl	8008b1c <__retarget_lock_release_recursive>
 8008fba:	e7d9      	b.n	8008f70 <_fflush_r+0xc>
 8008fbc:	4b05      	ldr	r3, [pc, #20]	; (8008fd4 <_fflush_r+0x70>)
 8008fbe:	429c      	cmp	r4, r3
 8008fc0:	d101      	bne.n	8008fc6 <_fflush_r+0x62>
 8008fc2:	68ac      	ldr	r4, [r5, #8]
 8008fc4:	e7df      	b.n	8008f86 <_fflush_r+0x22>
 8008fc6:	4b04      	ldr	r3, [pc, #16]	; (8008fd8 <_fflush_r+0x74>)
 8008fc8:	429c      	cmp	r4, r3
 8008fca:	bf08      	it	eq
 8008fcc:	68ec      	ldreq	r4, [r5, #12]
 8008fce:	e7da      	b.n	8008f86 <_fflush_r+0x22>
 8008fd0:	08009a4c 	.word	0x08009a4c
 8008fd4:	08009a6c 	.word	0x08009a6c
 8008fd8:	08009a2c 	.word	0x08009a2c

08008fdc <_lseek_r>:
 8008fdc:	b538      	push	{r3, r4, r5, lr}
 8008fde:	4d07      	ldr	r5, [pc, #28]	; (8008ffc <_lseek_r+0x20>)
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	4608      	mov	r0, r1
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	602a      	str	r2, [r5, #0]
 8008fea:	461a      	mov	r2, r3
 8008fec:	f7ff fa67 	bl	80084be <_lseek>
 8008ff0:	1c43      	adds	r3, r0, #1
 8008ff2:	d102      	bne.n	8008ffa <_lseek_r+0x1e>
 8008ff4:	682b      	ldr	r3, [r5, #0]
 8008ff6:	b103      	cbz	r3, 8008ffa <_lseek_r+0x1e>
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	bd38      	pop	{r3, r4, r5, pc}
 8008ffc:	200009bc 	.word	0x200009bc

08009000 <__malloc_lock>:
 8009000:	4801      	ldr	r0, [pc, #4]	; (8009008 <__malloc_lock+0x8>)
 8009002:	f7ff bd8a 	b.w	8008b1a <__retarget_lock_acquire_recursive>
 8009006:	bf00      	nop
 8009008:	200009b0 	.word	0x200009b0

0800900c <__malloc_unlock>:
 800900c:	4801      	ldr	r0, [pc, #4]	; (8009014 <__malloc_unlock+0x8>)
 800900e:	f7ff bd85 	b.w	8008b1c <__retarget_lock_release_recursive>
 8009012:	bf00      	nop
 8009014:	200009b0 	.word	0x200009b0

08009018 <__sfputc_r>:
 8009018:	6893      	ldr	r3, [r2, #8]
 800901a:	3b01      	subs	r3, #1
 800901c:	2b00      	cmp	r3, #0
 800901e:	b410      	push	{r4}
 8009020:	6093      	str	r3, [r2, #8]
 8009022:	da08      	bge.n	8009036 <__sfputc_r+0x1e>
 8009024:	6994      	ldr	r4, [r2, #24]
 8009026:	42a3      	cmp	r3, r4
 8009028:	db01      	blt.n	800902e <__sfputc_r+0x16>
 800902a:	290a      	cmp	r1, #10
 800902c:	d103      	bne.n	8009036 <__sfputc_r+0x1e>
 800902e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009032:	f000 bb39 	b.w	80096a8 <__swbuf_r>
 8009036:	6813      	ldr	r3, [r2, #0]
 8009038:	1c58      	adds	r0, r3, #1
 800903a:	6010      	str	r0, [r2, #0]
 800903c:	7019      	strb	r1, [r3, #0]
 800903e:	4608      	mov	r0, r1
 8009040:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009044:	4770      	bx	lr

08009046 <__sfputs_r>:
 8009046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009048:	4606      	mov	r6, r0
 800904a:	460f      	mov	r7, r1
 800904c:	4614      	mov	r4, r2
 800904e:	18d5      	adds	r5, r2, r3
 8009050:	42ac      	cmp	r4, r5
 8009052:	d101      	bne.n	8009058 <__sfputs_r+0x12>
 8009054:	2000      	movs	r0, #0
 8009056:	e007      	b.n	8009068 <__sfputs_r+0x22>
 8009058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800905c:	463a      	mov	r2, r7
 800905e:	4630      	mov	r0, r6
 8009060:	f7ff ffda 	bl	8009018 <__sfputc_r>
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	d1f3      	bne.n	8009050 <__sfputs_r+0xa>
 8009068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800906c <_vfiprintf_r>:
 800906c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009070:	460d      	mov	r5, r1
 8009072:	b09d      	sub	sp, #116	; 0x74
 8009074:	4614      	mov	r4, r2
 8009076:	4698      	mov	r8, r3
 8009078:	4606      	mov	r6, r0
 800907a:	b118      	cbz	r0, 8009084 <_vfiprintf_r+0x18>
 800907c:	6983      	ldr	r3, [r0, #24]
 800907e:	b90b      	cbnz	r3, 8009084 <_vfiprintf_r+0x18>
 8009080:	f7ff fc88 	bl	8008994 <__sinit>
 8009084:	4b89      	ldr	r3, [pc, #548]	; (80092ac <_vfiprintf_r+0x240>)
 8009086:	429d      	cmp	r5, r3
 8009088:	d11b      	bne.n	80090c2 <_vfiprintf_r+0x56>
 800908a:	6875      	ldr	r5, [r6, #4]
 800908c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800908e:	07d9      	lsls	r1, r3, #31
 8009090:	d405      	bmi.n	800909e <_vfiprintf_r+0x32>
 8009092:	89ab      	ldrh	r3, [r5, #12]
 8009094:	059a      	lsls	r2, r3, #22
 8009096:	d402      	bmi.n	800909e <_vfiprintf_r+0x32>
 8009098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800909a:	f7ff fd3e 	bl	8008b1a <__retarget_lock_acquire_recursive>
 800909e:	89ab      	ldrh	r3, [r5, #12]
 80090a0:	071b      	lsls	r3, r3, #28
 80090a2:	d501      	bpl.n	80090a8 <_vfiprintf_r+0x3c>
 80090a4:	692b      	ldr	r3, [r5, #16]
 80090a6:	b9eb      	cbnz	r3, 80090e4 <_vfiprintf_r+0x78>
 80090a8:	4629      	mov	r1, r5
 80090aa:	4630      	mov	r0, r6
 80090ac:	f000 fb4e 	bl	800974c <__swsetup_r>
 80090b0:	b1c0      	cbz	r0, 80090e4 <_vfiprintf_r+0x78>
 80090b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090b4:	07dc      	lsls	r4, r3, #31
 80090b6:	d50e      	bpl.n	80090d6 <_vfiprintf_r+0x6a>
 80090b8:	f04f 30ff 	mov.w	r0, #4294967295
 80090bc:	b01d      	add	sp, #116	; 0x74
 80090be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c2:	4b7b      	ldr	r3, [pc, #492]	; (80092b0 <_vfiprintf_r+0x244>)
 80090c4:	429d      	cmp	r5, r3
 80090c6:	d101      	bne.n	80090cc <_vfiprintf_r+0x60>
 80090c8:	68b5      	ldr	r5, [r6, #8]
 80090ca:	e7df      	b.n	800908c <_vfiprintf_r+0x20>
 80090cc:	4b79      	ldr	r3, [pc, #484]	; (80092b4 <_vfiprintf_r+0x248>)
 80090ce:	429d      	cmp	r5, r3
 80090d0:	bf08      	it	eq
 80090d2:	68f5      	ldreq	r5, [r6, #12]
 80090d4:	e7da      	b.n	800908c <_vfiprintf_r+0x20>
 80090d6:	89ab      	ldrh	r3, [r5, #12]
 80090d8:	0598      	lsls	r0, r3, #22
 80090da:	d4ed      	bmi.n	80090b8 <_vfiprintf_r+0x4c>
 80090dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090de:	f7ff fd1d 	bl	8008b1c <__retarget_lock_release_recursive>
 80090e2:	e7e9      	b.n	80090b8 <_vfiprintf_r+0x4c>
 80090e4:	2300      	movs	r3, #0
 80090e6:	9309      	str	r3, [sp, #36]	; 0x24
 80090e8:	2320      	movs	r3, #32
 80090ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80090f2:	2330      	movs	r3, #48	; 0x30
 80090f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80092b8 <_vfiprintf_r+0x24c>
 80090f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090fc:	f04f 0901 	mov.w	r9, #1
 8009100:	4623      	mov	r3, r4
 8009102:	469a      	mov	sl, r3
 8009104:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009108:	b10a      	cbz	r2, 800910e <_vfiprintf_r+0xa2>
 800910a:	2a25      	cmp	r2, #37	; 0x25
 800910c:	d1f9      	bne.n	8009102 <_vfiprintf_r+0x96>
 800910e:	ebba 0b04 	subs.w	fp, sl, r4
 8009112:	d00b      	beq.n	800912c <_vfiprintf_r+0xc0>
 8009114:	465b      	mov	r3, fp
 8009116:	4622      	mov	r2, r4
 8009118:	4629      	mov	r1, r5
 800911a:	4630      	mov	r0, r6
 800911c:	f7ff ff93 	bl	8009046 <__sfputs_r>
 8009120:	3001      	adds	r0, #1
 8009122:	f000 80aa 	beq.w	800927a <_vfiprintf_r+0x20e>
 8009126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009128:	445a      	add	r2, fp
 800912a:	9209      	str	r2, [sp, #36]	; 0x24
 800912c:	f89a 3000 	ldrb.w	r3, [sl]
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 80a2 	beq.w	800927a <_vfiprintf_r+0x20e>
 8009136:	2300      	movs	r3, #0
 8009138:	f04f 32ff 	mov.w	r2, #4294967295
 800913c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009140:	f10a 0a01 	add.w	sl, sl, #1
 8009144:	9304      	str	r3, [sp, #16]
 8009146:	9307      	str	r3, [sp, #28]
 8009148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800914c:	931a      	str	r3, [sp, #104]	; 0x68
 800914e:	4654      	mov	r4, sl
 8009150:	2205      	movs	r2, #5
 8009152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009156:	4858      	ldr	r0, [pc, #352]	; (80092b8 <_vfiprintf_r+0x24c>)
 8009158:	f7f7 f842 	bl	80001e0 <memchr>
 800915c:	9a04      	ldr	r2, [sp, #16]
 800915e:	b9d8      	cbnz	r0, 8009198 <_vfiprintf_r+0x12c>
 8009160:	06d1      	lsls	r1, r2, #27
 8009162:	bf44      	itt	mi
 8009164:	2320      	movmi	r3, #32
 8009166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800916a:	0713      	lsls	r3, r2, #28
 800916c:	bf44      	itt	mi
 800916e:	232b      	movmi	r3, #43	; 0x2b
 8009170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009174:	f89a 3000 	ldrb.w	r3, [sl]
 8009178:	2b2a      	cmp	r3, #42	; 0x2a
 800917a:	d015      	beq.n	80091a8 <_vfiprintf_r+0x13c>
 800917c:	9a07      	ldr	r2, [sp, #28]
 800917e:	4654      	mov	r4, sl
 8009180:	2000      	movs	r0, #0
 8009182:	f04f 0c0a 	mov.w	ip, #10
 8009186:	4621      	mov	r1, r4
 8009188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800918c:	3b30      	subs	r3, #48	; 0x30
 800918e:	2b09      	cmp	r3, #9
 8009190:	d94e      	bls.n	8009230 <_vfiprintf_r+0x1c4>
 8009192:	b1b0      	cbz	r0, 80091c2 <_vfiprintf_r+0x156>
 8009194:	9207      	str	r2, [sp, #28]
 8009196:	e014      	b.n	80091c2 <_vfiprintf_r+0x156>
 8009198:	eba0 0308 	sub.w	r3, r0, r8
 800919c:	fa09 f303 	lsl.w	r3, r9, r3
 80091a0:	4313      	orrs	r3, r2
 80091a2:	9304      	str	r3, [sp, #16]
 80091a4:	46a2      	mov	sl, r4
 80091a6:	e7d2      	b.n	800914e <_vfiprintf_r+0xe2>
 80091a8:	9b03      	ldr	r3, [sp, #12]
 80091aa:	1d19      	adds	r1, r3, #4
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	9103      	str	r1, [sp, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	bfbb      	ittet	lt
 80091b4:	425b      	neglt	r3, r3
 80091b6:	f042 0202 	orrlt.w	r2, r2, #2
 80091ba:	9307      	strge	r3, [sp, #28]
 80091bc:	9307      	strlt	r3, [sp, #28]
 80091be:	bfb8      	it	lt
 80091c0:	9204      	strlt	r2, [sp, #16]
 80091c2:	7823      	ldrb	r3, [r4, #0]
 80091c4:	2b2e      	cmp	r3, #46	; 0x2e
 80091c6:	d10c      	bne.n	80091e2 <_vfiprintf_r+0x176>
 80091c8:	7863      	ldrb	r3, [r4, #1]
 80091ca:	2b2a      	cmp	r3, #42	; 0x2a
 80091cc:	d135      	bne.n	800923a <_vfiprintf_r+0x1ce>
 80091ce:	9b03      	ldr	r3, [sp, #12]
 80091d0:	1d1a      	adds	r2, r3, #4
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	9203      	str	r2, [sp, #12]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	bfb8      	it	lt
 80091da:	f04f 33ff 	movlt.w	r3, #4294967295
 80091de:	3402      	adds	r4, #2
 80091e0:	9305      	str	r3, [sp, #20]
 80091e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80092c8 <_vfiprintf_r+0x25c>
 80091e6:	7821      	ldrb	r1, [r4, #0]
 80091e8:	2203      	movs	r2, #3
 80091ea:	4650      	mov	r0, sl
 80091ec:	f7f6 fff8 	bl	80001e0 <memchr>
 80091f0:	b140      	cbz	r0, 8009204 <_vfiprintf_r+0x198>
 80091f2:	2340      	movs	r3, #64	; 0x40
 80091f4:	eba0 000a 	sub.w	r0, r0, sl
 80091f8:	fa03 f000 	lsl.w	r0, r3, r0
 80091fc:	9b04      	ldr	r3, [sp, #16]
 80091fe:	4303      	orrs	r3, r0
 8009200:	3401      	adds	r4, #1
 8009202:	9304      	str	r3, [sp, #16]
 8009204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009208:	482c      	ldr	r0, [pc, #176]	; (80092bc <_vfiprintf_r+0x250>)
 800920a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800920e:	2206      	movs	r2, #6
 8009210:	f7f6 ffe6 	bl	80001e0 <memchr>
 8009214:	2800      	cmp	r0, #0
 8009216:	d03f      	beq.n	8009298 <_vfiprintf_r+0x22c>
 8009218:	4b29      	ldr	r3, [pc, #164]	; (80092c0 <_vfiprintf_r+0x254>)
 800921a:	bb1b      	cbnz	r3, 8009264 <_vfiprintf_r+0x1f8>
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	3307      	adds	r3, #7
 8009220:	f023 0307 	bic.w	r3, r3, #7
 8009224:	3308      	adds	r3, #8
 8009226:	9303      	str	r3, [sp, #12]
 8009228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800922a:	443b      	add	r3, r7
 800922c:	9309      	str	r3, [sp, #36]	; 0x24
 800922e:	e767      	b.n	8009100 <_vfiprintf_r+0x94>
 8009230:	fb0c 3202 	mla	r2, ip, r2, r3
 8009234:	460c      	mov	r4, r1
 8009236:	2001      	movs	r0, #1
 8009238:	e7a5      	b.n	8009186 <_vfiprintf_r+0x11a>
 800923a:	2300      	movs	r3, #0
 800923c:	3401      	adds	r4, #1
 800923e:	9305      	str	r3, [sp, #20]
 8009240:	4619      	mov	r1, r3
 8009242:	f04f 0c0a 	mov.w	ip, #10
 8009246:	4620      	mov	r0, r4
 8009248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800924c:	3a30      	subs	r2, #48	; 0x30
 800924e:	2a09      	cmp	r2, #9
 8009250:	d903      	bls.n	800925a <_vfiprintf_r+0x1ee>
 8009252:	2b00      	cmp	r3, #0
 8009254:	d0c5      	beq.n	80091e2 <_vfiprintf_r+0x176>
 8009256:	9105      	str	r1, [sp, #20]
 8009258:	e7c3      	b.n	80091e2 <_vfiprintf_r+0x176>
 800925a:	fb0c 2101 	mla	r1, ip, r1, r2
 800925e:	4604      	mov	r4, r0
 8009260:	2301      	movs	r3, #1
 8009262:	e7f0      	b.n	8009246 <_vfiprintf_r+0x1da>
 8009264:	ab03      	add	r3, sp, #12
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	462a      	mov	r2, r5
 800926a:	4b16      	ldr	r3, [pc, #88]	; (80092c4 <_vfiprintf_r+0x258>)
 800926c:	a904      	add	r1, sp, #16
 800926e:	4630      	mov	r0, r6
 8009270:	f3af 8000 	nop.w
 8009274:	4607      	mov	r7, r0
 8009276:	1c78      	adds	r0, r7, #1
 8009278:	d1d6      	bne.n	8009228 <_vfiprintf_r+0x1bc>
 800927a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800927c:	07d9      	lsls	r1, r3, #31
 800927e:	d405      	bmi.n	800928c <_vfiprintf_r+0x220>
 8009280:	89ab      	ldrh	r3, [r5, #12]
 8009282:	059a      	lsls	r2, r3, #22
 8009284:	d402      	bmi.n	800928c <_vfiprintf_r+0x220>
 8009286:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009288:	f7ff fc48 	bl	8008b1c <__retarget_lock_release_recursive>
 800928c:	89ab      	ldrh	r3, [r5, #12]
 800928e:	065b      	lsls	r3, r3, #25
 8009290:	f53f af12 	bmi.w	80090b8 <_vfiprintf_r+0x4c>
 8009294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009296:	e711      	b.n	80090bc <_vfiprintf_r+0x50>
 8009298:	ab03      	add	r3, sp, #12
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	462a      	mov	r2, r5
 800929e:	4b09      	ldr	r3, [pc, #36]	; (80092c4 <_vfiprintf_r+0x258>)
 80092a0:	a904      	add	r1, sp, #16
 80092a2:	4630      	mov	r0, r6
 80092a4:	f000 f880 	bl	80093a8 <_printf_i>
 80092a8:	e7e4      	b.n	8009274 <_vfiprintf_r+0x208>
 80092aa:	bf00      	nop
 80092ac:	08009a4c 	.word	0x08009a4c
 80092b0:	08009a6c 	.word	0x08009a6c
 80092b4:	08009a2c 	.word	0x08009a2c
 80092b8:	08009a90 	.word	0x08009a90
 80092bc:	08009a9a 	.word	0x08009a9a
 80092c0:	00000000 	.word	0x00000000
 80092c4:	08009047 	.word	0x08009047
 80092c8:	08009a96 	.word	0x08009a96

080092cc <_printf_common>:
 80092cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092d0:	4616      	mov	r6, r2
 80092d2:	4699      	mov	r9, r3
 80092d4:	688a      	ldr	r2, [r1, #8]
 80092d6:	690b      	ldr	r3, [r1, #16]
 80092d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092dc:	4293      	cmp	r3, r2
 80092de:	bfb8      	it	lt
 80092e0:	4613      	movlt	r3, r2
 80092e2:	6033      	str	r3, [r6, #0]
 80092e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092e8:	4607      	mov	r7, r0
 80092ea:	460c      	mov	r4, r1
 80092ec:	b10a      	cbz	r2, 80092f2 <_printf_common+0x26>
 80092ee:	3301      	adds	r3, #1
 80092f0:	6033      	str	r3, [r6, #0]
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	0699      	lsls	r1, r3, #26
 80092f6:	bf42      	ittt	mi
 80092f8:	6833      	ldrmi	r3, [r6, #0]
 80092fa:	3302      	addmi	r3, #2
 80092fc:	6033      	strmi	r3, [r6, #0]
 80092fe:	6825      	ldr	r5, [r4, #0]
 8009300:	f015 0506 	ands.w	r5, r5, #6
 8009304:	d106      	bne.n	8009314 <_printf_common+0x48>
 8009306:	f104 0a19 	add.w	sl, r4, #25
 800930a:	68e3      	ldr	r3, [r4, #12]
 800930c:	6832      	ldr	r2, [r6, #0]
 800930e:	1a9b      	subs	r3, r3, r2
 8009310:	42ab      	cmp	r3, r5
 8009312:	dc26      	bgt.n	8009362 <_printf_common+0x96>
 8009314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009318:	1e13      	subs	r3, r2, #0
 800931a:	6822      	ldr	r2, [r4, #0]
 800931c:	bf18      	it	ne
 800931e:	2301      	movne	r3, #1
 8009320:	0692      	lsls	r2, r2, #26
 8009322:	d42b      	bmi.n	800937c <_printf_common+0xb0>
 8009324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009328:	4649      	mov	r1, r9
 800932a:	4638      	mov	r0, r7
 800932c:	47c0      	blx	r8
 800932e:	3001      	adds	r0, #1
 8009330:	d01e      	beq.n	8009370 <_printf_common+0xa4>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	68e5      	ldr	r5, [r4, #12]
 8009336:	6832      	ldr	r2, [r6, #0]
 8009338:	f003 0306 	and.w	r3, r3, #6
 800933c:	2b04      	cmp	r3, #4
 800933e:	bf08      	it	eq
 8009340:	1aad      	subeq	r5, r5, r2
 8009342:	68a3      	ldr	r3, [r4, #8]
 8009344:	6922      	ldr	r2, [r4, #16]
 8009346:	bf0c      	ite	eq
 8009348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800934c:	2500      	movne	r5, #0
 800934e:	4293      	cmp	r3, r2
 8009350:	bfc4      	itt	gt
 8009352:	1a9b      	subgt	r3, r3, r2
 8009354:	18ed      	addgt	r5, r5, r3
 8009356:	2600      	movs	r6, #0
 8009358:	341a      	adds	r4, #26
 800935a:	42b5      	cmp	r5, r6
 800935c:	d11a      	bne.n	8009394 <_printf_common+0xc8>
 800935e:	2000      	movs	r0, #0
 8009360:	e008      	b.n	8009374 <_printf_common+0xa8>
 8009362:	2301      	movs	r3, #1
 8009364:	4652      	mov	r2, sl
 8009366:	4649      	mov	r1, r9
 8009368:	4638      	mov	r0, r7
 800936a:	47c0      	blx	r8
 800936c:	3001      	adds	r0, #1
 800936e:	d103      	bne.n	8009378 <_printf_common+0xac>
 8009370:	f04f 30ff 	mov.w	r0, #4294967295
 8009374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009378:	3501      	adds	r5, #1
 800937a:	e7c6      	b.n	800930a <_printf_common+0x3e>
 800937c:	18e1      	adds	r1, r4, r3
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	2030      	movs	r0, #48	; 0x30
 8009382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009386:	4422      	add	r2, r4
 8009388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800938c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009390:	3302      	adds	r3, #2
 8009392:	e7c7      	b.n	8009324 <_printf_common+0x58>
 8009394:	2301      	movs	r3, #1
 8009396:	4622      	mov	r2, r4
 8009398:	4649      	mov	r1, r9
 800939a:	4638      	mov	r0, r7
 800939c:	47c0      	blx	r8
 800939e:	3001      	adds	r0, #1
 80093a0:	d0e6      	beq.n	8009370 <_printf_common+0xa4>
 80093a2:	3601      	adds	r6, #1
 80093a4:	e7d9      	b.n	800935a <_printf_common+0x8e>
	...

080093a8 <_printf_i>:
 80093a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093ac:	7e0f      	ldrb	r7, [r1, #24]
 80093ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093b0:	2f78      	cmp	r7, #120	; 0x78
 80093b2:	4691      	mov	r9, r2
 80093b4:	4680      	mov	r8, r0
 80093b6:	460c      	mov	r4, r1
 80093b8:	469a      	mov	sl, r3
 80093ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093be:	d807      	bhi.n	80093d0 <_printf_i+0x28>
 80093c0:	2f62      	cmp	r7, #98	; 0x62
 80093c2:	d80a      	bhi.n	80093da <_printf_i+0x32>
 80093c4:	2f00      	cmp	r7, #0
 80093c6:	f000 80d8 	beq.w	800957a <_printf_i+0x1d2>
 80093ca:	2f58      	cmp	r7, #88	; 0x58
 80093cc:	f000 80a3 	beq.w	8009516 <_printf_i+0x16e>
 80093d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093d8:	e03a      	b.n	8009450 <_printf_i+0xa8>
 80093da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093de:	2b15      	cmp	r3, #21
 80093e0:	d8f6      	bhi.n	80093d0 <_printf_i+0x28>
 80093e2:	a101      	add	r1, pc, #4	; (adr r1, 80093e8 <_printf_i+0x40>)
 80093e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093e8:	08009441 	.word	0x08009441
 80093ec:	08009455 	.word	0x08009455
 80093f0:	080093d1 	.word	0x080093d1
 80093f4:	080093d1 	.word	0x080093d1
 80093f8:	080093d1 	.word	0x080093d1
 80093fc:	080093d1 	.word	0x080093d1
 8009400:	08009455 	.word	0x08009455
 8009404:	080093d1 	.word	0x080093d1
 8009408:	080093d1 	.word	0x080093d1
 800940c:	080093d1 	.word	0x080093d1
 8009410:	080093d1 	.word	0x080093d1
 8009414:	08009561 	.word	0x08009561
 8009418:	08009485 	.word	0x08009485
 800941c:	08009543 	.word	0x08009543
 8009420:	080093d1 	.word	0x080093d1
 8009424:	080093d1 	.word	0x080093d1
 8009428:	08009583 	.word	0x08009583
 800942c:	080093d1 	.word	0x080093d1
 8009430:	08009485 	.word	0x08009485
 8009434:	080093d1 	.word	0x080093d1
 8009438:	080093d1 	.word	0x080093d1
 800943c:	0800954b 	.word	0x0800954b
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	1d1a      	adds	r2, r3, #4
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	602a      	str	r2, [r5, #0]
 8009448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800944c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009450:	2301      	movs	r3, #1
 8009452:	e0a3      	b.n	800959c <_printf_i+0x1f4>
 8009454:	6820      	ldr	r0, [r4, #0]
 8009456:	6829      	ldr	r1, [r5, #0]
 8009458:	0606      	lsls	r6, r0, #24
 800945a:	f101 0304 	add.w	r3, r1, #4
 800945e:	d50a      	bpl.n	8009476 <_printf_i+0xce>
 8009460:	680e      	ldr	r6, [r1, #0]
 8009462:	602b      	str	r3, [r5, #0]
 8009464:	2e00      	cmp	r6, #0
 8009466:	da03      	bge.n	8009470 <_printf_i+0xc8>
 8009468:	232d      	movs	r3, #45	; 0x2d
 800946a:	4276      	negs	r6, r6
 800946c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009470:	485e      	ldr	r0, [pc, #376]	; (80095ec <_printf_i+0x244>)
 8009472:	230a      	movs	r3, #10
 8009474:	e019      	b.n	80094aa <_printf_i+0x102>
 8009476:	680e      	ldr	r6, [r1, #0]
 8009478:	602b      	str	r3, [r5, #0]
 800947a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800947e:	bf18      	it	ne
 8009480:	b236      	sxthne	r6, r6
 8009482:	e7ef      	b.n	8009464 <_printf_i+0xbc>
 8009484:	682b      	ldr	r3, [r5, #0]
 8009486:	6820      	ldr	r0, [r4, #0]
 8009488:	1d19      	adds	r1, r3, #4
 800948a:	6029      	str	r1, [r5, #0]
 800948c:	0601      	lsls	r1, r0, #24
 800948e:	d501      	bpl.n	8009494 <_printf_i+0xec>
 8009490:	681e      	ldr	r6, [r3, #0]
 8009492:	e002      	b.n	800949a <_printf_i+0xf2>
 8009494:	0646      	lsls	r6, r0, #25
 8009496:	d5fb      	bpl.n	8009490 <_printf_i+0xe8>
 8009498:	881e      	ldrh	r6, [r3, #0]
 800949a:	4854      	ldr	r0, [pc, #336]	; (80095ec <_printf_i+0x244>)
 800949c:	2f6f      	cmp	r7, #111	; 0x6f
 800949e:	bf0c      	ite	eq
 80094a0:	2308      	moveq	r3, #8
 80094a2:	230a      	movne	r3, #10
 80094a4:	2100      	movs	r1, #0
 80094a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094aa:	6865      	ldr	r5, [r4, #4]
 80094ac:	60a5      	str	r5, [r4, #8]
 80094ae:	2d00      	cmp	r5, #0
 80094b0:	bfa2      	ittt	ge
 80094b2:	6821      	ldrge	r1, [r4, #0]
 80094b4:	f021 0104 	bicge.w	r1, r1, #4
 80094b8:	6021      	strge	r1, [r4, #0]
 80094ba:	b90e      	cbnz	r6, 80094c0 <_printf_i+0x118>
 80094bc:	2d00      	cmp	r5, #0
 80094be:	d04d      	beq.n	800955c <_printf_i+0x1b4>
 80094c0:	4615      	mov	r5, r2
 80094c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80094c6:	fb03 6711 	mls	r7, r3, r1, r6
 80094ca:	5dc7      	ldrb	r7, [r0, r7]
 80094cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094d0:	4637      	mov	r7, r6
 80094d2:	42bb      	cmp	r3, r7
 80094d4:	460e      	mov	r6, r1
 80094d6:	d9f4      	bls.n	80094c2 <_printf_i+0x11a>
 80094d8:	2b08      	cmp	r3, #8
 80094da:	d10b      	bne.n	80094f4 <_printf_i+0x14c>
 80094dc:	6823      	ldr	r3, [r4, #0]
 80094de:	07de      	lsls	r6, r3, #31
 80094e0:	d508      	bpl.n	80094f4 <_printf_i+0x14c>
 80094e2:	6923      	ldr	r3, [r4, #16]
 80094e4:	6861      	ldr	r1, [r4, #4]
 80094e6:	4299      	cmp	r1, r3
 80094e8:	bfde      	ittt	le
 80094ea:	2330      	movle	r3, #48	; 0x30
 80094ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094f4:	1b52      	subs	r2, r2, r5
 80094f6:	6122      	str	r2, [r4, #16]
 80094f8:	f8cd a000 	str.w	sl, [sp]
 80094fc:	464b      	mov	r3, r9
 80094fe:	aa03      	add	r2, sp, #12
 8009500:	4621      	mov	r1, r4
 8009502:	4640      	mov	r0, r8
 8009504:	f7ff fee2 	bl	80092cc <_printf_common>
 8009508:	3001      	adds	r0, #1
 800950a:	d14c      	bne.n	80095a6 <_printf_i+0x1fe>
 800950c:	f04f 30ff 	mov.w	r0, #4294967295
 8009510:	b004      	add	sp, #16
 8009512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009516:	4835      	ldr	r0, [pc, #212]	; (80095ec <_printf_i+0x244>)
 8009518:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800951c:	6829      	ldr	r1, [r5, #0]
 800951e:	6823      	ldr	r3, [r4, #0]
 8009520:	f851 6b04 	ldr.w	r6, [r1], #4
 8009524:	6029      	str	r1, [r5, #0]
 8009526:	061d      	lsls	r5, r3, #24
 8009528:	d514      	bpl.n	8009554 <_printf_i+0x1ac>
 800952a:	07df      	lsls	r7, r3, #31
 800952c:	bf44      	itt	mi
 800952e:	f043 0320 	orrmi.w	r3, r3, #32
 8009532:	6023      	strmi	r3, [r4, #0]
 8009534:	b91e      	cbnz	r6, 800953e <_printf_i+0x196>
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	f023 0320 	bic.w	r3, r3, #32
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	2310      	movs	r3, #16
 8009540:	e7b0      	b.n	80094a4 <_printf_i+0xfc>
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	f043 0320 	orr.w	r3, r3, #32
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	2378      	movs	r3, #120	; 0x78
 800954c:	4828      	ldr	r0, [pc, #160]	; (80095f0 <_printf_i+0x248>)
 800954e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009552:	e7e3      	b.n	800951c <_printf_i+0x174>
 8009554:	0659      	lsls	r1, r3, #25
 8009556:	bf48      	it	mi
 8009558:	b2b6      	uxthmi	r6, r6
 800955a:	e7e6      	b.n	800952a <_printf_i+0x182>
 800955c:	4615      	mov	r5, r2
 800955e:	e7bb      	b.n	80094d8 <_printf_i+0x130>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	6826      	ldr	r6, [r4, #0]
 8009564:	6961      	ldr	r1, [r4, #20]
 8009566:	1d18      	adds	r0, r3, #4
 8009568:	6028      	str	r0, [r5, #0]
 800956a:	0635      	lsls	r5, r6, #24
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	d501      	bpl.n	8009574 <_printf_i+0x1cc>
 8009570:	6019      	str	r1, [r3, #0]
 8009572:	e002      	b.n	800957a <_printf_i+0x1d2>
 8009574:	0670      	lsls	r0, r6, #25
 8009576:	d5fb      	bpl.n	8009570 <_printf_i+0x1c8>
 8009578:	8019      	strh	r1, [r3, #0]
 800957a:	2300      	movs	r3, #0
 800957c:	6123      	str	r3, [r4, #16]
 800957e:	4615      	mov	r5, r2
 8009580:	e7ba      	b.n	80094f8 <_printf_i+0x150>
 8009582:	682b      	ldr	r3, [r5, #0]
 8009584:	1d1a      	adds	r2, r3, #4
 8009586:	602a      	str	r2, [r5, #0]
 8009588:	681d      	ldr	r5, [r3, #0]
 800958a:	6862      	ldr	r2, [r4, #4]
 800958c:	2100      	movs	r1, #0
 800958e:	4628      	mov	r0, r5
 8009590:	f7f6 fe26 	bl	80001e0 <memchr>
 8009594:	b108      	cbz	r0, 800959a <_printf_i+0x1f2>
 8009596:	1b40      	subs	r0, r0, r5
 8009598:	6060      	str	r0, [r4, #4]
 800959a:	6863      	ldr	r3, [r4, #4]
 800959c:	6123      	str	r3, [r4, #16]
 800959e:	2300      	movs	r3, #0
 80095a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095a4:	e7a8      	b.n	80094f8 <_printf_i+0x150>
 80095a6:	6923      	ldr	r3, [r4, #16]
 80095a8:	462a      	mov	r2, r5
 80095aa:	4649      	mov	r1, r9
 80095ac:	4640      	mov	r0, r8
 80095ae:	47d0      	blx	sl
 80095b0:	3001      	adds	r0, #1
 80095b2:	d0ab      	beq.n	800950c <_printf_i+0x164>
 80095b4:	6823      	ldr	r3, [r4, #0]
 80095b6:	079b      	lsls	r3, r3, #30
 80095b8:	d413      	bmi.n	80095e2 <_printf_i+0x23a>
 80095ba:	68e0      	ldr	r0, [r4, #12]
 80095bc:	9b03      	ldr	r3, [sp, #12]
 80095be:	4298      	cmp	r0, r3
 80095c0:	bfb8      	it	lt
 80095c2:	4618      	movlt	r0, r3
 80095c4:	e7a4      	b.n	8009510 <_printf_i+0x168>
 80095c6:	2301      	movs	r3, #1
 80095c8:	4632      	mov	r2, r6
 80095ca:	4649      	mov	r1, r9
 80095cc:	4640      	mov	r0, r8
 80095ce:	47d0      	blx	sl
 80095d0:	3001      	adds	r0, #1
 80095d2:	d09b      	beq.n	800950c <_printf_i+0x164>
 80095d4:	3501      	adds	r5, #1
 80095d6:	68e3      	ldr	r3, [r4, #12]
 80095d8:	9903      	ldr	r1, [sp, #12]
 80095da:	1a5b      	subs	r3, r3, r1
 80095dc:	42ab      	cmp	r3, r5
 80095de:	dcf2      	bgt.n	80095c6 <_printf_i+0x21e>
 80095e0:	e7eb      	b.n	80095ba <_printf_i+0x212>
 80095e2:	2500      	movs	r5, #0
 80095e4:	f104 0619 	add.w	r6, r4, #25
 80095e8:	e7f5      	b.n	80095d6 <_printf_i+0x22e>
 80095ea:	bf00      	nop
 80095ec:	08009aa1 	.word	0x08009aa1
 80095f0:	08009ab2 	.word	0x08009ab2

080095f4 <_putc_r>:
 80095f4:	b570      	push	{r4, r5, r6, lr}
 80095f6:	460d      	mov	r5, r1
 80095f8:	4614      	mov	r4, r2
 80095fa:	4606      	mov	r6, r0
 80095fc:	b118      	cbz	r0, 8009606 <_putc_r+0x12>
 80095fe:	6983      	ldr	r3, [r0, #24]
 8009600:	b90b      	cbnz	r3, 8009606 <_putc_r+0x12>
 8009602:	f7ff f9c7 	bl	8008994 <__sinit>
 8009606:	4b1c      	ldr	r3, [pc, #112]	; (8009678 <_putc_r+0x84>)
 8009608:	429c      	cmp	r4, r3
 800960a:	d124      	bne.n	8009656 <_putc_r+0x62>
 800960c:	6874      	ldr	r4, [r6, #4]
 800960e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009610:	07d8      	lsls	r0, r3, #31
 8009612:	d405      	bmi.n	8009620 <_putc_r+0x2c>
 8009614:	89a3      	ldrh	r3, [r4, #12]
 8009616:	0599      	lsls	r1, r3, #22
 8009618:	d402      	bmi.n	8009620 <_putc_r+0x2c>
 800961a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800961c:	f7ff fa7d 	bl	8008b1a <__retarget_lock_acquire_recursive>
 8009620:	68a3      	ldr	r3, [r4, #8]
 8009622:	3b01      	subs	r3, #1
 8009624:	2b00      	cmp	r3, #0
 8009626:	60a3      	str	r3, [r4, #8]
 8009628:	da05      	bge.n	8009636 <_putc_r+0x42>
 800962a:	69a2      	ldr	r2, [r4, #24]
 800962c:	4293      	cmp	r3, r2
 800962e:	db1c      	blt.n	800966a <_putc_r+0x76>
 8009630:	b2eb      	uxtb	r3, r5
 8009632:	2b0a      	cmp	r3, #10
 8009634:	d019      	beq.n	800966a <_putc_r+0x76>
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	6022      	str	r2, [r4, #0]
 800963c:	701d      	strb	r5, [r3, #0]
 800963e:	b2ed      	uxtb	r5, r5
 8009640:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009642:	07da      	lsls	r2, r3, #31
 8009644:	d405      	bmi.n	8009652 <_putc_r+0x5e>
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	059b      	lsls	r3, r3, #22
 800964a:	d402      	bmi.n	8009652 <_putc_r+0x5e>
 800964c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800964e:	f7ff fa65 	bl	8008b1c <__retarget_lock_release_recursive>
 8009652:	4628      	mov	r0, r5
 8009654:	bd70      	pop	{r4, r5, r6, pc}
 8009656:	4b09      	ldr	r3, [pc, #36]	; (800967c <_putc_r+0x88>)
 8009658:	429c      	cmp	r4, r3
 800965a:	d101      	bne.n	8009660 <_putc_r+0x6c>
 800965c:	68b4      	ldr	r4, [r6, #8]
 800965e:	e7d6      	b.n	800960e <_putc_r+0x1a>
 8009660:	4b07      	ldr	r3, [pc, #28]	; (8009680 <_putc_r+0x8c>)
 8009662:	429c      	cmp	r4, r3
 8009664:	bf08      	it	eq
 8009666:	68f4      	ldreq	r4, [r6, #12]
 8009668:	e7d1      	b.n	800960e <_putc_r+0x1a>
 800966a:	4629      	mov	r1, r5
 800966c:	4622      	mov	r2, r4
 800966e:	4630      	mov	r0, r6
 8009670:	f000 f81a 	bl	80096a8 <__swbuf_r>
 8009674:	4605      	mov	r5, r0
 8009676:	e7e3      	b.n	8009640 <_putc_r+0x4c>
 8009678:	08009a4c 	.word	0x08009a4c
 800967c:	08009a6c 	.word	0x08009a6c
 8009680:	08009a2c 	.word	0x08009a2c

08009684 <_read_r>:
 8009684:	b538      	push	{r3, r4, r5, lr}
 8009686:	4d07      	ldr	r5, [pc, #28]	; (80096a4 <_read_r+0x20>)
 8009688:	4604      	mov	r4, r0
 800968a:	4608      	mov	r0, r1
 800968c:	4611      	mov	r1, r2
 800968e:	2200      	movs	r2, #0
 8009690:	602a      	str	r2, [r5, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	f7fe febb 	bl	800840e <_read>
 8009698:	1c43      	adds	r3, r0, #1
 800969a:	d102      	bne.n	80096a2 <_read_r+0x1e>
 800969c:	682b      	ldr	r3, [r5, #0]
 800969e:	b103      	cbz	r3, 80096a2 <_read_r+0x1e>
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	bd38      	pop	{r3, r4, r5, pc}
 80096a4:	200009bc 	.word	0x200009bc

080096a8 <__swbuf_r>:
 80096a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096aa:	460e      	mov	r6, r1
 80096ac:	4614      	mov	r4, r2
 80096ae:	4605      	mov	r5, r0
 80096b0:	b118      	cbz	r0, 80096ba <__swbuf_r+0x12>
 80096b2:	6983      	ldr	r3, [r0, #24]
 80096b4:	b90b      	cbnz	r3, 80096ba <__swbuf_r+0x12>
 80096b6:	f7ff f96d 	bl	8008994 <__sinit>
 80096ba:	4b21      	ldr	r3, [pc, #132]	; (8009740 <__swbuf_r+0x98>)
 80096bc:	429c      	cmp	r4, r3
 80096be:	d12b      	bne.n	8009718 <__swbuf_r+0x70>
 80096c0:	686c      	ldr	r4, [r5, #4]
 80096c2:	69a3      	ldr	r3, [r4, #24]
 80096c4:	60a3      	str	r3, [r4, #8]
 80096c6:	89a3      	ldrh	r3, [r4, #12]
 80096c8:	071a      	lsls	r2, r3, #28
 80096ca:	d52f      	bpl.n	800972c <__swbuf_r+0x84>
 80096cc:	6923      	ldr	r3, [r4, #16]
 80096ce:	b36b      	cbz	r3, 800972c <__swbuf_r+0x84>
 80096d0:	6923      	ldr	r3, [r4, #16]
 80096d2:	6820      	ldr	r0, [r4, #0]
 80096d4:	1ac0      	subs	r0, r0, r3
 80096d6:	6963      	ldr	r3, [r4, #20]
 80096d8:	b2f6      	uxtb	r6, r6
 80096da:	4283      	cmp	r3, r0
 80096dc:	4637      	mov	r7, r6
 80096de:	dc04      	bgt.n	80096ea <__swbuf_r+0x42>
 80096e0:	4621      	mov	r1, r4
 80096e2:	4628      	mov	r0, r5
 80096e4:	f7ff fc3e 	bl	8008f64 <_fflush_r>
 80096e8:	bb30      	cbnz	r0, 8009738 <__swbuf_r+0x90>
 80096ea:	68a3      	ldr	r3, [r4, #8]
 80096ec:	3b01      	subs	r3, #1
 80096ee:	60a3      	str	r3, [r4, #8]
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	1c5a      	adds	r2, r3, #1
 80096f4:	6022      	str	r2, [r4, #0]
 80096f6:	701e      	strb	r6, [r3, #0]
 80096f8:	6963      	ldr	r3, [r4, #20]
 80096fa:	3001      	adds	r0, #1
 80096fc:	4283      	cmp	r3, r0
 80096fe:	d004      	beq.n	800970a <__swbuf_r+0x62>
 8009700:	89a3      	ldrh	r3, [r4, #12]
 8009702:	07db      	lsls	r3, r3, #31
 8009704:	d506      	bpl.n	8009714 <__swbuf_r+0x6c>
 8009706:	2e0a      	cmp	r6, #10
 8009708:	d104      	bne.n	8009714 <__swbuf_r+0x6c>
 800970a:	4621      	mov	r1, r4
 800970c:	4628      	mov	r0, r5
 800970e:	f7ff fc29 	bl	8008f64 <_fflush_r>
 8009712:	b988      	cbnz	r0, 8009738 <__swbuf_r+0x90>
 8009714:	4638      	mov	r0, r7
 8009716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009718:	4b0a      	ldr	r3, [pc, #40]	; (8009744 <__swbuf_r+0x9c>)
 800971a:	429c      	cmp	r4, r3
 800971c:	d101      	bne.n	8009722 <__swbuf_r+0x7a>
 800971e:	68ac      	ldr	r4, [r5, #8]
 8009720:	e7cf      	b.n	80096c2 <__swbuf_r+0x1a>
 8009722:	4b09      	ldr	r3, [pc, #36]	; (8009748 <__swbuf_r+0xa0>)
 8009724:	429c      	cmp	r4, r3
 8009726:	bf08      	it	eq
 8009728:	68ec      	ldreq	r4, [r5, #12]
 800972a:	e7ca      	b.n	80096c2 <__swbuf_r+0x1a>
 800972c:	4621      	mov	r1, r4
 800972e:	4628      	mov	r0, r5
 8009730:	f000 f80c 	bl	800974c <__swsetup_r>
 8009734:	2800      	cmp	r0, #0
 8009736:	d0cb      	beq.n	80096d0 <__swbuf_r+0x28>
 8009738:	f04f 37ff 	mov.w	r7, #4294967295
 800973c:	e7ea      	b.n	8009714 <__swbuf_r+0x6c>
 800973e:	bf00      	nop
 8009740:	08009a4c 	.word	0x08009a4c
 8009744:	08009a6c 	.word	0x08009a6c
 8009748:	08009a2c 	.word	0x08009a2c

0800974c <__swsetup_r>:
 800974c:	4b32      	ldr	r3, [pc, #200]	; (8009818 <__swsetup_r+0xcc>)
 800974e:	b570      	push	{r4, r5, r6, lr}
 8009750:	681d      	ldr	r5, [r3, #0]
 8009752:	4606      	mov	r6, r0
 8009754:	460c      	mov	r4, r1
 8009756:	b125      	cbz	r5, 8009762 <__swsetup_r+0x16>
 8009758:	69ab      	ldr	r3, [r5, #24]
 800975a:	b913      	cbnz	r3, 8009762 <__swsetup_r+0x16>
 800975c:	4628      	mov	r0, r5
 800975e:	f7ff f919 	bl	8008994 <__sinit>
 8009762:	4b2e      	ldr	r3, [pc, #184]	; (800981c <__swsetup_r+0xd0>)
 8009764:	429c      	cmp	r4, r3
 8009766:	d10f      	bne.n	8009788 <__swsetup_r+0x3c>
 8009768:	686c      	ldr	r4, [r5, #4]
 800976a:	89a3      	ldrh	r3, [r4, #12]
 800976c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009770:	0719      	lsls	r1, r3, #28
 8009772:	d42c      	bmi.n	80097ce <__swsetup_r+0x82>
 8009774:	06dd      	lsls	r5, r3, #27
 8009776:	d411      	bmi.n	800979c <__swsetup_r+0x50>
 8009778:	2309      	movs	r3, #9
 800977a:	6033      	str	r3, [r6, #0]
 800977c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009780:	81a3      	strh	r3, [r4, #12]
 8009782:	f04f 30ff 	mov.w	r0, #4294967295
 8009786:	e03e      	b.n	8009806 <__swsetup_r+0xba>
 8009788:	4b25      	ldr	r3, [pc, #148]	; (8009820 <__swsetup_r+0xd4>)
 800978a:	429c      	cmp	r4, r3
 800978c:	d101      	bne.n	8009792 <__swsetup_r+0x46>
 800978e:	68ac      	ldr	r4, [r5, #8]
 8009790:	e7eb      	b.n	800976a <__swsetup_r+0x1e>
 8009792:	4b24      	ldr	r3, [pc, #144]	; (8009824 <__swsetup_r+0xd8>)
 8009794:	429c      	cmp	r4, r3
 8009796:	bf08      	it	eq
 8009798:	68ec      	ldreq	r4, [r5, #12]
 800979a:	e7e6      	b.n	800976a <__swsetup_r+0x1e>
 800979c:	0758      	lsls	r0, r3, #29
 800979e:	d512      	bpl.n	80097c6 <__swsetup_r+0x7a>
 80097a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097a2:	b141      	cbz	r1, 80097b6 <__swsetup_r+0x6a>
 80097a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097a8:	4299      	cmp	r1, r3
 80097aa:	d002      	beq.n	80097b2 <__swsetup_r+0x66>
 80097ac:	4630      	mov	r0, r6
 80097ae:	f7ff f9cf 	bl	8008b50 <_free_r>
 80097b2:	2300      	movs	r3, #0
 80097b4:	6363      	str	r3, [r4, #52]	; 0x34
 80097b6:	89a3      	ldrh	r3, [r4, #12]
 80097b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097bc:	81a3      	strh	r3, [r4, #12]
 80097be:	2300      	movs	r3, #0
 80097c0:	6063      	str	r3, [r4, #4]
 80097c2:	6923      	ldr	r3, [r4, #16]
 80097c4:	6023      	str	r3, [r4, #0]
 80097c6:	89a3      	ldrh	r3, [r4, #12]
 80097c8:	f043 0308 	orr.w	r3, r3, #8
 80097cc:	81a3      	strh	r3, [r4, #12]
 80097ce:	6923      	ldr	r3, [r4, #16]
 80097d0:	b94b      	cbnz	r3, 80097e6 <__swsetup_r+0x9a>
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097dc:	d003      	beq.n	80097e6 <__swsetup_r+0x9a>
 80097de:	4621      	mov	r1, r4
 80097e0:	4630      	mov	r0, r6
 80097e2:	f000 f847 	bl	8009874 <__smakebuf_r>
 80097e6:	89a0      	ldrh	r0, [r4, #12]
 80097e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097ec:	f010 0301 	ands.w	r3, r0, #1
 80097f0:	d00a      	beq.n	8009808 <__swsetup_r+0xbc>
 80097f2:	2300      	movs	r3, #0
 80097f4:	60a3      	str	r3, [r4, #8]
 80097f6:	6963      	ldr	r3, [r4, #20]
 80097f8:	425b      	negs	r3, r3
 80097fa:	61a3      	str	r3, [r4, #24]
 80097fc:	6923      	ldr	r3, [r4, #16]
 80097fe:	b943      	cbnz	r3, 8009812 <__swsetup_r+0xc6>
 8009800:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009804:	d1ba      	bne.n	800977c <__swsetup_r+0x30>
 8009806:	bd70      	pop	{r4, r5, r6, pc}
 8009808:	0781      	lsls	r1, r0, #30
 800980a:	bf58      	it	pl
 800980c:	6963      	ldrpl	r3, [r4, #20]
 800980e:	60a3      	str	r3, [r4, #8]
 8009810:	e7f4      	b.n	80097fc <__swsetup_r+0xb0>
 8009812:	2000      	movs	r0, #0
 8009814:	e7f7      	b.n	8009806 <__swsetup_r+0xba>
 8009816:	bf00      	nop
 8009818:	20000034 	.word	0x20000034
 800981c:	08009a4c 	.word	0x08009a4c
 8009820:	08009a6c 	.word	0x08009a6c
 8009824:	08009a2c 	.word	0x08009a2c

08009828 <__swhatbuf_r>:
 8009828:	b570      	push	{r4, r5, r6, lr}
 800982a:	460e      	mov	r6, r1
 800982c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009830:	2900      	cmp	r1, #0
 8009832:	b096      	sub	sp, #88	; 0x58
 8009834:	4614      	mov	r4, r2
 8009836:	461d      	mov	r5, r3
 8009838:	da08      	bge.n	800984c <__swhatbuf_r+0x24>
 800983a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	602a      	str	r2, [r5, #0]
 8009842:	061a      	lsls	r2, r3, #24
 8009844:	d410      	bmi.n	8009868 <__swhatbuf_r+0x40>
 8009846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800984a:	e00e      	b.n	800986a <__swhatbuf_r+0x42>
 800984c:	466a      	mov	r2, sp
 800984e:	f000 f851 	bl	80098f4 <_fstat_r>
 8009852:	2800      	cmp	r0, #0
 8009854:	dbf1      	blt.n	800983a <__swhatbuf_r+0x12>
 8009856:	9a01      	ldr	r2, [sp, #4]
 8009858:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800985c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009860:	425a      	negs	r2, r3
 8009862:	415a      	adcs	r2, r3
 8009864:	602a      	str	r2, [r5, #0]
 8009866:	e7ee      	b.n	8009846 <__swhatbuf_r+0x1e>
 8009868:	2340      	movs	r3, #64	; 0x40
 800986a:	2000      	movs	r0, #0
 800986c:	6023      	str	r3, [r4, #0]
 800986e:	b016      	add	sp, #88	; 0x58
 8009870:	bd70      	pop	{r4, r5, r6, pc}
	...

08009874 <__smakebuf_r>:
 8009874:	898b      	ldrh	r3, [r1, #12]
 8009876:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009878:	079d      	lsls	r5, r3, #30
 800987a:	4606      	mov	r6, r0
 800987c:	460c      	mov	r4, r1
 800987e:	d507      	bpl.n	8009890 <__smakebuf_r+0x1c>
 8009880:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009884:	6023      	str	r3, [r4, #0]
 8009886:	6123      	str	r3, [r4, #16]
 8009888:	2301      	movs	r3, #1
 800988a:	6163      	str	r3, [r4, #20]
 800988c:	b002      	add	sp, #8
 800988e:	bd70      	pop	{r4, r5, r6, pc}
 8009890:	ab01      	add	r3, sp, #4
 8009892:	466a      	mov	r2, sp
 8009894:	f7ff ffc8 	bl	8009828 <__swhatbuf_r>
 8009898:	9900      	ldr	r1, [sp, #0]
 800989a:	4605      	mov	r5, r0
 800989c:	4630      	mov	r0, r6
 800989e:	f7ff f9c3 	bl	8008c28 <_malloc_r>
 80098a2:	b948      	cbnz	r0, 80098b8 <__smakebuf_r+0x44>
 80098a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098a8:	059a      	lsls	r2, r3, #22
 80098aa:	d4ef      	bmi.n	800988c <__smakebuf_r+0x18>
 80098ac:	f023 0303 	bic.w	r3, r3, #3
 80098b0:	f043 0302 	orr.w	r3, r3, #2
 80098b4:	81a3      	strh	r3, [r4, #12]
 80098b6:	e7e3      	b.n	8009880 <__smakebuf_r+0xc>
 80098b8:	4b0d      	ldr	r3, [pc, #52]	; (80098f0 <__smakebuf_r+0x7c>)
 80098ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	6020      	str	r0, [r4, #0]
 80098c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098c4:	81a3      	strh	r3, [r4, #12]
 80098c6:	9b00      	ldr	r3, [sp, #0]
 80098c8:	6163      	str	r3, [r4, #20]
 80098ca:	9b01      	ldr	r3, [sp, #4]
 80098cc:	6120      	str	r0, [r4, #16]
 80098ce:	b15b      	cbz	r3, 80098e8 <__smakebuf_r+0x74>
 80098d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098d4:	4630      	mov	r0, r6
 80098d6:	f000 f81f 	bl	8009918 <_isatty_r>
 80098da:	b128      	cbz	r0, 80098e8 <__smakebuf_r+0x74>
 80098dc:	89a3      	ldrh	r3, [r4, #12]
 80098de:	f023 0303 	bic.w	r3, r3, #3
 80098e2:	f043 0301 	orr.w	r3, r3, #1
 80098e6:	81a3      	strh	r3, [r4, #12]
 80098e8:	89a0      	ldrh	r0, [r4, #12]
 80098ea:	4305      	orrs	r5, r0
 80098ec:	81a5      	strh	r5, [r4, #12]
 80098ee:	e7cd      	b.n	800988c <__smakebuf_r+0x18>
 80098f0:	0800892d 	.word	0x0800892d

080098f4 <_fstat_r>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	4d07      	ldr	r5, [pc, #28]	; (8009914 <_fstat_r+0x20>)
 80098f8:	2300      	movs	r3, #0
 80098fa:	4604      	mov	r4, r0
 80098fc:	4608      	mov	r0, r1
 80098fe:	4611      	mov	r1, r2
 8009900:	602b      	str	r3, [r5, #0]
 8009902:	f7fe fe66 	bl	80085d2 <_fstat>
 8009906:	1c43      	adds	r3, r0, #1
 8009908:	d102      	bne.n	8009910 <_fstat_r+0x1c>
 800990a:	682b      	ldr	r3, [r5, #0]
 800990c:	b103      	cbz	r3, 8009910 <_fstat_r+0x1c>
 800990e:	6023      	str	r3, [r4, #0]
 8009910:	bd38      	pop	{r3, r4, r5, pc}
 8009912:	bf00      	nop
 8009914:	200009bc 	.word	0x200009bc

08009918 <_isatty_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	4d06      	ldr	r5, [pc, #24]	; (8009934 <_isatty_r+0x1c>)
 800991c:	2300      	movs	r3, #0
 800991e:	4604      	mov	r4, r0
 8009920:	4608      	mov	r0, r1
 8009922:	602b      	str	r3, [r5, #0]
 8009924:	f7fe ffbc 	bl	80088a0 <_isatty>
 8009928:	1c43      	adds	r3, r0, #1
 800992a:	d102      	bne.n	8009932 <_isatty_r+0x1a>
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	b103      	cbz	r3, 8009932 <_isatty_r+0x1a>
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	bd38      	pop	{r3, r4, r5, pc}
 8009934:	200009bc 	.word	0x200009bc

08009938 <_init>:
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993a:	bf00      	nop
 800993c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993e:	bc08      	pop	{r3}
 8009940:	469e      	mov	lr, r3
 8009942:	4770      	bx	lr

08009944 <_fini>:
 8009944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009946:	bf00      	nop
 8009948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800994a:	bc08      	pop	{r3}
 800994c:	469e      	mov	lr, r3
 800994e:	4770      	bx	lr
